"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@react-leaflet/core");
const CanvasOverlay_1 = require("./CanvasOverlay");
exports.default = core_1.createLayerComponent(function createCanvasOverlay(_a, ctx) {
    var { bounds, canvas } = _a, options = __rest(_a, ["bounds", "canvas"]);
    const instance = new CanvasOverlay_1.canvasOverlay(canvas, bounds, options);
    const { width, height } = options;
    canvas.width = width || canvas.width;
    canvas.height = height || canvas.height;
    return { instance, context: Object.assign(Object.assign({}, ctx), { overlayContainer: instance }) };
}, function updateCanvasOverlay(overlay, props, prevProps) {
    core_1.updateMediaOverlay(overlay, props, prevProps);
    if (props.width && prevProps.width !== props.width || prevProps.height !== props.height) {
        const canvas = overlay.getElement();
        if (typeof props.width === 'number') {
            canvas.width = props.width;
        }
        if (typeof props.height === 'number') {
            canvas.height = props.height;
        }
    }
});
