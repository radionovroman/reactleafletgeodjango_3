"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.canvasOverlay = exports.CanvasOverlay = void 0;
const leaflet_1 = require("leaflet");
/*
 * @class CanvasOverlay
 * @aka L.CanvasOverlay
 * @inherits ImageOverlay
 *
 * Used to load and display a HTML canvas over specific bounds of the map. Extends `ImageOverlay`.
 *
 * A canvas overlay uses the [`<canvas>`](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)
 * HTML5 element.
 *
 * @example
 *
 * ```js
 * const canvasEl = document.createElement('canvas'),
 * 	canvasBounds = [[ 32, -130], [ 13, -100]];
 * L.videoOverlay(canvasEl, canvasBounds ).addTo(map);
 * ```
 */
exports.CanvasOverlay = leaflet_1.ImageOverlay.extend({
    // @section
    // @aka CanvasOverlay options
    options: {
    // No options yet
    },
    _initImage: function () {
        const wasElementSupplied = this._url.tagName === 'CANVAS';
        const canvas = this._image = wasElementSupplied ? this._url : leaflet_1.DomUtil.create('canvas');
        console.log({ wasElementSupplied, image: this._image, a: this.getElement() });
        leaflet_1.DomUtil.addClass(canvas, 'leaflet-image-layer');
        if (this._zoomAnimated) {
            leaflet_1.DomUtil.addClass(canvas, 'leaflet-zoom-animated');
        }
        if (this.options.className) {
            leaflet_1.DomUtil.addClass(canvas, this.options.className);
        }
        canvas.onselectstart = leaflet_1.Util.falseFn;
        canvas.onmousemove = leaflet_1.Util.falseFn;
    }
    // @method getElement(): HTMLCanvasElement
    // Returns the instance of [`HTMLCanvasElement`](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement)
    // used by this overlay.
});
// @factory L.canvasOverlay(canvas: HTMLCanvasElement, bounds: LatLngBoundsExpression, options?: CanvasOverlay options)
// Instantiates an image overlay object given a canvas element and the geographical bounds it is tied to.
function canvasOverlay(canvas, bounds, options) {
    // TODO: type this as extended ImageOverlay
    return new exports.CanvasOverlay(canvas, bounds, options);
}
exports.canvasOverlay = canvasOverlay;
