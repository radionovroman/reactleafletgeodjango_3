{"ast":null,"code":"import { DomUtil } from 'leaflet';\nimport { polygons, instanceKey } from '../FreeDraw';\nimport { NONE, CREATE, EDIT, DELETE, APPEND } from './Flags';\n/**\n * @method updateFor\n * @param {Object} map\n * @param {String} eventType\n * @return {void}\n */\n\nexport const updateFor = (map, eventType) => {\n  const latLngs = Array.from(polygons.get(map) || []).map(polygon => {\n    // Ensure the polygon has been closed.\n    const latLngs = polygon.getLatLngs();\n    return [...latLngs[0], latLngs[0][0]];\n  }); // Fire the current set of lat lngs.\n\n  map[instanceKey].fire('markers', {\n    latLngs,\n    eventType\n  });\n};\n/**\n * @method classesFor\n * @param {Object} map\n * @param {Number} mode\n * @return {void}\n */\n\nexport const classesFor = (map, mode) => {\n  /**\n   * @constant modeMap\n   * @type {Object}\n   */\n  const modeMap = {\n    [NONE]: 'mode-none',\n    [CREATE]: 'mode-create',\n    [EDIT]: 'mode-edit',\n    [DELETE]: 'mode-delete',\n    [APPEND]: 'mode-append'\n  };\n  Object.keys(modeMap).forEach(key => {\n    const className = modeMap[key];\n    const isModeActive = mode & key; // Remove the class name if it's set already on the map container.\n\n    DomUtil.removeClass(map._container, className); // Apply the class names to the node container depending on whether the mode is active.\n\n    isModeActive && DomUtil.addClass(map._container, className);\n    mode === 0 && DomUtil.addClass(map._container, modeMap[NONE]);\n  });\n};","map":{"version":3,"names":["DomUtil","polygons","instanceKey","NONE","CREATE","EDIT","DELETE","APPEND","updateFor","map","eventType","latLngs","Array","from","get","polygon","getLatLngs","fire","classesFor","mode","modeMap","Object","keys","forEach","key","className","isModeActive","removeClass","_container","addClass"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/leaflet-freedraw/src/helpers/Layer.js"],"sourcesContent":["import { DomUtil } from 'leaflet';\nimport { polygons, instanceKey } from '../FreeDraw';\nimport { NONE, CREATE, EDIT, DELETE, APPEND } from './Flags';\n\n/**\n * @method updateFor\n * @param {Object} map\n * @param {String} eventType\n * @return {void}\n */\nexport const updateFor = (map, eventType) => {\n\n    const latLngs = Array.from(polygons.get(map) || []).map(polygon => {\n\n        // Ensure the polygon has been closed.\n        const latLngs = polygon.getLatLngs();\n        return [ ...latLngs[0], latLngs[0][0] ];\n\n    });\n\n    // Fire the current set of lat lngs.\n    map[instanceKey].fire('markers', { latLngs, eventType });\n\n};\n\n/**\n * @method classesFor\n * @param {Object} map\n * @param {Number} mode\n * @return {void}\n */\nexport const classesFor = (map, mode) => {\n\n    /**\n     * @constant modeMap\n     * @type {Object}\n     */\n    const modeMap = {\n        [NONE]: 'mode-none',\n        [CREATE]: 'mode-create',\n        [EDIT]: 'mode-edit',\n        [DELETE]: 'mode-delete',\n        [APPEND]: 'mode-append'\n    };\n\n    Object.keys(modeMap).forEach(key => {\n\n        const className = modeMap[key];\n        const isModeActive = mode & key;\n\n        // Remove the class name if it's set already on the map container.\n        DomUtil.removeClass(map._container, className);\n\n        // Apply the class names to the node container depending on whether the mode is active.\n        isModeActive && DomUtil.addClass(map._container, className);\n        mode === 0 && DomUtil.addClass(map._container, modeMap[NONE]);\n\n    });\n\n};\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,SAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,MAArC,QAAmD,SAAnD;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,SAAN,KAAoB;EAEzC,MAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAWZ,QAAQ,CAACa,GAAT,CAAaL,GAAb,KAAqB,EAAhC,EAAoCA,GAApC,CAAwCM,OAAO,IAAI;IAE/D;IACA,MAAMJ,OAAO,GAAGI,OAAO,CAACC,UAAR,EAAhB;IACA,OAAO,CAAE,GAAGL,OAAO,CAAC,CAAD,CAAZ,EAAiBA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAjB,CAAP;EAEH,CANe,CAAhB,CAFyC,CAUzC;;EACAF,GAAG,CAACP,WAAD,CAAH,CAAiBe,IAAjB,CAAsB,SAAtB,EAAiC;IAAEN,OAAF;IAAWD;EAAX,CAAjC;AAEH,CAbM;AAeP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,UAAU,GAAG,CAACT,GAAD,EAAMU,IAAN,KAAe;EAErC;AACJ;AACA;AACA;EACI,MAAMC,OAAO,GAAG;IACZ,CAACjB,IAAD,GAAQ,WADI;IAEZ,CAACC,MAAD,GAAU,aAFE;IAGZ,CAACC,IAAD,GAAQ,WAHI;IAIZ,CAACC,MAAD,GAAU,aAJE;IAKZ,CAACC,MAAD,GAAU;EALE,CAAhB;EAQAc,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6BC,GAAG,IAAI;IAEhC,MAAMC,SAAS,GAAGL,OAAO,CAACI,GAAD,CAAzB;IACA,MAAME,YAAY,GAAGP,IAAI,GAAGK,GAA5B,CAHgC,CAKhC;;IACAxB,OAAO,CAAC2B,WAAR,CAAoBlB,GAAG,CAACmB,UAAxB,EAAoCH,SAApC,EANgC,CAQhC;;IACAC,YAAY,IAAI1B,OAAO,CAAC6B,QAAR,CAAiBpB,GAAG,CAACmB,UAArB,EAAiCH,SAAjC,CAAhB;IACAN,IAAI,KAAK,CAAT,IAAcnB,OAAO,CAAC6B,QAAR,CAAiBpB,GAAG,CAACmB,UAArB,EAAiCR,OAAO,CAACjB,IAAD,CAAxC,CAAd;EAEH,CAZD;AAcH,CA5BM"},"metadata":{},"sourceType":"module"}