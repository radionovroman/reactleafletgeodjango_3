{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/esnext.array.last-index.js\";\nimport \"core-js/modules/esnext.array.last-item.js\";\nimport \"core-js/modules/esnext.composite-key.js\";\nimport \"core-js/modules/esnext.composite-symbol.js\";\nimport \"core-js/modules/esnext.map.delete-all.js\";\nimport \"core-js/modules/esnext.map.every.js\";\nimport \"core-js/modules/esnext.map.filter.js\";\nimport \"core-js/modules/esnext.map.find.js\";\nimport \"core-js/modules/esnext.map.find-key.js\";\nimport \"core-js/modules/esnext.map.from.js\";\nimport \"core-js/modules/esnext.map.group-by.js\";\nimport \"core-js/modules/esnext.map.includes.js\";\nimport \"core-js/modules/esnext.map.key-by.js\";\nimport \"core-js/modules/esnext.map.key-of.js\";\nimport \"core-js/modules/esnext.map.map-keys.js\";\nimport \"core-js/modules/esnext.map.map-values.js\";\nimport \"core-js/modules/esnext.map.merge.js\";\nimport \"core-js/modules/esnext.map.of.js\";\nimport \"core-js/modules/esnext.map.reduce.js\";\nimport \"core-js/modules/esnext.map.some.js\";\nimport \"core-js/modules/esnext.map.update.js\";\nimport \"core-js/modules/esnext.math.clamp.js\";\nimport \"core-js/modules/esnext.math.deg-per-rad.js\";\nimport \"core-js/modules/esnext.math.degrees.js\";\nimport \"core-js/modules/esnext.math.fscale.js\";\nimport \"core-js/modules/esnext.math.iaddh.js\";\nimport \"core-js/modules/esnext.math.imulh.js\";\nimport \"core-js/modules/esnext.math.isubh.js\";\nimport \"core-js/modules/esnext.math.rad-per-deg.js\";\nimport \"core-js/modules/esnext.math.radians.js\";\nimport \"core-js/modules/esnext.math.scale.js\";\nimport \"core-js/modules/esnext.math.seeded-prng.js\";\nimport \"core-js/modules/esnext.math.signbit.js\";\nimport \"core-js/modules/esnext.math.umulh.js\";\nimport \"core-js/modules/esnext.number.from-string.js\";\nimport \"core-js/modules/esnext.observable.js\";\nimport \"core-js/modules/esnext.promise.try.js\";\nimport \"core-js/modules/esnext.reflect.define-metadata.js\";\nimport \"core-js/modules/esnext.reflect.delete-metadata.js\";\nimport \"core-js/modules/esnext.reflect.get-metadata.js\";\nimport \"core-js/modules/esnext.reflect.get-metadata-keys.js\";\nimport \"core-js/modules/esnext.reflect.get-own-metadata.js\";\nimport \"core-js/modules/esnext.reflect.get-own-metadata-keys.js\";\nimport \"core-js/modules/esnext.reflect.has-metadata.js\";\nimport \"core-js/modules/esnext.reflect.has-own-metadata.js\";\nimport \"core-js/modules/esnext.reflect.metadata.js\";\nimport \"core-js/modules/esnext.set.add-all.js\";\nimport \"core-js/modules/esnext.set.delete-all.js\";\nimport \"core-js/modules/esnext.set.difference.js\";\nimport \"core-js/modules/esnext.set.every.js\";\nimport \"core-js/modules/esnext.set.filter.js\";\nimport \"core-js/modules/esnext.set.find.js\";\nimport \"core-js/modules/esnext.set.from.js\";\nimport \"core-js/modules/esnext.set.intersection.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.js\";\nimport \"core-js/modules/esnext.set.join.js\";\nimport \"core-js/modules/esnext.set.map.js\";\nimport \"core-js/modules/esnext.set.of.js\";\nimport \"core-js/modules/esnext.set.reduce.js\";\nimport \"core-js/modules/esnext.set.some.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.js\";\nimport \"core-js/modules/esnext.set.union.js\";\nimport \"core-js/modules/esnext.string.at.js\";\nimport \"core-js/modules/esnext.string.code-points.js\";\nimport \"core-js/modules/esnext.symbol.dispose.js\";\nimport \"core-js/modules/esnext.symbol.observable.js\";\nimport \"core-js/modules/esnext.symbol.pattern-match.js\";\nimport \"core-js/modules/esnext.weak-map.delete-all.js\";\nimport \"core-js/modules/esnext.weak-map.from.js\";\nimport \"core-js/modules/esnext.weak-map.of.js\";\nimport \"core-js/modules/esnext.weak-set.add-all.js\";\nimport \"core-js/modules/esnext.weak-set.delete-all.js\";\nimport \"core-js/modules/esnext.weak-set.from.js\";\nimport \"core-js/modules/esnext.weak-set.of.js\";\nimport \"core-js/modules/web.immediate.js\";\nimport { noConflict, FeatureGroup, Point } from 'leaflet';\nimport { select } from 'd3-selection';\nimport { line, curveMonotoneX } from 'd3-shape';\nimport Set from 'es6-set';\nimport WeakMap from 'es6-weak-map';\nimport Symbol from 'es6-symbol';\nimport { updateFor } from './helpers/Layer';\nimport { createFor, removeFor, clearFor } from './helpers/Polygon';\nimport { CREATE, EDIT, DELETE, APPEND, EDIT_APPEND, NONE, ALL, modeFor } from './helpers/Flags';\nimport simplifyPolygon from './helpers/Simplify'; // Preventing binding to the `window`.\n\nnoConflict();\n/**\n * @constant polygons\n * @type {WeakMap}\n */\n\nexport const polygons = new WeakMap();\n/**\n * @constant defaultOptions\n * @type {Object}\n */\n\nexport const defaultOptions = {\n  mode: ALL,\n  smoothFactor: 0.3,\n  elbowDistance: 10,\n  simplifyFactor: 1.1,\n  mergePolygons: true,\n  concavePolygon: true,\n  maximumPolygons: Infinity,\n  notifyAfterEditExit: false,\n  leaveModeAfterCreate: false,\n  strokeWidth: 2\n};\n/**\n * @constant instanceKey\n * @type {Symbol}\n */\n\nexport const instanceKey = Symbol('freedraw/instance');\n/**\n * @constant modesKey\n * @type {Symbol}\n */\n\nexport const modesKey = Symbol('freedraw/modes');\n/**\n * @constant notifyDeferredKey\n * @type {Symbol}\n */\n\nexport const notifyDeferredKey = Symbol('freedraw/notify-deferred');\n/**\n * @constant edgesKey\n * @type {Symbol}\n */\n\nexport const edgesKey = Symbol('freedraw/edges');\n/**\n * @constant cancelKey\n * @type {Symbol}\n */\n\nconst cancelKey = Symbol('freedraw/cancel');\nexport default class FreeDraw extends FeatureGroup {\n  /**\n   * @constructor\n   * @param {Object} [options = {}]\n   * @return {void}\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n    super();\n    this.options = { ...defaultOptions,\n      ...options\n    };\n  }\n  /**\n   * @method onAdd\n   * @param {Object} map\n   * @return {void}\n   */\n\n\n  onAdd(map) {\n    // Memorise the map instance.\n    this.map = map; // Attach the cancel function and the instance to the map.\n\n    map[cancelKey] = () => {};\n\n    map[instanceKey] = this;\n\n    map[notifyDeferredKey] = () => {}; // Setup the dependency injection for simplifying the polygon.\n\n\n    map.simplifyPolygon = simplifyPolygon; // Add the item to the map.\n\n    polygons.set(map, new Set()); // Set the initial mode.\n\n    modeFor(map, this.options.mode, this.options); // Instantiate the SVG layer that sits on top of the map.\n\n    const svg = this.svg = select(map._container).append('svg').classed('free-draw', true).attr('width', '100%').attr('height', '100%').style('pointer-events', 'none').style('z-index', '1001').style('position', 'relative'); // Set the mouse events.\n\n    this.listenForEvents(map, svg, this.options);\n  }\n  /**\n   * @method onRemove\n   * @param {Object} map\n   * @return {void}\n   */\n\n\n  onRemove(map) {\n    // Remove the item from the map.\n    polygons.delete(map); // Remove the SVG layer.\n\n    this.svg.remove(); // Remove the appendages from the map container.\n\n    delete map[cancelKey];\n    delete map[instanceKey];\n    delete map.simplifyPolygon;\n  }\n  /**\n   * @method create\n   * @param {LatLng[]} latLngs\n   * @param {Object} [options = { concavePolygon: false }]\n   * @return {Object}\n   */\n\n\n  create(latLngs) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      concavePolygon: false\n    };\n    const created = createFor(this.map, latLngs, { ...this.options,\n      ...options\n    });\n    updateFor(this.map, 'create');\n    return created;\n  }\n  /**\n   * @method remove\n   * @param {Object} polygon\n   * @return {void}\n   */\n\n\n  remove(polygon) {\n    polygon ? removeFor(this.map, polygon) : super.remove();\n    updateFor(this.map, 'remove');\n  }\n  /**\n   * @method clear\n   * @return {void}\n   */\n\n\n  clear() {\n    clearFor(this.map);\n    updateFor(this.map, 'clear');\n  }\n  /**\n   * @method setMode\n   * @param {Number} [mode = null]\n   * @return {Number}\n   */\n\n\n  mode() {\n    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    // Set mode when passed `mode` is numeric, and then yield the current mode.\n    typeof mode === 'number' && modeFor(this.map, mode, this.options);\n    return this.map[modesKey];\n  }\n  /**\n   * @method size\n   * @return {Number}\n   */\n\n\n  size() {\n    return polygons.get(this.map).size;\n  }\n  /**\n   * @method all\n   * @return {Array}\n   */\n\n\n  all() {\n    return Array.from(polygons.get(this.map));\n  }\n  /**\n   * @method cancel\n   * @return {void}\n   */\n\n\n  cancel() {\n    this.map[cancelKey]();\n  }\n  /**\n   * @method listenForEvents\n   * @param {Object} map\n   * @param {Object} svg\n   * @param {Object} options\n   * @return {void}\n   */\n\n\n  listenForEvents(map, svg, options) {\n    var _this = this;\n\n    /**\n     * @method mouseDown\n     * @param {Object} event\n     * @return {void}\n     */\n    const mouseDown = event => {\n      if (!(map[modesKey] & CREATE)) {\n        // Polygons can only be created when the mode includes create.\n        return;\n      }\n      /**\n       * @constant latLngs\n       * @type {Set}\n       */\n\n\n      const latLngs = new Set(); // Create the line iterator and move it to its first `yield` point, passing in the start point\n      // from the mouse down event.\n\n      const lineIterator = this.createPath(svg, map.latLngToContainerPoint(event.latlng), options.strokeWidth);\n      /**\n       * @method mouseMove\n       * @param {Object} event\n       * @return {void}\n       */\n\n      const mouseMove = event => {\n        // Resolve the pixel point to the latitudinal and longitudinal equivalent.\n        const point = map.mouseEventToContainerPoint(event.originalEvent); // Push each lat/lng value into the points set.\n\n        latLngs.add(map.containerPointToLatLng(point)); // Invoke the generator by passing in the starting point for the path.\n\n        lineIterator(new Point(point.x, point.y));\n      }; // Create the path when the user moves their cursor.\n\n\n      map.on('mousemove touchmove', mouseMove);\n      /**\n       * @method mouseUp\n       * @param {Boolean} [create = true]\n       * @return {Function}\n       */\n\n      const mouseUp = function (_) {\n        let create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        // Remove the ability to invoke `cancel`.\n        map[cancelKey] = () => {}; // Stop listening to the events.\n\n\n        map.off('mouseup', mouseUp);\n        map.off('mousemove', mouseMove);\n        'body' in document && document.body.removeEventListener('mouseleave', mouseUp); // Clear the SVG canvas.\n\n        svg.selectAll('*').remove();\n\n        if (create) {\n          // ...And finally if we have any lat/lngs in our set then we can attempt to\n          // create the polygon.\n          latLngs.size && createFor(map, Array.from(latLngs), options); // Finally invoke the callback for the polygon regions.\n\n          updateFor(map, 'create'); // Exit the `CREATE` mode if the options permit it.\n\n          options.leaveModeAfterCreate && _this.mode(_this.mode() ^ CREATE);\n        }\n      }; // Clear up the events when the user releases the mouse.\n\n\n      map.on('mouseup touchend', mouseUp);\n      'body' in document && document.body.addEventListener('mouseleave', mouseUp); // Setup the function to invoke when `cancel` has been invoked.\n\n      map[cancelKey] = () => mouseUp({}, false);\n    };\n\n    map.on('mousedown touchstart', mouseDown);\n  }\n  /**\n   * @method createPath\n   * @param {Object} svg\n   * @param {Point} fromPoint\n   * @param {Number} strokeWidth\n   * @return {void}\n   */\n\n\n  createPath(svg, fromPoint, strokeWidth) {\n    let lastPoint = fromPoint;\n    const lineFunction = line().curve(curveMonotoneX).x(d => d.x).y(d => d.y);\n    return toPoint => {\n      const lineData = [lastPoint, toPoint];\n      lastPoint = toPoint; // Draw SVG line based on the last movement of the mouse's position.\n\n      svg.append('path').classed('leaflet-line', true).attr('d', lineFunction(lineData)).attr('fill', 'none').attr('stroke', 'black').attr('stroke-width', strokeWidth);\n    };\n  }\n\n}\n/**\n * @method freeDraw\n * @return {Object}\n */\n\nexport const freeDraw = options => {\n  return new FreeDraw(options);\n};\nexport { CREATE, EDIT, DELETE, APPEND, EDIT_APPEND, NONE, ALL } from './helpers/Flags';\n\nif (typeof window !== 'undefined') {\n  // Attach to the `window` as `FreeDraw` if it exists, as this would prevent `new FreeDraw.default` when\n  // using the web version.\n  window.FreeDraw = FreeDraw;\n  FreeDraw.CREATE = CREATE;\n  FreeDraw.EDIT = EDIT;\n  FreeDraw.DELETE = DELETE;\n  FreeDraw.APPEND = APPEND;\n  FreeDraw.EDIT_APPEND = EDIT_APPEND;\n  FreeDraw.NONE = NONE;\n  FreeDraw.ALL = ALL;\n}","map":{"version":3,"names":["noConflict","FeatureGroup","Point","select","line","curveMonotoneX","Set","WeakMap","Symbol","updateFor","createFor","removeFor","clearFor","CREATE","EDIT","DELETE","APPEND","EDIT_APPEND","NONE","ALL","modeFor","simplifyPolygon","polygons","defaultOptions","mode","smoothFactor","elbowDistance","simplifyFactor","mergePolygons","concavePolygon","maximumPolygons","Infinity","notifyAfterEditExit","leaveModeAfterCreate","strokeWidth","instanceKey","modesKey","notifyDeferredKey","edgesKey","cancelKey","FreeDraw","constructor","options","onAdd","map","set","svg","_container","append","classed","attr","style","listenForEvents","onRemove","delete","remove","create","latLngs","created","polygon","clear","size","get","all","Array","from","cancel","mouseDown","event","lineIterator","createPath","latLngToContainerPoint","latlng","mouseMove","point","mouseEventToContainerPoint","originalEvent","add","containerPointToLatLng","x","y","on","mouseUp","_","off","document","body","removeEventListener","selectAll","addEventListener","fromPoint","lastPoint","lineFunction","curve","d","toPoint","lineData","freeDraw","window"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/leaflet-freedraw/src/FreeDraw.js"],"sourcesContent":["import 'core-js';\nimport 'regenerator-runtime/runtime';\n\nimport { noConflict, FeatureGroup, Point } from 'leaflet';\nimport { select } from 'd3-selection';\nimport { line, curveMonotoneX } from 'd3-shape';\nimport Set from 'es6-set';\nimport WeakMap from 'es6-weak-map';\nimport Symbol from 'es6-symbol';\nimport { updateFor } from './helpers/Layer';\nimport { createFor, removeFor, clearFor } from './helpers/Polygon';\nimport { CREATE, EDIT, DELETE, APPEND, EDIT_APPEND, NONE, ALL, modeFor } from './helpers/Flags';\nimport simplifyPolygon from './helpers/Simplify';\n\n// Preventing binding to the `window`.\nnoConflict();\n\n/**\n * @constant polygons\n * @type {WeakMap}\n */\nexport const polygons = new WeakMap();\n\n/**\n * @constant defaultOptions\n * @type {Object}\n */\nexport const defaultOptions = {\n    mode: ALL,\n    smoothFactor: 0.3,\n    elbowDistance: 10,\n    simplifyFactor: 1.1,\n    mergePolygons: true,\n    concavePolygon: true,\n    maximumPolygons: Infinity,\n    notifyAfterEditExit: false,\n    leaveModeAfterCreate: false,\n    strokeWidth: 2\n};\n\n/**\n * @constant instanceKey\n * @type {Symbol}\n */\nexport const instanceKey = Symbol('freedraw/instance');\n\n/**\n * @constant modesKey\n * @type {Symbol}\n */\nexport const modesKey = Symbol('freedraw/modes');\n\n/**\n * @constant notifyDeferredKey\n * @type {Symbol}\n */\nexport const notifyDeferredKey = Symbol('freedraw/notify-deferred');\n\n/**\n * @constant edgesKey\n * @type {Symbol}\n */\nexport const edgesKey = Symbol('freedraw/edges');\n\n/**\n * @constant cancelKey\n * @type {Symbol}\n */\nconst cancelKey = Symbol('freedraw/cancel');\n\nexport default class FreeDraw extends FeatureGroup {\n\n    /**\n     * @constructor\n     * @param {Object} [options = {}]\n     * @return {void}\n     */\n    constructor(options = defaultOptions) {\n        super();\n        this.options = { ...defaultOptions, ...options };\n    }\n\n    /**\n     * @method onAdd\n     * @param {Object} map\n     * @return {void}\n     */\n    onAdd(map) {\n\n        // Memorise the map instance.\n        this.map = map;\n\n        // Attach the cancel function and the instance to the map.\n        map[cancelKey] = () => {};\n        map[instanceKey] = this;\n        map[notifyDeferredKey] = () => {};\n\n        // Setup the dependency injection for simplifying the polygon.\n        map.simplifyPolygon = simplifyPolygon;\n\n        // Add the item to the map.\n        polygons.set(map, new Set());\n\n        // Set the initial mode.\n        modeFor(map, this.options.mode, this.options);\n\n        // Instantiate the SVG layer that sits on top of the map.\n        const svg = this.svg = select(map._container).append('svg')\n                                 .classed('free-draw', true).attr('width', '100%').attr('height', '100%')\n                                 .style('pointer-events', 'none').style('z-index', '1001').style('position', 'relative');\n\n        // Set the mouse events.\n        this.listenForEvents(map, svg, this.options);\n\n    }\n\n    /**\n     * @method onRemove\n     * @param {Object} map\n     * @return {void}\n     */\n    onRemove(map) {\n\n        // Remove the item from the map.\n        polygons.delete(map);\n\n        // Remove the SVG layer.\n        this.svg.remove();\n\n        // Remove the appendages from the map container.\n        delete map[cancelKey];\n        delete map[instanceKey];\n        delete map.simplifyPolygon;\n\n    }\n\n    /**\n     * @method create\n     * @param {LatLng[]} latLngs\n     * @param {Object} [options = { concavePolygon: false }]\n     * @return {Object}\n     */\n    create(latLngs, options = { concavePolygon: false }) {\n        const created = createFor(this.map, latLngs, { ...this.options, ...options });\n        updateFor(this.map, 'create');\n        return created;\n    }\n\n    /**\n     * @method remove\n     * @param {Object} polygon\n     * @return {void}\n     */\n    remove(polygon) {\n        polygon ? removeFor(this.map, polygon) : super.remove();\n        updateFor(this.map, 'remove');\n    }\n\n    /**\n     * @method clear\n     * @return {void}\n     */\n    clear() {\n        clearFor(this.map);\n        updateFor(this.map, 'clear');\n    }\n\n    /**\n     * @method setMode\n     * @param {Number} [mode = null]\n     * @return {Number}\n     */\n    mode(mode = null) {\n\n        // Set mode when passed `mode` is numeric, and then yield the current mode.\n        typeof mode === 'number' && modeFor(this.map, mode, this.options);\n        return this.map[modesKey];\n\n    }\n\n    /**\n     * @method size\n     * @return {Number}\n     */\n    size() {\n        return polygons.get(this.map).size;\n    }\n\n    /**\n     * @method all\n     * @return {Array}\n     */\n    all() {\n        return Array.from(polygons.get(this.map));\n    }\n\n    /**\n     * @method cancel\n     * @return {void}\n     */\n    cancel() {\n        this.map[cancelKey]();\n    }\n\n    /**\n     * @method listenForEvents\n     * @param {Object} map\n     * @param {Object} svg\n     * @param {Object} options\n     * @return {void}\n     */\n    listenForEvents(map, svg, options) {\n\n        /**\n         * @method mouseDown\n         * @param {Object} event\n         * @return {void}\n         */\n        const mouseDown = event => {\n\n            if (!(map[modesKey] & CREATE)) {\n\n                // Polygons can only be created when the mode includes create.\n                return;\n\n            }\n\n            /**\n             * @constant latLngs\n             * @type {Set}\n             */\n            const latLngs = new Set();\n\n            // Create the line iterator and move it to its first `yield` point, passing in the start point\n            // from the mouse down event.\n            const lineIterator = this.createPath(svg, map.latLngToContainerPoint(event.latlng), options.strokeWidth);\n\n            /**\n             * @method mouseMove\n             * @param {Object} event\n             * @return {void}\n             */\n            const mouseMove = event => {\n\n                // Resolve the pixel point to the latitudinal and longitudinal equivalent.\n                const point = map.mouseEventToContainerPoint(event.originalEvent);\n\n                // Push each lat/lng value into the points set.\n                latLngs.add(map.containerPointToLatLng(point));\n\n                // Invoke the generator by passing in the starting point for the path.\n                lineIterator(new Point(point.x, point.y));\n\n            };\n\n            // Create the path when the user moves their cursor.\n            map.on('mousemove touchmove', mouseMove);\n\n            /**\n             * @method mouseUp\n             * @param {Boolean} [create = true]\n             * @return {Function}\n             */\n            const mouseUp = (_, create = true) => {\n\n                // Remove the ability to invoke `cancel`.\n                map[cancelKey] = () => {};\n\n                // Stop listening to the events.\n                map.off('mouseup', mouseUp);\n                map.off('mousemove', mouseMove);\n                'body' in document && document.body.removeEventListener('mouseleave', mouseUp);\n\n                // Clear the SVG canvas.\n                svg.selectAll('*').remove();\n\n                if (create) {\n\n                    // ...And finally if we have any lat/lngs in our set then we can attempt to\n                    // create the polygon.\n                    latLngs.size && createFor(map, Array.from(latLngs), options);\n\n                    // Finally invoke the callback for the polygon regions.\n                    updateFor(map, 'create');\n\n                    // Exit the `CREATE` mode if the options permit it.\n                    options.leaveModeAfterCreate && this.mode(this.mode() ^ CREATE);\n\n                }\n\n            };\n\n            // Clear up the events when the user releases the mouse.\n            map.on('mouseup touchend', mouseUp);\n            'body' in document && document.body.addEventListener('mouseleave', mouseUp);\n\n            // Setup the function to invoke when `cancel` has been invoked.\n            map[cancelKey] = () => mouseUp({}, false);\n\n        };\n\n        map.on('mousedown touchstart', mouseDown);\n\n    }\n\n    /**\n     * @method createPath\n     * @param {Object} svg\n     * @param {Point} fromPoint\n     * @param {Number} strokeWidth\n     * @return {void}\n     */\n    createPath(svg, fromPoint, strokeWidth) {\n        let lastPoint = fromPoint;\n\n        const lineFunction = line().curve(curveMonotoneX).x(d => d.x).y(d => d.y);\n\n        return toPoint => {\n            const lineData = [ lastPoint, toPoint ];\n            lastPoint = toPoint;\n            // Draw SVG line based on the last movement of the mouse's position.\n            svg.append('path').classed('leaflet-line', true)\n                .attr('d', lineFunction(lineData)).attr('fill', 'none')\n                .attr('stroke', 'black').attr('stroke-width', strokeWidth);\n        };\n    }\n\n}\n\n/**\n * @method freeDraw\n * @return {Object}\n */\nexport const freeDraw = options => {\n    return new FreeDraw(options);\n};\n\nexport { CREATE, EDIT, DELETE, APPEND, EDIT_APPEND, NONE, ALL } from './helpers/Flags';\n\nif (typeof window !== 'undefined') {\n\n    // Attach to the `window` as `FreeDraw` if it exists, as this would prevent `new FreeDraw.default` when\n    // using the web version.\n    window.FreeDraw = FreeDraw;\n    FreeDraw.CREATE = CREATE;\n    FreeDraw.EDIT = EDIT;\n    FreeDraw.DELETE = DELETE;\n    FreeDraw.APPEND = APPEND;\n    FreeDraw.EDIT_APPEND = EDIT_APPEND;\n    FreeDraw.NONE = NONE;\n    FreeDraw.ALL = ALL;\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}