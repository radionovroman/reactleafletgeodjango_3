{"ast":null,"code":"import hypot from '../common/hypot';\nexport function init() {\n  this.flip_axis = this.sweep === 'x' ? 1 : 0;\n  this.h = Number(this.h);\n  this.radius_g_1 = this.h / this.a;\n\n  if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n    throw new Error();\n  }\n\n  this.radius_g = 1.0 + this.radius_g_1;\n  this.C = this.radius_g * this.radius_g - 1.0;\n\n  if (this.es !== 0.0) {\n    var one_es = 1.0 - this.es;\n    var rone_es = 1 / one_es;\n    this.radius_p = Math.sqrt(one_es);\n    this.radius_p2 = one_es;\n    this.radius_p_inv2 = rone_es;\n    this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n  } else {\n    this.radius_p = 1.0;\n    this.radius_p2 = 1.0;\n    this.radius_p_inv2 = 1.0;\n    this.shape = 'sphere'; // Use as a condition in the forward and inverse functions.\n  }\n\n  if (!this.title) {\n    this.title = \"Geostationary Satellite View\";\n  }\n}\n\nfunction forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var tmp, v_x, v_y, v_z;\n  lon = lon - this.long0;\n\n  if (this.shape === 'ellipse') {\n    lat = Math.atan(this.radius_p2 * Math.tan(lat));\n    var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n    v_x = r * Math.cos(lon) * Math.cos(lat);\n    v_y = r * Math.sin(lon) * Math.cos(lat);\n    v_z = r * Math.sin(lat);\n\n    if ((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2 < 0.0) {\n      p.x = Number.NaN;\n      p.y = Number.NaN;\n      return p;\n    }\n\n    tmp = this.radius_g - v_x;\n\n    if (this.flip_axis) {\n      p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n      p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n    } else {\n      p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n      p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n    }\n  } else if (this.shape === 'sphere') {\n    tmp = Math.cos(lat);\n    v_x = Math.cos(lon) * tmp;\n    v_y = Math.sin(lon) * tmp;\n    v_z = Math.sin(lat);\n    tmp = this.radius_g - v_x;\n\n    if (this.flip_axis) {\n      p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n      p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n    } else {\n      p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n      p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n    }\n  }\n\n  p.x = p.x * this.a;\n  p.y = p.y * this.a;\n  return p;\n}\n\nfunction inverse(p) {\n  var v_x = -1.0;\n  var v_y = 0.0;\n  var v_z = 0.0;\n  var a, b, det, k;\n  p.x = p.x / this.a;\n  p.y = p.y / this.a;\n\n  if (this.shape === 'ellipse') {\n    if (this.flip_axis) {\n      v_z = Math.tan(p.y / this.radius_g_1);\n      v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n    } else {\n      v_y = Math.tan(p.x / this.radius_g_1);\n      v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n    }\n\n    var v_zp = v_z / this.radius_p;\n    a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n    b = 2 * this.radius_g * v_x;\n    det = b * b - 4 * a * this.C;\n\n    if (det < 0.0) {\n      p.x = Number.NaN;\n      p.y = Number.NaN;\n      return p;\n    }\n\n    k = (-b - Math.sqrt(det)) / (2.0 * a);\n    v_x = this.radius_g + k * v_x;\n    v_y *= k;\n    v_z *= k;\n    p.x = Math.atan2(v_y, v_x);\n    p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n  } else if (this.shape === 'sphere') {\n    if (this.flip_axis) {\n      v_z = Math.tan(p.y / this.radius_g_1);\n      v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n    } else {\n      v_y = Math.tan(p.x / this.radius_g_1);\n      v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n    }\n\n    a = v_y * v_y + v_z * v_z + v_x * v_x;\n    b = 2 * this.radius_g * v_x;\n    det = b * b - 4 * a * this.C;\n\n    if (det < 0.0) {\n      p.x = Number.NaN;\n      p.y = Number.NaN;\n      return p;\n    }\n\n    k = (-b - Math.sqrt(det)) / (2.0 * a);\n    v_x = this.radius_g + k * v_x;\n    v_y *= k;\n    v_z *= k;\n    p.x = Math.atan2(v_y, v_x);\n    p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n  }\n\n  p.x = p.x + this.long0;\n  return p;\n}\n\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"names":["hypot","init","flip_axis","sweep","h","Number","radius_g_1","a","Error","radius_g","C","es","one_es","rone_es","radius_p","Math","sqrt","radius_p2","radius_p_inv2","shape","title","forward","p","lon","x","lat","y","tmp","v_x","v_y","v_z","long0","atan","tan","r","cos","sin","NaN","inverse","b","det","k","v_zp","atan2","names"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/proj4/lib/projections/geos.js"],"sourcesContent":["import hypot from '../common/hypot';\n\nexport function init() {\n    this.flip_axis = (this.sweep === 'x' ? 1 : 0);\n    this.h = Number(this.h);\n    this.radius_g_1 = this.h / this.a;\n\n    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n        throw new Error();\n    }\n\n    this.radius_g = 1.0 + this.radius_g_1;\n    this.C = this.radius_g * this.radius_g - 1.0;\n\n    if (this.es !== 0.0) {\n        var one_es = 1.0 - this.es;\n        var rone_es = 1 / one_es;\n\n        this.radius_p = Math.sqrt(one_es);\n        this.radius_p2 = one_es;\n        this.radius_p_inv2 = rone_es;\n\n        this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n    } else {\n        this.radius_p = 1.0;\n        this.radius_p2 = 1.0;\n        this.radius_p_inv2 = 1.0;\n\n        this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.\n    }\n\n    if (!this.title) {\n        this.title = \"Geostationary Satellite View\";\n    }\n}\n\nfunction forward(p) {\n    var lon = p.x;\n    var lat = p.y;\n    var tmp, v_x, v_y, v_z;\n    lon = lon - this.long0;\n\n    if (this.shape === 'ellipse') {\n        lat = Math.atan(this.radius_p2 * Math.tan(lat));\n        var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n\n        v_x = r * Math.cos(lon) * Math.cos(lat);\n        v_y = r * Math.sin(lon) * Math.cos(lat);\n        v_z = r * Math.sin(lat);\n\n        if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        tmp = this.radius_g - v_x;\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    } else if (this.shape === 'sphere') {\n        tmp = Math.cos(lat);\n        v_x = Math.cos(lon) * tmp;\n        v_y = Math.sin(lon) * tmp;\n        v_z = Math.sin(lat);\n        tmp = this.radius_g - v_x;\n\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    }\n    p.x = p.x * this.a;\n    p.y = p.y * this.a;\n    return p;\n}\n\nfunction inverse(p) {\n    var v_x = -1.0;\n    var v_y = 0.0;\n    var v_z = 0.0;\n    var a, b, det, k;\n\n    p.x = p.x / this.a;\n    p.y = p.y / this.a;\n\n    if (this.shape === 'ellipse') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n        }\n\n        var v_zp = v_z / this.radius_p;\n        a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n    } else if (this.shape === 'sphere') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n        }\n\n        a = v_y * v_y + v_z * v_z + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    }\n    p.x = p.x + this.long0;\n    return p;\n}\n\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names,\n};\n\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AAEA,OAAO,SAASC,IAAT,GAAgB;EACnB,KAAKC,SAAL,GAAkB,KAAKC,KAAL,KAAe,GAAf,GAAqB,CAArB,GAAyB,CAA3C;EACA,KAAKC,CAAL,GAASC,MAAM,CAAC,KAAKD,CAAN,CAAf;EACA,KAAKE,UAAL,GAAkB,KAAKF,CAAL,GAAS,KAAKG,CAAhC;;EAEA,IAAI,KAAKD,UAAL,IAAmB,CAAnB,IAAwB,KAAKA,UAAL,GAAkB,IAA9C,EAAoD;IAChD,MAAM,IAAIE,KAAJ,EAAN;EACH;;EAED,KAAKC,QAAL,GAAgB,MAAM,KAAKH,UAA3B;EACA,KAAKI,CAAL,GAAS,KAAKD,QAAL,GAAgB,KAAKA,QAArB,GAAgC,GAAzC;;EAEA,IAAI,KAAKE,EAAL,KAAY,GAAhB,EAAqB;IACjB,IAAIC,MAAM,GAAG,MAAM,KAAKD,EAAxB;IACA,IAAIE,OAAO,GAAG,IAAID,MAAlB;IAEA,KAAKE,QAAL,GAAgBC,IAAI,CAACC,IAAL,CAAUJ,MAAV,CAAhB;IACA,KAAKK,SAAL,GAAiBL,MAAjB;IACA,KAAKM,aAAL,GAAqBL,OAArB;IAEA,KAAKM,KAAL,GAAa,SAAb,CARiB,CAQO;EAC3B,CATD,MASO;IACH,KAAKL,QAAL,GAAgB,GAAhB;IACA,KAAKG,SAAL,GAAiB,GAAjB;IACA,KAAKC,aAAL,GAAqB,GAArB;IAEA,KAAKC,KAAL,GAAa,QAAb,CALG,CAKqB;EAC3B;;EAED,IAAI,CAAC,KAAKC,KAAV,EAAiB;IACb,KAAKA,KAAL,GAAa,8BAAb;EACH;AACJ;;AAED,SAASC,OAAT,CAAiBC,CAAjB,EAAoB;EAChB,IAAIC,GAAG,GAAGD,CAAC,CAACE,CAAZ;EACA,IAAIC,GAAG,GAAGH,CAAC,CAACI,CAAZ;EACA,IAAIC,GAAJ,EAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB;EACAP,GAAG,GAAGA,GAAG,GAAG,KAAKQ,KAAjB;;EAEA,IAAI,KAAKZ,KAAL,KAAe,SAAnB,EAA8B;IAC1BM,GAAG,GAAGV,IAAI,CAACiB,IAAL,CAAU,KAAKf,SAAL,GAAiBF,IAAI,CAACkB,GAAL,CAASR,GAAT,CAA3B,CAAN;IACA,IAAIS,CAAC,GAAG,KAAKpB,QAAL,GAAgBd,KAAK,CAAC,KAAKc,QAAL,GAAgBC,IAAI,CAACoB,GAAL,CAASV,GAAT,CAAjB,EAAgCV,IAAI,CAACqB,GAAL,CAASX,GAAT,CAAhC,CAA7B;IAEAG,GAAG,GAAGM,CAAC,GAAGnB,IAAI,CAACoB,GAAL,CAASZ,GAAT,CAAJ,GAAoBR,IAAI,CAACoB,GAAL,CAASV,GAAT,CAA1B;IACAI,GAAG,GAAGK,CAAC,GAAGnB,IAAI,CAACqB,GAAL,CAASb,GAAT,CAAJ,GAAoBR,IAAI,CAACoB,GAAL,CAASV,GAAT,CAA1B;IACAK,GAAG,GAAGI,CAAC,GAAGnB,IAAI,CAACqB,GAAL,CAASX,GAAT,CAAV;;IAEA,IAAK,CAAC,KAAKhB,QAAL,GAAgBmB,GAAjB,IAAwBA,GAAxB,GAA8BC,GAAG,GAAGA,GAApC,GAA0CC,GAAG,GAAGA,GAAN,GAAY,KAAKZ,aAA5D,GAA6E,GAAjF,EAAsF;MAClFI,CAAC,CAACE,CAAF,GAAMnB,MAAM,CAACgC,GAAb;MACAf,CAAC,CAACI,CAAF,GAAMrB,MAAM,CAACgC,GAAb;MACA,OAAOf,CAAP;IACH;;IAEDK,GAAG,GAAG,KAAKlB,QAAL,GAAgBmB,GAAtB;;IACA,IAAI,KAAK1B,SAAT,EAAoB;MAChBoB,CAAC,CAACE,CAAF,GAAM,KAAKlB,UAAL,GAAkBS,IAAI,CAACiB,IAAL,CAAUH,GAAG,GAAG7B,KAAK,CAAC8B,GAAD,EAAMH,GAAN,CAArB,CAAxB;MACAL,CAAC,CAACI,CAAF,GAAM,KAAKpB,UAAL,GAAkBS,IAAI,CAACiB,IAAL,CAAUF,GAAG,GAAGH,GAAhB,CAAxB;IACH,CAHD,MAGO;MACHL,CAAC,CAACE,CAAF,GAAM,KAAKlB,UAAL,GAAkBS,IAAI,CAACiB,IAAL,CAAUH,GAAG,GAAGF,GAAhB,CAAxB;MACAL,CAAC,CAACI,CAAF,GAAM,KAAKpB,UAAL,GAAkBS,IAAI,CAACiB,IAAL,CAAUF,GAAG,GAAG9B,KAAK,CAAC6B,GAAD,EAAMF,GAAN,CAArB,CAAxB;IACH;EACJ,CAtBD,MAsBO,IAAI,KAAKR,KAAL,KAAe,QAAnB,EAA6B;IAChCQ,GAAG,GAAGZ,IAAI,CAACoB,GAAL,CAASV,GAAT,CAAN;IACAG,GAAG,GAAGb,IAAI,CAACoB,GAAL,CAASZ,GAAT,IAAgBI,GAAtB;IACAE,GAAG,GAAGd,IAAI,CAACqB,GAAL,CAASb,GAAT,IAAgBI,GAAtB;IACAG,GAAG,GAAGf,IAAI,CAACqB,GAAL,CAASX,GAAT,CAAN;IACAE,GAAG,GAAG,KAAKlB,QAAL,GAAgBmB,GAAtB;;IAEA,IAAI,KAAK1B,SAAT,EAAoB;MAChBoB,CAAC,CAACE,CAAF,GAAM,KAAKlB,UAAL,GAAkBS,IAAI,CAACiB,IAAL,CAAUH,GAAG,GAAG7B,KAAK,CAAC8B,GAAD,EAAMH,GAAN,CAArB,CAAxB;MACAL,CAAC,CAACI,CAAF,GAAM,KAAKpB,UAAL,GAAkBS,IAAI,CAACiB,IAAL,CAAUF,GAAG,GAAGH,GAAhB,CAAxB;IACH,CAHD,MAGO;MACHL,CAAC,CAACE,CAAF,GAAM,KAAKlB,UAAL,GAAkBS,IAAI,CAACiB,IAAL,CAAUH,GAAG,GAAGF,GAAhB,CAAxB;MACAL,CAAC,CAACI,CAAF,GAAM,KAAKpB,UAAL,GAAkBS,IAAI,CAACiB,IAAL,CAAUF,GAAG,GAAG9B,KAAK,CAAC6B,GAAD,EAAMF,GAAN,CAArB,CAAxB;IACH;EACJ;;EACDL,CAAC,CAACE,CAAF,GAAMF,CAAC,CAACE,CAAF,GAAM,KAAKjB,CAAjB;EACAe,CAAC,CAACI,CAAF,GAAMJ,CAAC,CAACI,CAAF,GAAM,KAAKnB,CAAjB;EACA,OAAOe,CAAP;AACH;;AAED,SAASgB,OAAT,CAAiBhB,CAAjB,EAAoB;EAChB,IAAIM,GAAG,GAAG,CAAC,GAAX;EACA,IAAIC,GAAG,GAAG,GAAV;EACA,IAAIC,GAAG,GAAG,GAAV;EACA,IAAIvB,CAAJ,EAAOgC,CAAP,EAAUC,GAAV,EAAeC,CAAf;EAEAnB,CAAC,CAACE,CAAF,GAAMF,CAAC,CAACE,CAAF,GAAM,KAAKjB,CAAjB;EACAe,CAAC,CAACI,CAAF,GAAMJ,CAAC,CAACI,CAAF,GAAM,KAAKnB,CAAjB;;EAEA,IAAI,KAAKY,KAAL,KAAe,SAAnB,EAA8B;IAC1B,IAAI,KAAKjB,SAAT,EAAoB;MAChB4B,GAAG,GAAGf,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACI,CAAF,GAAM,KAAKpB,UAApB,CAAN;MACAuB,GAAG,GAAGd,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACE,CAAF,GAAM,KAAKlB,UAApB,IAAkCN,KAAK,CAAC,GAAD,EAAM8B,GAAN,CAA7C;IACH,CAHD,MAGO;MACHD,GAAG,GAAGd,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACE,CAAF,GAAM,KAAKlB,UAApB,CAAN;MACAwB,GAAG,GAAGf,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACI,CAAF,GAAM,KAAKpB,UAApB,IAAkCN,KAAK,CAAC,GAAD,EAAM6B,GAAN,CAA7C;IACH;;IAED,IAAIa,IAAI,GAAGZ,GAAG,GAAG,KAAKhB,QAAtB;IACAP,CAAC,GAAGsB,GAAG,GAAGA,GAAN,GAAYa,IAAI,GAAGA,IAAnB,GAA0Bd,GAAG,GAAGA,GAApC;IACAW,CAAC,GAAG,IAAI,KAAK9B,QAAT,GAAoBmB,GAAxB;IACAY,GAAG,GAAID,CAAC,GAAGA,CAAL,GAAU,IAAIhC,CAAJ,GAAQ,KAAKG,CAA7B;;IAEA,IAAI8B,GAAG,GAAG,GAAV,EAAe;MACXlB,CAAC,CAACE,CAAF,GAAMnB,MAAM,CAACgC,GAAb;MACAf,CAAC,CAACI,CAAF,GAAMrB,MAAM,CAACgC,GAAb;MACA,OAAOf,CAAP;IACH;;IAEDmB,CAAC,GAAG,CAAC,CAACF,CAAD,GAAKxB,IAAI,CAACC,IAAL,CAAUwB,GAAV,CAAN,KAAyB,MAAMjC,CAA/B,CAAJ;IACAqB,GAAG,GAAG,KAAKnB,QAAL,GAAgBgC,CAAC,GAAGb,GAA1B;IACAC,GAAG,IAAIY,CAAP;IACAX,GAAG,IAAIW,CAAP;IAEAnB,CAAC,CAACE,CAAF,GAAMT,IAAI,CAAC4B,KAAL,CAAWd,GAAX,EAAgBD,GAAhB,CAAN;IACAN,CAAC,CAACI,CAAF,GAAMX,IAAI,CAACiB,IAAL,CAAUF,GAAG,GAAGf,IAAI,CAACoB,GAAL,CAASb,CAAC,CAACE,CAAX,CAAN,GAAsBI,GAAhC,CAAN;IACAN,CAAC,CAACI,CAAF,GAAMX,IAAI,CAACiB,IAAL,CAAU,KAAKd,aAAL,GAAqBH,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACI,CAAX,CAA/B,CAAN;EACH,CA5BD,MA4BO,IAAI,KAAKP,KAAL,KAAe,QAAnB,EAA6B;IAChC,IAAI,KAAKjB,SAAT,EAAoB;MAChB4B,GAAG,GAAGf,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACI,CAAF,GAAM,KAAKpB,UAApB,CAAN;MACAuB,GAAG,GAAGd,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACE,CAAF,GAAM,KAAKlB,UAApB,IAAkCS,IAAI,CAACC,IAAL,CAAU,MAAMc,GAAG,GAAGA,GAAtB,CAAxC;IACH,CAHD,MAGO;MACHD,GAAG,GAAGd,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACE,CAAF,GAAM,KAAKlB,UAApB,CAAN;MACAwB,GAAG,GAAGf,IAAI,CAACkB,GAAL,CAASX,CAAC,CAACI,CAAF,GAAM,KAAKpB,UAApB,IAAkCS,IAAI,CAACC,IAAL,CAAU,MAAMa,GAAG,GAAGA,GAAtB,CAAxC;IACH;;IAEDtB,CAAC,GAAGsB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAAlB,GAAwBF,GAAG,GAAGA,GAAlC;IACAW,CAAC,GAAG,IAAI,KAAK9B,QAAT,GAAoBmB,GAAxB;IACAY,GAAG,GAAID,CAAC,GAAGA,CAAL,GAAU,IAAIhC,CAAJ,GAAQ,KAAKG,CAA7B;;IACA,IAAI8B,GAAG,GAAG,GAAV,EAAe;MACXlB,CAAC,CAACE,CAAF,GAAMnB,MAAM,CAACgC,GAAb;MACAf,CAAC,CAACI,CAAF,GAAMrB,MAAM,CAACgC,GAAb;MACA,OAAOf,CAAP;IACH;;IAEDmB,CAAC,GAAG,CAAC,CAACF,CAAD,GAAKxB,IAAI,CAACC,IAAL,CAAUwB,GAAV,CAAN,KAAyB,MAAMjC,CAA/B,CAAJ;IACAqB,GAAG,GAAG,KAAKnB,QAAL,GAAgBgC,CAAC,GAAGb,GAA1B;IACAC,GAAG,IAAIY,CAAP;IACAX,GAAG,IAAIW,CAAP;IAEAnB,CAAC,CAACE,CAAF,GAAMT,IAAI,CAAC4B,KAAL,CAAWd,GAAX,EAAgBD,GAAhB,CAAN;IACAN,CAAC,CAACI,CAAF,GAAMX,IAAI,CAACiB,IAAL,CAAUF,GAAG,GAAGf,IAAI,CAACoB,GAAL,CAASb,CAAC,CAACE,CAAX,CAAN,GAAsBI,GAAhC,CAAN;EACH;;EACDN,CAAC,CAACE,CAAF,GAAMF,CAAC,CAACE,CAAF,GAAM,KAAKO,KAAjB;EACA,OAAOT,CAAP;AACH;;AAED,OAAO,IAAIsB,KAAK,GAAG,CAAC,8BAAD,EAAiC,yBAAjC,EAA4D,MAA5D,CAAZ;AACP,eAAe;EACX3C,IAAI,EAAEA,IADK;EAEXoB,OAAO,EAAEA,OAFE;EAGXiB,OAAO,EAAEA,OAHE;EAIXM,KAAK,EAAEA;AAJI,CAAf"},"metadata":{},"sourceType":"module"}