{"ast":null,"code":"//  Ramda v0.22.1\n//  https://github.com/ramda/ramda\n//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n;\n(function () {\n  'use strict';\n  /**\n     * A special placeholder value used to specify \"gaps\" within curried functions,\n     * allowing partial application of any combination of arguments, regardless of\n     * their positions.\n     *\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are\n     * equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2, _)(1, 3)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @constant\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @example\n     *\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n     *      greet('Alice'); //=> 'Hello, Alice!'\n     */\n\n  var __ = {\n    '@@functional/placeholder': true\n  };\n  /* eslint-disable no-unused-vars */\n\n  var _arity = function _arity(n, fn) {\n    /* eslint-disable no-unused-vars */\n    switch (n) {\n      case 0:\n        return function () {\n          return fn.apply(this, arguments);\n        };\n\n      case 1:\n        return function (a0) {\n          return fn.apply(this, arguments);\n        };\n\n      case 2:\n        return function (a0, a1) {\n          return fn.apply(this, arguments);\n        };\n\n      case 3:\n        return function (a0, a1, a2) {\n          return fn.apply(this, arguments);\n        };\n\n      case 4:\n        return function (a0, a1, a2, a3) {\n          return fn.apply(this, arguments);\n        };\n\n      case 5:\n        return function (a0, a1, a2, a3, a4) {\n          return fn.apply(this, arguments);\n        };\n\n      case 6:\n        return function (a0, a1, a2, a3, a4, a5) {\n          return fn.apply(this, arguments);\n        };\n\n      case 7:\n        return function (a0, a1, a2, a3, a4, a5, a6) {\n          return fn.apply(this, arguments);\n        };\n\n      case 8:\n        return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n          return fn.apply(this, arguments);\n        };\n\n      case 9:\n        return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n          return fn.apply(this, arguments);\n        };\n\n      case 10:\n        return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n          return fn.apply(this, arguments);\n        };\n\n      default:\n        throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n    }\n  };\n\n  var _arrayFromIterator = function _arrayFromIterator(iter) {\n    var list = [];\n    var next;\n\n    while (!(next = iter.next()).done) {\n      list.push(next.value);\n    }\n\n    return list;\n  };\n\n  var _arrayOf = function _arrayOf() {\n    return Array.prototype.slice.call(arguments);\n  };\n\n  var _cloneRegExp = function _cloneRegExp(pattern) {\n    return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n  };\n\n  var _complement = function _complement(f) {\n    return function () {\n      return !f.apply(this, arguments);\n    };\n  };\n  /**\n   * Private `concat` function to merge two array-like objects.\n   *\n   * @private\n   * @param {Array|Arguments} [set1=[]] An array-like object.\n   * @param {Array|Arguments} [set2=[]] An array-like object.\n   * @return {Array} A new, merged array.\n   * @example\n   *\n   *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n   */\n\n\n  var _concat = function _concat(set1, set2) {\n    set1 = set1 || [];\n    set2 = set2 || [];\n    var idx;\n    var len1 = set1.length;\n    var len2 = set2.length;\n    var result = [];\n    idx = 0;\n\n    while (idx < len1) {\n      result[result.length] = set1[idx];\n      idx += 1;\n    }\n\n    idx = 0;\n\n    while (idx < len2) {\n      result[result.length] = set2[idx];\n      idx += 1;\n    }\n\n    return result;\n  };\n\n  var _containsWith = function _containsWith(pred, x, list) {\n    var idx = 0;\n    var len = list.length;\n\n    while (idx < len) {\n      if (pred(x, list[idx])) {\n        return true;\n      }\n\n      idx += 1;\n    }\n\n    return false;\n  };\n\n  var _filter = function _filter(fn, list) {\n    var idx = 0;\n    var len = list.length;\n    var result = [];\n\n    while (idx < len) {\n      if (fn(list[idx])) {\n        result[result.length] = list[idx];\n      }\n\n      idx += 1;\n    }\n\n    return result;\n  };\n\n  var _forceReduced = function _forceReduced(x) {\n    return {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n  }; // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n\n\n  var _functionName = function _functionName(f) {\n    // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n    var match = String(f).match(/^function (\\w*)/);\n    return match == null ? '' : match[1];\n  };\n\n  var _has = function _has(prop, obj) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  };\n\n  var _identity = function _identity(x) {\n    return x;\n  };\n\n  var _isArguments = function () {\n    var toString = Object.prototype.toString;\n    return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n      return toString.call(x) === '[object Arguments]';\n    } : function _isArguments(x) {\n      return _has('callee', x);\n    };\n  }();\n  /**\n   * Tests whether or not an object is an array.\n   *\n   * @private\n   * @param {*} val The object to test.\n   * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n   * @example\n   *\n   *      _isArray([]); //=> true\n   *      _isArray(null); //=> false\n   *      _isArray({}); //=> false\n   */\n\n\n  var _isArray = Array.isArray || function _isArray(val) {\n    return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n  };\n\n  var _isFunction = function _isFunction(x) {\n    return Object.prototype.toString.call(x) === '[object Function]';\n  };\n  /**\n   * Determine if the passed argument is an integer.\n   *\n   * @private\n   * @param {*} n\n   * @category Type\n   * @return {Boolean}\n   */\n\n\n  var _isInteger = Number.isInteger || function _isInteger(n) {\n    return n << 0 === n;\n  };\n\n  var _isNumber = function _isNumber(x) {\n    return Object.prototype.toString.call(x) === '[object Number]';\n  };\n\n  var _isObject = function _isObject(x) {\n    return Object.prototype.toString.call(x) === '[object Object]';\n  };\n\n  var _isPlaceholder = function _isPlaceholder(a) {\n    return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n  };\n\n  var _isRegExp = function _isRegExp(x) {\n    return Object.prototype.toString.call(x) === '[object RegExp]';\n  };\n\n  var _isString = function _isString(x) {\n    return Object.prototype.toString.call(x) === '[object String]';\n  };\n\n  var _isTransformer = function _isTransformer(obj) {\n    return typeof obj['@@transducer/step'] === 'function';\n  };\n\n  var _map = function _map(fn, functor) {\n    var idx = 0;\n    var len = functor.length;\n    var result = Array(len);\n\n    while (idx < len) {\n      result[idx] = fn(functor[idx]);\n      idx += 1;\n    }\n\n    return result;\n  }; // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\n  var _objectAssign = function _objectAssign(target) {\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    var output = Object(target);\n    var idx = 1;\n    var length = arguments.length;\n\n    while (idx < length) {\n      var source = arguments[idx];\n\n      if (source != null) {\n        for (var nextKey in source) {\n          if (_has(nextKey, source)) {\n            output[nextKey] = source[nextKey];\n          }\n        }\n      }\n\n      idx += 1;\n    }\n\n    return output;\n  };\n\n  var _of = function _of(x) {\n    return [x];\n  };\n\n  var _pipe = function _pipe(f, g) {\n    return function () {\n      return g.call(this, f.apply(this, arguments));\n    };\n  };\n\n  var _pipeP = function _pipeP(f, g) {\n    return function () {\n      var ctx = this;\n      return f.apply(ctx, arguments).then(function (x) {\n        return g.call(ctx, x);\n      });\n    };\n  }; // \\b matches word boundary; [\\b] matches backspace\n\n\n  var _quote = function _quote(s) {\n    var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b') // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n    return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n  };\n\n  var _reduced = function _reduced(x) {\n    return x && x['@@transducer/reduced'] ? x : {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n  };\n  /**\n   * An optimized, private array `slice` implementation.\n   *\n   * @private\n   * @param {Arguments|Array} args The array or arguments object to consider.\n   * @param {Number} [from=0] The array index to slice from, inclusive.\n   * @param {Number} [to=args.length] The array index to slice to, exclusive.\n   * @return {Array} A new, sliced array.\n   * @example\n   *\n   *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n   *\n   *      var firstThreeArgs = function(a, b, c, d) {\n   *        return _slice(arguments, 0, 3);\n   *      };\n   *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n   */\n\n\n  var _slice = function _slice(args, from, to) {\n    switch (arguments.length) {\n      case 1:\n        return _slice(args, 0, args.length);\n\n      case 2:\n        return _slice(args, from, args.length);\n\n      default:\n        var list = [];\n        var idx = 0;\n        var len = Math.max(0, Math.min(args.length, to) - from);\n\n        while (idx < len) {\n          list[idx] = args[from + idx];\n          idx += 1;\n        }\n\n        return list;\n    }\n  };\n  /**\n   * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n   */\n\n\n  var _toISOString = function () {\n    var pad = function pad(n) {\n      return (n < 10 ? '0' : '') + n;\n    };\n\n    return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n      return d.toISOString();\n    } : function _toISOString(d) {\n      return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n    };\n  }();\n\n  var _xfBase = {\n    init: function () {\n      return this.xf['@@transducer/init']();\n    },\n    result: function (result) {\n      return this.xf['@@transducer/result'](result);\n    }\n  };\n\n  var _xwrap = function () {\n    function XWrap(fn) {\n      this.f = fn;\n    }\n\n    XWrap.prototype['@@transducer/init'] = function () {\n      throw new Error('init not implemented on XWrap');\n    };\n\n    XWrap.prototype['@@transducer/result'] = function (acc) {\n      return acc;\n    };\n\n    XWrap.prototype['@@transducer/step'] = function (acc, x) {\n      return this.f(acc, x);\n    };\n\n    return function _xwrap(fn) {\n      return new XWrap(fn);\n    };\n  }();\n\n  var _aperture = function _aperture(n, list) {\n    var idx = 0;\n    var limit = list.length - (n - 1);\n    var acc = new Array(limit >= 0 ? limit : 0);\n\n    while (idx < limit) {\n      acc[idx] = _slice(list, idx, idx + n);\n      idx += 1;\n    }\n\n    return acc;\n  };\n\n  var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n  /**\n   * Similar to hasMethod, this checks whether a function has a [methodname]\n   * function. If it isn't an array it will execute that function otherwise it\n   * will default to the ramda implementation.\n   *\n   * @private\n   * @param {Function} fn ramda implemtation\n   * @param {String} methodname property to check for a custom implementation\n   * @return {Object} Whatever the return value of the method is.\n   */\n\n\n  var _checkForMethod = function _checkForMethod(methodname, fn) {\n    return function () {\n      var length = arguments.length;\n\n      if (length === 0) {\n        return fn();\n      }\n\n      var obj = arguments[length - 1];\n      return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n    };\n  };\n  /**\n   * Optimized internal one-arity curry function.\n   *\n   * @private\n   * @category Function\n   * @param {Function} fn The function to curry.\n   * @return {Function} The curried function.\n   */\n\n\n  var _curry1 = function _curry1(fn) {\n    return function f1(a) {\n      if (arguments.length === 0 || _isPlaceholder(a)) {\n        return f1;\n      } else {\n        return fn.apply(this, arguments);\n      }\n    };\n  };\n  /**\n   * Optimized internal two-arity curry function.\n   *\n   * @private\n   * @category Function\n   * @param {Function} fn The function to curry.\n   * @return {Function} The curried function.\n   */\n\n\n  var _curry2 = function _curry2(fn) {\n    return function f2(a, b) {\n      switch (arguments.length) {\n        case 0:\n          return f2;\n\n        case 1:\n          return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n            return fn(a, _b);\n          });\n\n        default:\n          return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n            return fn(_a, b);\n          }) : _isPlaceholder(b) ? _curry1(function (_b) {\n            return fn(a, _b);\n          }) : fn(a, b);\n      }\n    };\n  };\n  /**\n   * Optimized internal three-arity curry function.\n   *\n   * @private\n   * @category Function\n   * @param {Function} fn The function to curry.\n   * @return {Function} The curried function.\n   */\n\n\n  var _curry3 = function _curry3(fn) {\n    return function f3(a, b, c) {\n      switch (arguments.length) {\n        case 0:\n          return f3;\n\n        case 1:\n          return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n            return fn(a, _b, _c);\n          });\n\n        case 2:\n          return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n            return fn(_a, b, _c);\n          }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n            return fn(a, _b, _c);\n          }) : _curry1(function (_c) {\n            return fn(a, b, _c);\n          });\n\n        default:\n          return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n            return fn(_a, _b, c);\n          }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n            return fn(_a, b, _c);\n          }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n            return fn(a, _b, _c);\n          }) : _isPlaceholder(a) ? _curry1(function (_a) {\n            return fn(_a, b, c);\n          }) : _isPlaceholder(b) ? _curry1(function (_b) {\n            return fn(a, _b, c);\n          }) : _isPlaceholder(c) ? _curry1(function (_c) {\n            return fn(a, b, _c);\n          }) : fn(a, b, c);\n      }\n    };\n  };\n  /**\n   * Internal curryN function.\n   *\n   * @private\n   * @category Function\n   * @param {Number} length The arity of the curried function.\n   * @param {Array} received An array of arguments received thus far.\n   * @param {Function} fn The function to curry.\n   * @return {Function} The curried function.\n   */\n\n\n  var _curryN = function _curryN(length, received, fn) {\n    return function () {\n      var combined = [];\n      var argsIdx = 0;\n      var left = length;\n      var combinedIdx = 0;\n\n      while (combinedIdx < received.length || argsIdx < arguments.length) {\n        var result;\n\n        if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n          result = received[combinedIdx];\n        } else {\n          result = arguments[argsIdx];\n          argsIdx += 1;\n        }\n\n        combined[combinedIdx] = result;\n\n        if (!_isPlaceholder(result)) {\n          left -= 1;\n        }\n\n        combinedIdx += 1;\n      }\n\n      return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n    };\n  };\n  /**\n   * Returns a function that dispatches with different strategies based on the\n   * object in list position (last argument). If it is an array, executes [fn].\n   * Otherwise, if it has a function with [methodname], it will execute that\n   * function (functor case). Otherwise, if it is a transformer, uses transducer\n   * [xf] to return a new transformer (transducer case). Otherwise, it will\n   * default to executing [fn].\n   *\n   * @private\n   * @param {String} methodname property to check for a custom implementation\n   * @param {Function} xf transducer to initialize if object is transformer\n   * @param {Function} fn default ramda implementation\n   * @return {Function} A function that dispatches on object in list position\n   */\n\n\n  var _dispatchable = function _dispatchable(methodname, xf, fn) {\n    return function () {\n      var length = arguments.length;\n\n      if (length === 0) {\n        return fn();\n      }\n\n      var obj = arguments[length - 1];\n\n      if (!_isArray(obj)) {\n        var args = _slice(arguments, 0, length - 1);\n\n        if (typeof obj[methodname] === 'function') {\n          return obj[methodname].apply(obj, args);\n        }\n\n        if (_isTransformer(obj)) {\n          var transducer = xf.apply(null, args);\n          return transducer(obj);\n        }\n      }\n\n      return fn.apply(this, arguments);\n    };\n  };\n\n  var _dropLastWhile = function dropLastWhile(pred, list) {\n    var idx = list.length - 1;\n\n    while (idx >= 0 && pred(list[idx])) {\n      idx -= 1;\n    }\n\n    return _slice(list, 0, idx + 1);\n  };\n\n  var _xall = function () {\n    function XAll(f, xf) {\n      this.xf = xf;\n      this.f = f;\n      this.all = true;\n    }\n\n    XAll.prototype['@@transducer/init'] = _xfBase.init;\n\n    XAll.prototype['@@transducer/result'] = function (result) {\n      if (this.all) {\n        result = this.xf['@@transducer/step'](result, true);\n      }\n\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XAll.prototype['@@transducer/step'] = function (result, input) {\n      if (!this.f(input)) {\n        this.all = false;\n        result = _reduced(this.xf['@@transducer/step'](result, false));\n      }\n\n      return result;\n    };\n\n    return _curry2(function _xall(f, xf) {\n      return new XAll(f, xf);\n    });\n  }();\n\n  var _xany = function () {\n    function XAny(f, xf) {\n      this.xf = xf;\n      this.f = f;\n      this.any = false;\n    }\n\n    XAny.prototype['@@transducer/init'] = _xfBase.init;\n\n    XAny.prototype['@@transducer/result'] = function (result) {\n      if (!this.any) {\n        result = this.xf['@@transducer/step'](result, false);\n      }\n\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XAny.prototype['@@transducer/step'] = function (result, input) {\n      if (this.f(input)) {\n        this.any = true;\n        result = _reduced(this.xf['@@transducer/step'](result, true));\n      }\n\n      return result;\n    };\n\n    return _curry2(function _xany(f, xf) {\n      return new XAny(f, xf);\n    });\n  }();\n\n  var _xaperture = function () {\n    function XAperture(n, xf) {\n      this.xf = xf;\n      this.pos = 0;\n      this.full = false;\n      this.acc = new Array(n);\n    }\n\n    XAperture.prototype['@@transducer/init'] = _xfBase.init;\n\n    XAperture.prototype['@@transducer/result'] = function (result) {\n      this.acc = null;\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XAperture.prototype['@@transducer/step'] = function (result, input) {\n      this.store(input);\n      return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n    };\n\n    XAperture.prototype.store = function (input) {\n      this.acc[this.pos] = input;\n      this.pos += 1;\n\n      if (this.pos === this.acc.length) {\n        this.pos = 0;\n        this.full = true;\n      }\n    };\n\n    XAperture.prototype.getCopy = function () {\n      return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n    };\n\n    return _curry2(function _xaperture(n, xf) {\n      return new XAperture(n, xf);\n    });\n  }();\n\n  var _xdrop = function () {\n    function XDrop(n, xf) {\n      this.xf = xf;\n      this.n = n;\n    }\n\n    XDrop.prototype['@@transducer/init'] = _xfBase.init;\n    XDrop.prototype['@@transducer/result'] = _xfBase.result;\n\n    XDrop.prototype['@@transducer/step'] = function (result, input) {\n      if (this.n > 0) {\n        this.n -= 1;\n        return result;\n      }\n\n      return this.xf['@@transducer/step'](result, input);\n    };\n\n    return _curry2(function _xdrop(n, xf) {\n      return new XDrop(n, xf);\n    });\n  }();\n\n  var _xdropLast = function () {\n    function XDropLast(n, xf) {\n      this.xf = xf;\n      this.pos = 0;\n      this.full = false;\n      this.acc = new Array(n);\n    }\n\n    XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n\n    XDropLast.prototype['@@transducer/result'] = function (result) {\n      this.acc = null;\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XDropLast.prototype['@@transducer/step'] = function (result, input) {\n      if (this.full) {\n        result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n      }\n\n      this.store(input);\n      return result;\n    };\n\n    XDropLast.prototype.store = function (input) {\n      this.acc[this.pos] = input;\n      this.pos += 1;\n\n      if (this.pos === this.acc.length) {\n        this.pos = 0;\n        this.full = true;\n      }\n    };\n\n    return _curry2(function _xdropLast(n, xf) {\n      return new XDropLast(n, xf);\n    });\n  }();\n\n  var _xdropRepeatsWith = function () {\n    function XDropRepeatsWith(pred, xf) {\n      this.xf = xf;\n      this.pred = pred;\n      this.lastValue = undefined;\n      this.seenFirstValue = false;\n    }\n\n    XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n      return this.xf['@@transducer/init']();\n    };\n\n    XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n      var sameAsLast = false;\n\n      if (!this.seenFirstValue) {\n        this.seenFirstValue = true;\n      } else if (this.pred(this.lastValue, input)) {\n        sameAsLast = true;\n      }\n\n      this.lastValue = input;\n      return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n    };\n\n    return _curry2(function _xdropRepeatsWith(pred, xf) {\n      return new XDropRepeatsWith(pred, xf);\n    });\n  }();\n\n  var _xdropWhile = function () {\n    function XDropWhile(f, xf) {\n      this.xf = xf;\n      this.f = f;\n    }\n\n    XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n    XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n\n    XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n      if (this.f) {\n        if (this.f(input)) {\n          return result;\n        }\n\n        this.f = null;\n      }\n\n      return this.xf['@@transducer/step'](result, input);\n    };\n\n    return _curry2(function _xdropWhile(f, xf) {\n      return new XDropWhile(f, xf);\n    });\n  }();\n\n  var _xfilter = function () {\n    function XFilter(f, xf) {\n      this.xf = xf;\n      this.f = f;\n    }\n\n    XFilter.prototype['@@transducer/init'] = _xfBase.init;\n    XFilter.prototype['@@transducer/result'] = _xfBase.result;\n\n    XFilter.prototype['@@transducer/step'] = function (result, input) {\n      return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n    };\n\n    return _curry2(function _xfilter(f, xf) {\n      return new XFilter(f, xf);\n    });\n  }();\n\n  var _xfind = function () {\n    function XFind(f, xf) {\n      this.xf = xf;\n      this.f = f;\n      this.found = false;\n    }\n\n    XFind.prototype['@@transducer/init'] = _xfBase.init;\n\n    XFind.prototype['@@transducer/result'] = function (result) {\n      if (!this.found) {\n        result = this.xf['@@transducer/step'](result, void 0);\n      }\n\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XFind.prototype['@@transducer/step'] = function (result, input) {\n      if (this.f(input)) {\n        this.found = true;\n        result = _reduced(this.xf['@@transducer/step'](result, input));\n      }\n\n      return result;\n    };\n\n    return _curry2(function _xfind(f, xf) {\n      return new XFind(f, xf);\n    });\n  }();\n\n  var _xfindIndex = function () {\n    function XFindIndex(f, xf) {\n      this.xf = xf;\n      this.f = f;\n      this.idx = -1;\n      this.found = false;\n    }\n\n    XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n\n    XFindIndex.prototype['@@transducer/result'] = function (result) {\n      if (!this.found) {\n        result = this.xf['@@transducer/step'](result, -1);\n      }\n\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n      this.idx += 1;\n\n      if (this.f(input)) {\n        this.found = true;\n        result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n      }\n\n      return result;\n    };\n\n    return _curry2(function _xfindIndex(f, xf) {\n      return new XFindIndex(f, xf);\n    });\n  }();\n\n  var _xfindLast = function () {\n    function XFindLast(f, xf) {\n      this.xf = xf;\n      this.f = f;\n    }\n\n    XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n\n    XFindLast.prototype['@@transducer/result'] = function (result) {\n      return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n    };\n\n    XFindLast.prototype['@@transducer/step'] = function (result, input) {\n      if (this.f(input)) {\n        this.last = input;\n      }\n\n      return result;\n    };\n\n    return _curry2(function _xfindLast(f, xf) {\n      return new XFindLast(f, xf);\n    });\n  }();\n\n  var _xfindLastIndex = function () {\n    function XFindLastIndex(f, xf) {\n      this.xf = xf;\n      this.f = f;\n      this.idx = -1;\n      this.lastIdx = -1;\n    }\n\n    XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n\n    XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n      return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n    };\n\n    XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n      this.idx += 1;\n\n      if (this.f(input)) {\n        this.lastIdx = this.idx;\n      }\n\n      return result;\n    };\n\n    return _curry2(function _xfindLastIndex(f, xf) {\n      return new XFindLastIndex(f, xf);\n    });\n  }();\n\n  var _xmap = function () {\n    function XMap(f, xf) {\n      this.xf = xf;\n      this.f = f;\n    }\n\n    XMap.prototype['@@transducer/init'] = _xfBase.init;\n    XMap.prototype['@@transducer/result'] = _xfBase.result;\n\n    XMap.prototype['@@transducer/step'] = function (result, input) {\n      return this.xf['@@transducer/step'](result, this.f(input));\n    };\n\n    return _curry2(function _xmap(f, xf) {\n      return new XMap(f, xf);\n    });\n  }();\n\n  var _xreduceBy = function () {\n    function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n      this.valueFn = valueFn;\n      this.valueAcc = valueAcc;\n      this.keyFn = keyFn;\n      this.xf = xf;\n      this.inputs = {};\n    }\n\n    XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n\n    XReduceBy.prototype['@@transducer/result'] = function (result) {\n      var key;\n\n      for (key in this.inputs) {\n        if (_has(key, this.inputs)) {\n          result = this.xf['@@transducer/step'](result, this.inputs[key]);\n\n          if (result['@@transducer/reduced']) {\n            result = result['@@transducer/value'];\n            break;\n          }\n        }\n      }\n\n      this.inputs = null;\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XReduceBy.prototype['@@transducer/step'] = function (result, input) {\n      var key = this.keyFn(input);\n      this.inputs[key] = this.inputs[key] || [key, this.valueAcc];\n      this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n      return result;\n    };\n\n    return _curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n      return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n    });\n  }();\n\n  var _xtake = function () {\n    function XTake(n, xf) {\n      this.xf = xf;\n      this.n = n;\n      this.i = 0;\n    }\n\n    XTake.prototype['@@transducer/init'] = _xfBase.init;\n    XTake.prototype['@@transducer/result'] = _xfBase.result;\n\n    XTake.prototype['@@transducer/step'] = function (result, input) {\n      this.i += 1;\n      var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n      return this.i >= this.n ? _reduced(ret) : ret;\n    };\n\n    return _curry2(function _xtake(n, xf) {\n      return new XTake(n, xf);\n    });\n  }();\n\n  var _xtakeWhile = function () {\n    function XTakeWhile(f, xf) {\n      this.xf = xf;\n      this.f = f;\n    }\n\n    XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n    XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n\n    XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n      return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n    };\n\n    return _curry2(function _xtakeWhile(f, xf) {\n      return new XTakeWhile(f, xf);\n    });\n  }();\n  /**\n   * Adds two values.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Math\n   * @sig Number -> Number -> Number\n   * @param {Number} a\n   * @param {Number} b\n   * @return {Number}\n   * @see R.subtract\n   * @example\n   *\n   *      R.add(2, 3);       //=>  5\n   *      R.add(7)(10);      //=> 17\n   */\n\n\n  var add = _curry2(function add(a, b) {\n    return Number(a) + Number(b);\n  });\n  /**\n   * Applies a function to the value at the given index of an array, returning a\n   * new copy of the array with the element at the given index replaced with the\n   * result of the function application.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category List\n   * @sig (a -> a) -> Number -> [a] -> [a]\n   * @param {Function} fn The function to apply.\n   * @param {Number} idx The index.\n   * @param {Array|Arguments} list An array-like object whose value\n   *        at the supplied index will be replaced.\n   * @return {Array} A copy of the supplied array-like object with\n   *         the element at index `idx` replaced with the value\n   *         returned by applying `fn` to the existing element.\n   * @see R.update\n   * @example\n   *\n   *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n   *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n   */\n\n\n  var adjust = _curry3(function adjust(fn, idx, list) {\n    if (idx >= list.length || idx < -list.length) {\n      return list;\n    }\n\n    var start = idx < 0 ? list.length : 0;\n\n    var _idx = start + idx;\n\n    var _list = _concat(list);\n\n    _list[_idx] = fn(list[_idx]);\n    return _list;\n  });\n  /**\n   * Returns `true` if all elements of the list match the predicate, `false` if\n   * there are any that don't.\n   *\n   * Dispatches to the `all` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> Boolean\n   * @param {Function} fn The predicate function.\n   * @param {Array} list The array to consider.\n   * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n   *         otherwise.\n   * @see R.any, R.none, R.transduce\n   * @example\n   *\n   *      var lessThan2 = R.flip(R.lt)(2);\n   *      var lessThan3 = R.flip(R.lt)(3);\n   *      R.all(lessThan2)([1, 2]); //=> false\n   *      R.all(lessThan3)([1, 2]); //=> true\n   */\n\n\n  var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n    var idx = 0;\n\n    while (idx < list.length) {\n      if (!fn(list[idx])) {\n        return false;\n      }\n\n      idx += 1;\n    }\n\n    return true;\n  }));\n  /**\n   * Returns a function that always returns the given value. Note that for\n   * non-primitives the value returned is a reference to the original value.\n   *\n   * This function is known as `const`, `constant`, or `K` (for K combinator) in\n   * other languages and libraries.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig a -> (* -> a)\n   * @param {*} val The value to wrap in a function\n   * @return {Function} A Function :: * -> val.\n   * @example\n   *\n   *      var t = R.always('Tee');\n   *      t(); //=> 'Tee'\n   */\n\n\n  var always = _curry1(function always(val) {\n    return function () {\n      return val;\n    };\n  });\n  /**\n   * Returns `true` if both arguments are `true`; `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Logic\n   * @sig * -> * -> *\n   * @param {Boolean} a A boolean value\n   * @param {Boolean} b A boolean value\n   * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n   * @see R.both\n   * @example\n   *\n   *      R.and(true, true); //=> true\n   *      R.and(true, false); //=> false\n   *      R.and(false, true); //=> false\n   *      R.and(false, false); //=> false\n   */\n\n\n  var and = _curry2(function and(a, b) {\n    return a && b;\n  });\n  /**\n   * Returns `true` if at least one of elements of the list match the predicate,\n   * `false` otherwise.\n   *\n   * Dispatches to the `any` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> Boolean\n   * @param {Function} fn The predicate function.\n   * @param {Array} list The array to consider.\n   * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n   *         otherwise.\n   * @see R.all, R.none, R.transduce\n   * @example\n   *\n   *      var lessThan0 = R.flip(R.lt)(0);\n   *      var lessThan2 = R.flip(R.lt)(2);\n   *      R.any(lessThan0)([1, 2]); //=> false\n   *      R.any(lessThan2)([1, 2]); //=> true\n   */\n\n\n  var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n    var idx = 0;\n\n    while (idx < list.length) {\n      if (fn(list[idx])) {\n        return true;\n      }\n\n      idx += 1;\n    }\n\n    return false;\n  }));\n  /**\n   * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n   * greater than the length of the list, an empty list is returned.\n   *\n   * Dispatches to the `aperture` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.12.0\n   * @category List\n   * @sig Number -> [a] -> [[a]]\n   * @param {Number} n The size of the tuples to create\n   * @param {Array} list The list to split into `n`-tuples\n   * @return {Array} The new list.\n   * @see R.transduce\n   * @example\n   *\n   *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n   *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n   *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n   */\n\n\n  var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n  /**\n   * Returns a new list containing the contents of the given list, followed by\n   * the given element.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig a -> [a] -> [a]\n   * @param {*} el The element to add to the end of the new list.\n   * @param {Array} list The list whose contents will be added to the beginning of the output\n   *        list.\n   * @return {Array} A new list containing the contents of the old list followed by `el`.\n   * @see R.prepend\n   * @example\n   *\n   *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n   *      R.append('tests', []); //=> ['tests']\n   *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n   */\n\n\n  var append = _curry2(function append(el, list) {\n    return _concat(list, [el]);\n  });\n  /**\n   * Applies function `fn` to the argument list `args`. This is useful for\n   * creating a fixed-arity function from a variadic function. `fn` should be a\n   * bound function if context is significant.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.7.0\n   * @category Function\n   * @sig (*... -> a) -> [*] -> a\n   * @param {Function} fn\n   * @param {Array} args\n   * @return {*}\n   * @see R.call, R.unapply\n   * @example\n   *\n   *      var nums = [1, 2, 3, -99, 42, 6, 7];\n   *      R.apply(Math.max, nums); //=> 42\n   */\n\n\n  var apply = _curry2(function apply(fn, args) {\n    return fn.apply(this, args);\n  });\n  /**\n   * Makes a shallow clone of an object, setting or overriding the specified\n   * property with the given value. Note that this copies and flattens prototype\n   * properties onto the new object as well. All non-primitive properties are\n   * copied by reference.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Object\n   * @sig String -> a -> {k: v} -> {k: v}\n   * @param {String} prop the property name to set\n   * @param {*} val the new value\n   * @param {Object} obj the object to clone\n   * @return {Object} a new object similar to the original except for the specified property.\n   * @see R.dissoc\n   * @example\n   *\n   *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n   */\n\n\n  var assoc = _curry3(function assoc(prop, val, obj) {\n    var result = {};\n\n    for (var p in obj) {\n      result[p] = obj[p];\n    }\n\n    result[prop] = val;\n    return result;\n  });\n  /**\n   * Makes a shallow clone of an object, setting or overriding the nodes required\n   * to create the given path, and placing the specific value at the tail end of\n   * that path. Note that this copies and flattens prototype properties onto the\n   * new object as well. All non-primitive properties are copied by reference.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Object\n   * @sig [String] -> a -> {k: v} -> {k: v}\n   * @param {Array} path the path to set\n   * @param {*} val the new value\n   * @param {Object} obj the object to clone\n   * @return {Object} a new object similar to the original except along the specified path.\n   * @see R.dissocPath\n   * @example\n   *\n   *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n   */\n\n\n  var assocPath = _curry3(function assocPath(path, val, obj) {\n    switch (path.length) {\n      case 0:\n        return val;\n\n      case 1:\n        return assoc(path[0], val, obj);\n\n      default:\n        return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n    }\n  });\n  /**\n   * Creates a function that is bound to a context.\n   * Note: `R.bind` does not provide the additional argument-binding capabilities of\n   * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n   *\n   * @func\n   * @memberOf R\n   * @since v0.6.0\n   * @category Function\n   * @category Object\n   * @sig (* -> *) -> {*} -> (* -> *)\n   * @param {Function} fn The function to bind to context\n   * @param {Object} thisObj The context to bind `fn` to\n   * @return {Function} A function that will execute in the context of `thisObj`.\n   * @see R.partial\n   * @example\n   *\n   *      var log = R.bind(console.log, console);\n   *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n   *      // logs {a: 2}\n   */\n\n\n  var bind = _curry2(function bind(fn, thisObj) {\n    return _arity(fn.length, function () {\n      return fn.apply(thisObj, arguments);\n    });\n  });\n  /**\n   * Restricts a number to be within a range.\n   *\n   * Also works for other ordered types such as Strings and Dates.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.20.0\n   * @category Relation\n   * @sig Ord a => a -> a -> a -> a\n   * @param {Number} minimum number\n   * @param {Number} maximum number\n   * @param {Number} value to be clamped\n   * @return {Number} Returns the clamped value\n   * @example\n   *\n   *      R.clamp(1, 10, -1) // => 1\n   *      R.clamp(1, 10, 11) // => 10\n   *      R.clamp(1, 10, 4)  // => 4\n   */\n\n\n  var clamp = _curry3(function clamp(min, max, value) {\n    if (min > max) {\n      throw new Error('min must not be greater than max in clamp(min, max, value)');\n    }\n\n    return value < min ? min : value > max ? max : value;\n  });\n  /**\n   * Makes a comparator function out of a function that reports whether the first\n   * element is less than the second.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (a, b -> Boolean) -> (a, b -> Number)\n   * @param {Function} pred A predicate function of arity two.\n   * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n   * @example\n   *\n   *      var cmp = R.comparator((a, b) => a.age < b.age);\n   *      var people = [\n   *        // ...\n   *      ];\n   *      R.sort(cmp, people);\n   */\n\n\n  var comparator = _curry1(function comparator(pred) {\n    return function (a, b) {\n      return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n    };\n  });\n  /**\n   * Returns a curried equivalent of the provided function, with the specified\n   * arity. The curried function has two unusual capabilities. First, its\n   * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n   * following are equivalent:\n   *\n   *   - `g(1)(2)(3)`\n   *   - `g(1)(2, 3)`\n   *   - `g(1, 2)(3)`\n   *   - `g(1, 2, 3)`\n   *\n   * Secondly, the special placeholder value `R.__` may be used to specify\n   * \"gaps\", allowing partial application of any combination of arguments,\n   * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n   * following are equivalent:\n   *\n   *   - `g(1, 2, 3)`\n   *   - `g(_, 2, 3)(1)`\n   *   - `g(_, _, 3)(1)(2)`\n   *   - `g(_, _, 3)(1, 2)`\n   *   - `g(_, 2)(1)(3)`\n   *   - `g(_, 2)(1, 3)`\n   *   - `g(_, 2)(_, 3)(1)`\n   *\n   * @func\n   * @memberOf R\n   * @since v0.5.0\n   * @category Function\n   * @sig Number -> (* -> a) -> (* -> a)\n   * @param {Number} length The arity for the returned function.\n   * @param {Function} fn The function to curry.\n   * @return {Function} A new, curried function.\n   * @see R.curry\n   * @example\n   *\n   *      var sumArgs = (...args) => R.sum(args);\n   *\n   *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n   *      var f = curriedAddFourNumbers(1, 2);\n   *      var g = f(3);\n   *      g(4); //=> 10\n   */\n\n\n  var curryN = _curry2(function curryN(length, fn) {\n    if (length === 1) {\n      return _curry1(fn);\n    }\n\n    return _arity(length, _curryN(length, [], fn));\n  });\n  /**\n   * Decrements its argument.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Math\n   * @sig Number -> Number\n   * @param {Number} n\n   * @return {Number}\n   * @see R.inc\n   * @example\n   *\n   *      R.dec(42); //=> 41\n   */\n\n\n  var dec = add(-1);\n  /**\n   * Returns the second argument if it is not `null`, `undefined` or `NaN`\n   * otherwise the first argument is returned.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category Logic\n   * @sig a -> b -> a | b\n   * @param {a} val The default value.\n   * @param {b} val The value to return if it is not null or undefined\n   * @return {*} The the second value or the default value\n   * @example\n   *\n   *      var defaultTo42 = R.defaultTo(42);\n   *\n   *      defaultTo42(null);  //=> 42\n   *      defaultTo42(undefined);  //=> 42\n   *      defaultTo42('Ramda');  //=> 'Ramda'\n   *      defaultTo42(parseInt('string')); //=> 42\n   */\n\n  var defaultTo = _curry2(function defaultTo(d, v) {\n    return v == null || v !== v ? d : v;\n  });\n  /**\n   * Finds the set (i.e. no duplicates) of all elements in the first list not\n   * contained in the second list. Duplication is determined according to the\n   * value returned by applying the supplied predicate to two list elements.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n   * @param {Function} pred A predicate used to test whether two items are equal.\n   * @param {Array} list1 The first list.\n   * @param {Array} list2 The second list.\n   * @return {Array} The elements in `list1` that are not in `list2`.\n   * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n   * @example\n   *\n   *      var cmp = (x, y) => x.a === y.a;\n   *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n   *      var l2 = [{a: 3}, {a: 4}];\n   *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n   */\n\n\n  var differenceWith = _curry3(function differenceWith(pred, first, second) {\n    var out = [];\n    var idx = 0;\n    var firstLen = first.length;\n\n    while (idx < firstLen) {\n      if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n        out.push(first[idx]);\n      }\n\n      idx += 1;\n    }\n\n    return out;\n  });\n  /**\n   * Returns a new object that does not contain a `prop` property.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category Object\n   * @sig String -> {k: v} -> {k: v}\n   * @param {String} prop the name of the property to dissociate\n   * @param {Object} obj the object to clone\n   * @return {Object} a new object similar to the original but without the specified property\n   * @see R.assoc\n   * @example\n   *\n   *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n   */\n\n\n  var dissoc = _curry2(function dissoc(prop, obj) {\n    var result = {};\n\n    for (var p in obj) {\n      if (p !== prop) {\n        result[p] = obj[p];\n      }\n    }\n\n    return result;\n  });\n  /**\n   * Makes a shallow clone of an object, omitting the property at the given path.\n   * Note that this copies and flattens prototype properties onto the new object\n   * as well. All non-primitive properties are copied by reference.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.11.0\n   * @category Object\n   * @sig [String] -> {k: v} -> {k: v}\n   * @param {Array} path the path to set\n   * @param {Object} obj the object to clone\n   * @return {Object} a new object without the property at path\n   * @see R.assocPath\n   * @example\n   *\n   *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n   */\n\n\n  var dissocPath = _curry2(function dissocPath(path, obj) {\n    switch (path.length) {\n      case 0:\n        return obj;\n\n      case 1:\n        return dissoc(path[0], obj);\n\n      default:\n        var head = path[0];\n\n        var tail = _slice(path, 1);\n\n        return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n    }\n  });\n  /**\n   * Divides two numbers. Equivalent to `a / b`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Math\n   * @sig Number -> Number -> Number\n   * @param {Number} a The first value.\n   * @param {Number} b The second value.\n   * @return {Number} The result of `a / b`.\n   * @see R.multiply\n   * @example\n   *\n   *      R.divide(71, 100); //=> 0.71\n   *\n   *      var half = R.divide(R.__, 2);\n   *      half(42); //=> 21\n   *\n   *      var reciprocal = R.divide(1);\n   *      reciprocal(4);   //=> 0.25\n   */\n\n\n  var divide = _curry2(function divide(a, b) {\n    return a / b;\n  });\n  /**\n   * Returns a new list excluding the leading elements of a given list which\n   * satisfy the supplied predicate function. It passes each value to the supplied\n   * predicate function, skipping elements while the predicate function returns\n   * `true`. The predicate function is applied to one argument: *(value)*.\n   *\n   * Dispatches to the `dropWhile` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> [a]\n   * @param {Function} fn The function called per iteration.\n   * @param {Array} list The collection to iterate over.\n   * @return {Array} A new array.\n   * @see R.takeWhile, R.transduce, R.addIndex\n   * @example\n   *\n   *      var lteTwo = x => x <= 2;\n   *\n   *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n   */\n\n\n  var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n    var idx = 0;\n    var len = list.length;\n\n    while (idx < len && pred(list[idx])) {\n      idx += 1;\n    }\n\n    return _slice(list, idx);\n  }));\n  /**\n   * Returns the empty value of its argument's type. Ramda defines the empty\n   * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n   * types are supported if they define `<Type>.empty` and/or\n   * `<Type>.prototype.empty`.\n   *\n   * Dispatches to the `empty` method of the first argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category Function\n   * @sig a -> a\n   * @param {*} x\n   * @return {*}\n   * @example\n   *\n   *      R.empty(Just(42));      //=> Nothing()\n   *      R.empty([1, 2, 3]);     //=> []\n   *      R.empty('unicorns');    //=> ''\n   *      R.empty({x: 1, y: 2});  //=> {}\n   */\n  // else\n\n\n  var empty = _curry1(function empty(x) {\n    return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n      return arguments;\n    }() : // else\n    void 0;\n  });\n  /**\n   * Creates a new object by recursively evolving a shallow copy of `object`,\n   * according to the `transformation` functions. All non-primitive properties\n   * are copied by reference.\n   *\n   * A `transformation` function will not be invoked if its corresponding key\n   * does not exist in the evolved object.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Object\n   * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n   * @param {Object} transformations The object specifying transformation functions to apply\n   *        to the object.\n   * @param {Object} object The object to be transformed.\n   * @return {Object} The transformed object.\n   * @example\n   *\n   *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n   *      var transformations = {\n   *        firstName: R.trim,\n   *        lastName: R.trim, // Will not get invoked.\n   *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n   *      };\n   *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n   */\n\n\n  var evolve = _curry2(function evolve(transformations, object) {\n    var result = {};\n    var transformation, key, type;\n\n    for (key in object) {\n      transformation = transformations[key];\n      type = typeof transformation;\n      result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n    }\n\n    return result;\n  });\n  /**\n   * Returns the first element of the list which matches the predicate, or\n   * `undefined` if no element matches.\n   *\n   * Dispatches to the `find` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> a | undefined\n   * @param {Function} fn The predicate function used to determine if the element is the\n   *        desired one.\n   * @param {Array} list The array to consider.\n   * @return {Object} The element found, or `undefined`.\n   * @see R.transduce\n   * @example\n   *\n   *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n   *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n   *      R.find(R.propEq('a', 4))(xs); //=> undefined\n   */\n\n\n  var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n    var idx = 0;\n    var len = list.length;\n\n    while (idx < len) {\n      if (fn(list[idx])) {\n        return list[idx];\n      }\n\n      idx += 1;\n    }\n  }));\n  /**\n   * Returns the index of the first element of the list which matches the\n   * predicate, or `-1` if no element matches.\n   *\n   * Dispatches to the `findIndex` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.1\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> Number\n   * @param {Function} fn The predicate function used to determine if the element is the\n   * desired one.\n   * @param {Array} list The array to consider.\n   * @return {Number} The index of the element found, or `-1`.\n   * @see R.transduce\n   * @example\n   *\n   *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n   *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n   *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n   */\n\n\n  var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n    var idx = 0;\n    var len = list.length;\n\n    while (idx < len) {\n      if (fn(list[idx])) {\n        return idx;\n      }\n\n      idx += 1;\n    }\n\n    return -1;\n  }));\n  /**\n   * Returns the last element of the list which matches the predicate, or\n   * `undefined` if no element matches.\n   *\n   * Dispatches to the `findLast` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.1\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> a | undefined\n   * @param {Function} fn The predicate function used to determine if the element is the\n   * desired one.\n   * @param {Array} list The array to consider.\n   * @return {Object} The element found, or `undefined`.\n   * @see R.transduce\n   * @example\n   *\n   *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n   *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n   *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n   */\n\n\n  var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n    var idx = list.length - 1;\n\n    while (idx >= 0) {\n      if (fn(list[idx])) {\n        return list[idx];\n      }\n\n      idx -= 1;\n    }\n  }));\n  /**\n   * Returns the index of the last element of the list which matches the\n   * predicate, or `-1` if no element matches.\n   *\n   * Dispatches to the `findLastIndex` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.1\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> Number\n   * @param {Function} fn The predicate function used to determine if the element is the\n   * desired one.\n   * @param {Array} list The array to consider.\n   * @return {Number} The index of the element found, or `-1`.\n   * @see R.transduce\n   * @example\n   *\n   *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n   *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n   *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n   */\n\n\n  var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n    var idx = list.length - 1;\n\n    while (idx >= 0) {\n      if (fn(list[idx])) {\n        return idx;\n      }\n\n      idx -= 1;\n    }\n\n    return -1;\n  }));\n  /**\n   * Iterate over an input `list`, calling a provided function `fn` for each\n   * element in the list.\n   *\n   * `fn` receives one argument: *(value)*.\n   *\n   * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n   * arrays), unlike the native `Array.prototype.forEach` method. For more\n   * details on this behavior, see:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n   *\n   * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n   * the original array. In some libraries this function is named `each`.\n   *\n   * Dispatches to the `forEach` method of the second argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.1\n   * @category List\n   * @sig (a -> *) -> [a] -> [a]\n   * @param {Function} fn The function to invoke. Receives one argument, `value`.\n   * @param {Array} list The list to iterate over.\n   * @return {Array} The original list.\n   * @see R.addIndex\n   * @example\n   *\n   *      var printXPlusFive = x => console.log(x + 5);\n   *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n   *      // logs 6\n   *      // logs 7\n   *      // logs 8\n   */\n\n\n  var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n    var len = list.length;\n    var idx = 0;\n\n    while (idx < len) {\n      fn(list[idx]);\n      idx += 1;\n    }\n\n    return list;\n  }));\n  /**\n   * Creates a new object from a list key-value pairs. If a key appears in\n   * multiple pairs, the rightmost pair is included in the object.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category List\n   * @sig [[k,v]] -> {k: v}\n   * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n   * @return {Object} The object made by pairing up `keys` and `values`.\n   * @see R.toPairs, R.pair\n   * @example\n   *\n   *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n   */\n\n\n  var fromPairs = _curry1(function fromPairs(pairs) {\n    var result = {};\n    var idx = 0;\n\n    while (idx < pairs.length) {\n      result[pairs[idx][0]] = pairs[idx][1];\n      idx += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Takes a list and returns a list of lists where each sublist's elements are\n   * all \"equal\" according to the provided equality function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.21.0\n   * @category List\n   * @sig ((a, a) → Boolean) → [a] → [[a]]\n   * @param {Function} fn Function for determining whether two given (adjacent)\n   *        elements should be in the same group\n   * @param {Array} list The array to group. Also accepts a string, which will be\n   *        treated as a list of characters.\n   * @return {List} A list that contains sublists of equal elements,\n   *         whose concatenations are equal to the original list.\n   * @example\n   *\n   * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n   * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n   *\n   * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n   * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n   *\n   * R.groupWith(R.eqBy(isVowel), 'aestiou')\n   * //=> ['ae', 'st', 'iou']\n   */\n\n\n  var groupWith = _curry2(function (fn, list) {\n    var res = [];\n    var idx = 0;\n    var len = list.length;\n\n    while (idx < len) {\n      var nextidx = idx + 1;\n\n      while (nextidx < len && fn(list[idx], list[nextidx])) {\n        nextidx += 1;\n      }\n\n      res.push(list.slice(idx, nextidx));\n      idx = nextidx;\n    }\n\n    return res;\n  });\n  /**\n   * Returns `true` if the first argument is greater than the second; `false`\n   * otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig Ord a => a -> a -> Boolean\n   * @param {*} a\n   * @param {*} b\n   * @return {Boolean}\n   * @see R.lt\n   * @example\n   *\n   *      R.gt(2, 1); //=> true\n   *      R.gt(2, 2); //=> false\n   *      R.gt(2, 3); //=> false\n   *      R.gt('a', 'z'); //=> false\n   *      R.gt('z', 'a'); //=> true\n   */\n\n\n  var gt = _curry2(function gt(a, b) {\n    return a > b;\n  });\n  /**\n   * Returns `true` if the first argument is greater than or equal to the second;\n   * `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig Ord a => a -> a -> Boolean\n   * @param {Number} a\n   * @param {Number} b\n   * @return {Boolean}\n   * @see R.lte\n   * @example\n   *\n   *      R.gte(2, 1); //=> true\n   *      R.gte(2, 2); //=> true\n   *      R.gte(2, 3); //=> false\n   *      R.gte('a', 'z'); //=> false\n   *      R.gte('z', 'a'); //=> true\n   */\n\n\n  var gte = _curry2(function gte(a, b) {\n    return a >= b;\n  });\n  /**\n   * Returns whether or not an object has an own property with the specified name\n   *\n   * @func\n   * @memberOf R\n   * @since v0.7.0\n   * @category Object\n   * @sig s -> {s: x} -> Boolean\n   * @param {String} prop The name of the property to check for.\n   * @param {Object} obj The object to query.\n   * @return {Boolean} Whether the property exists.\n   * @example\n   *\n   *      var hasName = R.has('name');\n   *      hasName({name: 'alice'});   //=> true\n   *      hasName({name: 'bob'});     //=> true\n   *      hasName({});                //=> false\n   *\n   *      var point = {x: 0, y: 0};\n   *      var pointHas = R.has(R.__, point);\n   *      pointHas('x');  //=> true\n   *      pointHas('y');  //=> true\n   *      pointHas('z');  //=> false\n   */\n\n\n  var has = _curry2(_has);\n  /**\n   * Returns whether or not an object or its prototype chain has a property with\n   * the specified name\n   *\n   * @func\n   * @memberOf R\n   * @since v0.7.0\n   * @category Object\n   * @sig s -> {s: x} -> Boolean\n   * @param {String} prop The name of the property to check for.\n   * @param {Object} obj The object to query.\n   * @return {Boolean} Whether the property exists.\n   * @example\n   *\n   *      function Rectangle(width, height) {\n   *        this.width = width;\n   *        this.height = height;\n   *      }\n   *      Rectangle.prototype.area = function() {\n   *        return this.width * this.height;\n   *      };\n   *\n   *      var square = new Rectangle(2, 2);\n   *      R.hasIn('width', square);  //=> true\n   *      R.hasIn('area', square);  //=> true\n   */\n\n\n  var hasIn = _curry2(function hasIn(prop, obj) {\n    return prop in obj;\n  });\n  /**\n   * Returns true if its arguments are identical, false otherwise. Values are\n   * identical if they reference the same memory. `NaN` is identical to `NaN`;\n   * `0` and `-0` are not identical.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.15.0\n   * @category Relation\n   * @sig a -> a -> Boolean\n   * @param {*} a\n   * @param {*} b\n   * @return {Boolean}\n   * @example\n   *\n   *      var o = {};\n   *      R.identical(o, o); //=> true\n   *      R.identical(1, 1); //=> true\n   *      R.identical(1, '1'); //=> false\n   *      R.identical([], []); //=> false\n   *      R.identical(0, -0); //=> false\n   *      R.identical(NaN, NaN); //=> true\n   */\n  // SameValue algorithm\n  // Steps 1-5, 7-10\n  // Steps 6.b-6.e: +0 != -0\n  // Step 6.a: NaN == NaN\n\n\n  var identical = _curry2(function identical(a, b) {\n    // SameValue algorithm\n    if (a === b) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return a !== 0 || 1 / a === 1 / b;\n    } else {\n      // Step 6.a: NaN == NaN\n      return a !== a && b !== b;\n    }\n  });\n  /**\n   * A function that does nothing but return the parameter supplied to it. Good\n   * as a default or placeholder function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig a -> a\n   * @param {*} x The value to return.\n   * @return {*} The input value, `x`.\n   * @example\n   *\n   *      R.identity(1); //=> 1\n   *\n   *      var obj = {};\n   *      R.identity(obj) === obj; //=> true\n   */\n\n\n  var identity = _curry1(_identity);\n  /**\n   * Creates a function that will process either the `onTrue` or the `onFalse`\n   * function depending upon the result of the `condition` predicate.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Logic\n   * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n   * @param {Function} condition A predicate function\n   * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n   * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n   * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n   *                    function depending upon the result of the `condition` predicate.\n   * @see R.unless, R.when\n   * @example\n   *\n   *      var incCount = R.ifElse(\n   *        R.has('count'),\n   *        R.over(R.lensProp('count'), R.inc),\n   *        R.assoc('count', 1)\n   *      );\n   *      incCount({});           //=> { count: 1 }\n   *      incCount({ count: 1 }); //=> { count: 2 }\n   */\n\n\n  var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n    return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n    });\n  });\n  /**\n   * Increments its argument.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Math\n   * @sig Number -> Number\n   * @param {Number} n\n   * @return {Number}\n   * @see R.dec\n   * @example\n   *\n   *      R.inc(42); //=> 43\n   */\n\n\n  var inc = add(1);\n  /**\n   * Inserts the supplied element into the list, at index `index`. _Note that\n   * this is not destructive_: it returns a copy of the list with the changes.\n   * <small>No lists have been harmed in the application of this function.</small>\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.2\n   * @category List\n   * @sig Number -> a -> [a] -> [a]\n   * @param {Number} index The position to insert the element\n   * @param {*} elt The element to insert into the Array\n   * @param {Array} list The list to insert into\n   * @return {Array} A new Array with `elt` inserted at `index`.\n   * @example\n   *\n   *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n   */\n\n  var insert = _curry3(function insert(idx, elt, list) {\n    idx = idx < list.length && idx >= 0 ? idx : list.length;\n\n    var result = _slice(list);\n\n    result.splice(idx, 0, elt);\n    return result;\n  });\n  /**\n   * Inserts the sub-list into the list, at index `index`. _Note that this is not\n   * destructive_: it returns a copy of the list with the changes.\n   * <small>No lists have been harmed in the application of this function.</small>\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category List\n   * @sig Number -> [a] -> [a] -> [a]\n   * @param {Number} index The position to insert the sub-list\n   * @param {Array} elts The sub-list to insert into the Array\n   * @param {Array} list The list to insert the sub-list into\n   * @return {Array} A new Array with `elts` inserted starting at `index`.\n   * @example\n   *\n   *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n   */\n\n\n  var insertAll = _curry3(function insertAll(idx, elts, list) {\n    idx = idx < list.length && idx >= 0 ? idx : list.length;\n    return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n  });\n  /**\n   * Creates a new list with the separator interposed between elements.\n   *\n   * Dispatches to the `intersperse` method of the second argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category List\n   * @sig a -> [a] -> [a]\n   * @param {*} separator The element to add to the list.\n   * @param {Array} list The list to be interposed.\n   * @return {Array} The new list.\n   * @example\n   *\n   *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n   */\n\n\n  var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n    var out = [];\n    var idx = 0;\n    var length = list.length;\n\n    while (idx < length) {\n      if (idx === length - 1) {\n        out.push(list[idx]);\n      } else {\n        out.push(list[idx], separator);\n      }\n\n      idx += 1;\n    }\n\n    return out;\n  }));\n  /**\n   * See if an object (`val`) is an instance of the supplied constructor. This\n   * function will check up the inheritance chain, if any.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category Type\n   * @sig (* -> {*}) -> a -> Boolean\n   * @param {Object} ctor A constructor\n   * @param {*} val The value to test\n   * @return {Boolean}\n   * @example\n   *\n   *      R.is(Object, {}); //=> true\n   *      R.is(Number, 1); //=> true\n   *      R.is(Object, 1); //=> false\n   *      R.is(String, 's'); //=> true\n   *      R.is(String, new String('')); //=> true\n   *      R.is(Object, new String('')); //=> true\n   *      R.is(Object, 's'); //=> false\n   *      R.is(Number, {}); //=> false\n   */\n\n\n  var is = _curry2(function is(Ctor, val) {\n    return val != null && val.constructor === Ctor || val instanceof Ctor;\n  });\n  /**\n   * Tests whether or not an object is similar to an array.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.5.0\n   * @category Type\n   * @category List\n   * @sig * -> Boolean\n   * @param {*} x The object to test.\n   * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n   * @example\n   *\n   *      R.isArrayLike([]); //=> true\n   *      R.isArrayLike(true); //=> false\n   *      R.isArrayLike({}); //=> false\n   *      R.isArrayLike({length: 10}); //=> false\n   *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n   */\n\n\n  var isArrayLike = _curry1(function isArrayLike(x) {\n    if (_isArray(x)) {\n      return true;\n    }\n\n    if (!x) {\n      return false;\n    }\n\n    if (typeof x !== 'object') {\n      return false;\n    }\n\n    if (_isString(x)) {\n      return false;\n    }\n\n    if (x.nodeType === 1) {\n      return !!x.length;\n    }\n\n    if (x.length === 0) {\n      return true;\n    }\n\n    if (x.length > 0) {\n      return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n    }\n\n    return false;\n  });\n  /**\n   * Checks if the input value is `null` or `undefined`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Type\n   * @sig * -> Boolean\n   * @param {*} x The value to test.\n   * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n   * @example\n   *\n   *      R.isNil(null); //=> true\n   *      R.isNil(undefined); //=> true\n   *      R.isNil(0); //=> false\n   *      R.isNil([]); //=> false\n   */\n\n\n  var isNil = _curry1(function isNil(x) {\n    return x == null;\n  });\n  /**\n   * Returns a list containing the names of all the enumerable own properties of\n   * the supplied object.\n   * Note that the order of the output array is not guaranteed to be consistent\n   * across different JS platforms.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig {k: v} -> [k]\n   * @param {Object} obj The object to extract properties from\n   * @return {Array} An array of the object's own properties.\n   * @example\n   *\n   *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n   */\n  // cover IE < 9 keys issues\n  // Safari bug\n\n\n  var keys = function () {\n    // cover IE < 9 keys issues\n    var hasEnumBug = !{\n      toString: null\n    }.propertyIsEnumerable('toString');\n    var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug\n\n    var hasArgsEnumBug = function () {\n      'use strict';\n\n      return arguments.propertyIsEnumerable('length');\n    }();\n\n    var contains = function contains(list, item) {\n      var idx = 0;\n\n      while (idx < list.length) {\n        if (list[idx] === item) {\n          return true;\n        }\n\n        idx += 1;\n      }\n\n      return false;\n    };\n\n    return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {\n      return Object(obj) !== obj ? [] : Object.keys(obj);\n    }) : _curry1(function keys(obj) {\n      if (Object(obj) !== obj) {\n        return [];\n      }\n\n      var prop, nIdx;\n      var ks = [];\n\n      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n\n      for (prop in obj) {\n        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n          ks[ks.length] = prop;\n        }\n      }\n\n      if (hasEnumBug) {\n        nIdx = nonEnumerableProps.length - 1;\n\n        while (nIdx >= 0) {\n          prop = nonEnumerableProps[nIdx];\n\n          if (_has(prop, obj) && !contains(ks, prop)) {\n            ks[ks.length] = prop;\n          }\n\n          nIdx -= 1;\n        }\n      }\n\n      return ks;\n    });\n  }();\n  /**\n   * Returns a list containing the names of all the properties of the supplied\n   * object, including prototype properties.\n   * Note that the order of the output array is not guaranteed to be consistent\n   * across different JS platforms.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.0\n   * @category Object\n   * @sig {k: v} -> [k]\n   * @param {Object} obj The object to extract properties from\n   * @return {Array} An array of the object's own and prototype properties.\n   * @example\n   *\n   *      var F = function() { this.x = 'X'; };\n   *      F.prototype.y = 'Y';\n   *      var f = new F();\n   *      R.keysIn(f); //=> ['x', 'y']\n   */\n\n\n  var keysIn = _curry1(function keysIn(obj) {\n    var prop;\n    var ks = [];\n\n    for (prop in obj) {\n      ks[ks.length] = prop;\n    }\n\n    return ks;\n  });\n  /**\n   * Returns the number of elements in the array by returning `list.length`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category List\n   * @sig [a] -> Number\n   * @param {Array} list The array to inspect.\n   * @return {Number} The length of the array.\n   * @example\n   *\n   *      R.length([]); //=> 0\n   *      R.length([1, 2, 3]); //=> 3\n   */\n\n\n  var length = _curry1(function length(list) {\n    return list != null && _isNumber(list.length) ? list.length : NaN;\n  });\n  /**\n   * Returns `true` if the first argument is less than the second; `false`\n   * otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig Ord a => a -> a -> Boolean\n   * @param {*} a\n   * @param {*} b\n   * @return {Boolean}\n   * @see R.gt\n   * @example\n   *\n   *      R.lt(2, 1); //=> false\n   *      R.lt(2, 2); //=> false\n   *      R.lt(2, 3); //=> true\n   *      R.lt('a', 'z'); //=> true\n   *      R.lt('z', 'a'); //=> false\n   */\n\n\n  var lt = _curry2(function lt(a, b) {\n    return a < b;\n  });\n  /**\n   * Returns `true` if the first argument is less than or equal to the second;\n   * `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig Ord a => a -> a -> Boolean\n   * @param {Number} a\n   * @param {Number} b\n   * @return {Boolean}\n   * @see R.gte\n   * @example\n   *\n   *      R.lte(2, 1); //=> false\n   *      R.lte(2, 2); //=> true\n   *      R.lte(2, 3); //=> true\n   *      R.lte('a', 'z'); //=> true\n   *      R.lte('z', 'a'); //=> false\n   */\n\n\n  var lte = _curry2(function lte(a, b) {\n    return a <= b;\n  });\n  /**\n   * The mapAccum function behaves like a combination of map and reduce; it\n   * applies a function to each element of a list, passing an accumulating\n   * parameter from left to right, and returning a final value of this\n   * accumulator together with the new list.\n   *\n   * The iterator function receives two arguments, *acc* and *value*, and should\n   * return a tuple *[acc, value]*.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category List\n   * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n   * @param {Function} fn The function to be called on every element of the input `list`.\n   * @param {*} acc The accumulator value.\n   * @param {Array} list The list to iterate over.\n   * @return {*} The final, accumulated value.\n   * @see R.addIndex\n   * @example\n   *\n   *      var digits = ['1', '2', '3', '4'];\n   *      var appender = (a, b) => [a + b, a + b];\n   *\n   *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n   */\n\n\n  var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    var result = [];\n    var tuple = [acc];\n\n    while (idx < len) {\n      tuple = fn(tuple[0], list[idx]);\n      result[idx] = tuple[1];\n      idx += 1;\n    }\n\n    return [tuple[0], result];\n  });\n  /**\n   * The mapAccumRight function behaves like a combination of map and reduce; it\n   * applies a function to each element of a list, passing an accumulating\n   * parameter from right to left, and returning a final value of this\n   * accumulator together with the new list.\n   *\n   * Similar to `mapAccum`, except moves through the input list from the right to\n   * the left.\n   *\n   * The iterator function receives two arguments, *acc* and *value*, and should\n   * return a tuple *[acc, value]*.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category List\n   * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n   * @param {Function} fn The function to be called on every element of the input `list`.\n   * @param {*} acc The accumulator value.\n   * @param {Array} list The list to iterate over.\n   * @return {*} The final, accumulated value.\n   * @see R.addIndex\n   * @example\n   *\n   *      var digits = ['1', '2', '3', '4'];\n   *      var append = (a, b) => [a + b, a + b];\n   *\n   *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n   */\n\n\n  var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n    var idx = list.length - 1;\n    var result = [];\n    var tuple = [acc];\n\n    while (idx >= 0) {\n      tuple = fn(tuple[0], list[idx]);\n      result[idx] = tuple[1];\n      idx -= 1;\n    }\n\n    return [tuple[0], result];\n  });\n  /**\n   * Tests a regular expression against a String. Note that this function will\n   * return an empty array when there are no matches. This differs from\n   * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n   * which returns `null` when there are no matches.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category String\n   * @sig RegExp -> String -> [String | Undefined]\n   * @param {RegExp} rx A regular expression.\n   * @param {String} str The string to match against\n   * @return {Array} The list of matches or empty array.\n   * @see R.test\n   * @example\n   *\n   *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n   *      R.match(/a/, 'b'); //=> []\n   *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n   */\n\n\n  var match = _curry2(function match(rx, str) {\n    return str.match(rx) || [];\n  });\n  /**\n   * mathMod behaves like the modulo operator should mathematically, unlike the\n   * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n   * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n   * when the modulus is zero or negative.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category Math\n   * @sig Number -> Number -> Number\n   * @param {Number} m The dividend.\n   * @param {Number} p the modulus.\n   * @return {Number} The result of `b mod a`.\n   * @example\n   *\n   *      R.mathMod(-17, 5);  //=> 3\n   *      R.mathMod(17, 5);   //=> 2\n   *      R.mathMod(17, -5);  //=> NaN\n   *      R.mathMod(17, 0);   //=> NaN\n   *      R.mathMod(17.2, 5); //=> NaN\n   *      R.mathMod(17, 5.3); //=> NaN\n   *\n   *      var clock = R.mathMod(R.__, 12);\n   *      clock(15); //=> 3\n   *      clock(24); //=> 0\n   *\n   *      var seventeenMod = R.mathMod(17);\n   *      seventeenMod(3);  //=> 2\n   *      seventeenMod(4);  //=> 1\n   *      seventeenMod(10); //=> 7\n   */\n\n\n  var mathMod = _curry2(function mathMod(m, p) {\n    if (!_isInteger(m)) {\n      return NaN;\n    }\n\n    if (!_isInteger(p) || p < 1) {\n      return NaN;\n    }\n\n    return (m % p + p) % p;\n  });\n  /**\n   * Returns the larger of its two arguments.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig Ord a => a -> a -> a\n   * @param {*} a\n   * @param {*} b\n   * @return {*}\n   * @see R.maxBy, R.min\n   * @example\n   *\n   *      R.max(789, 123); //=> 789\n   *      R.max('a', 'b'); //=> 'b'\n   */\n\n\n  var max = _curry2(function max(a, b) {\n    return b > a ? b : a;\n  });\n  /**\n   * Takes a function and two values, and returns whichever value produces the\n   * larger result when passed to the provided function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Relation\n   * @sig Ord b => (a -> b) -> a -> a -> a\n   * @param {Function} f\n   * @param {*} a\n   * @param {*} b\n   * @return {*}\n   * @see R.max, R.minBy\n   * @example\n   *\n   *      //  square :: Number -> Number\n   *      var square = n => n * n;\n   *\n   *      R.maxBy(square, -3, 2); //=> -3\n   *\n   *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n   *      R.reduce(R.maxBy(square), 0, []); //=> 0\n   */\n\n\n  var maxBy = _curry3(function maxBy(f, a, b) {\n    return f(b) > f(a) ? b : a;\n  });\n  /**\n   * Create a new object with the own properties of the first object merged with\n   * the own properties of the second object. If a key exists in both objects,\n   * the value from the second object will be used.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig {k: v} -> {k: v} -> {k: v}\n   * @param {Object} l\n   * @param {Object} r\n   * @return {Object}\n   * @see R.mergeWith, R.mergeWithKey\n   * @example\n   *\n   *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n   *      //=> { 'name': 'fred', 'age': 40 }\n   *\n   *      var resetToDefault = R.merge(R.__, {x: 0});\n   *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n   */\n\n\n  var merge = _curry2(function merge(l, r) {\n    return _assign({}, l, r);\n  });\n  /**\n   * Merges a list of objects together into one object.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category List\n   * @sig [{k: v}] -> {k: v}\n   * @param {Array} list An array of objects\n   * @return {Object} A merged object.\n   * @see R.reduce\n   * @example\n   *\n   *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n   *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n   */\n\n\n  var mergeAll = _curry1(function mergeAll(list) {\n    return _assign.apply(null, [{}].concat(list));\n  });\n  /**\n   * Creates a new object with the own properties of the two provided objects. If\n   * a key exists in both objects, the provided function is applied to the key\n   * and the values associated with the key in each object, with the result being\n   * used as the value associated with the key in the returned object. The key\n   * will be excluded from the returned object if the resulting value is\n   * `undefined`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category Object\n   * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n   * @param {Function} fn\n   * @param {Object} l\n   * @param {Object} r\n   * @return {Object}\n   * @see R.merge, R.mergeWith\n   * @example\n   *\n   *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n   *      R.mergeWithKey(concatValues,\n   *                     { a: true, thing: 'foo', values: [10, 20] },\n   *                     { b: true, thing: 'bar', values: [15, 35] });\n   *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n   */\n\n\n  var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n    var result = {};\n    var k;\n\n    for (k in l) {\n      if (_has(k, l)) {\n        result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n      }\n    }\n\n    for (k in r) {\n      if (_has(k, r) && !_has(k, result)) {\n        result[k] = r[k];\n      }\n    }\n\n    return result;\n  });\n  /**\n   * Returns the smaller of its two arguments.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig Ord a => a -> a -> a\n   * @param {*} a\n   * @param {*} b\n   * @return {*}\n   * @see R.minBy, R.max\n   * @example\n   *\n   *      R.min(789, 123); //=> 123\n   *      R.min('a', 'b'); //=> 'a'\n   */\n\n\n  var min = _curry2(function min(a, b) {\n    return b < a ? b : a;\n  });\n  /**\n   * Takes a function and two values, and returns whichever value produces the\n   * smaller result when passed to the provided function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Relation\n   * @sig Ord b => (a -> b) -> a -> a -> a\n   * @param {Function} f\n   * @param {*} a\n   * @param {*} b\n   * @return {*}\n   * @see R.min, R.maxBy\n   * @example\n   *\n   *      //  square :: Number -> Number\n   *      var square = n => n * n;\n   *\n   *      R.minBy(square, -3, 2); //=> 2\n   *\n   *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n   *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n   */\n\n\n  var minBy = _curry3(function minBy(f, a, b) {\n    return f(b) < f(a) ? b : a;\n  });\n  /**\n   * Divides the first parameter by the second and returns the remainder. Note\n   * that this function preserves the JavaScript-style behavior for modulo. For\n   * mathematical modulo see `mathMod`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.1\n   * @category Math\n   * @sig Number -> Number -> Number\n   * @param {Number} a The value to the divide.\n   * @param {Number} b The pseudo-modulus\n   * @return {Number} The result of `b % a`.\n   * @see R.mathMod\n   * @example\n   *\n   *      R.modulo(17, 3); //=> 2\n   *      // JS behavior:\n   *      R.modulo(-17, 3); //=> -2\n   *      R.modulo(17, -3); //=> 2\n   *\n   *      var isOdd = R.modulo(R.__, 2);\n   *      isOdd(42); //=> 0\n   *      isOdd(21); //=> 1\n   */\n\n\n  var modulo = _curry2(function modulo(a, b) {\n    return a % b;\n  });\n  /**\n   * Multiplies two numbers. Equivalent to `a * b` but curried.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Math\n   * @sig Number -> Number -> Number\n   * @param {Number} a The first value.\n   * @param {Number} b The second value.\n   * @return {Number} The result of `a * b`.\n   * @see R.divide\n   * @example\n   *\n   *      var double = R.multiply(2);\n   *      var triple = R.multiply(3);\n   *      double(3);       //=>  6\n   *      triple(4);       //=> 12\n   *      R.multiply(2, 5);  //=> 10\n   */\n\n\n  var multiply = _curry2(function multiply(a, b) {\n    return a * b;\n  });\n  /**\n   * Wraps a function of any arity (including nullary) in a function that accepts\n   * exactly `n` parameters. Any extraneous parameters will not be passed to the\n   * supplied function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig Number -> (* -> a) -> (* -> a)\n   * @param {Number} n The desired arity of the new function.\n   * @param {Function} fn The function to wrap.\n   * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n   *         arity `n`.\n   * @example\n   *\n   *      var takesTwoArgs = (a, b) => [a, b];\n   *\n   *      takesTwoArgs.length; //=> 2\n   *      takesTwoArgs(1, 2); //=> [1, 2]\n   *\n   *      var takesOneArg = R.nAry(1, takesTwoArgs);\n   *      takesOneArg.length; //=> 1\n   *      // Only `n` arguments are passed to the wrapped function\n   *      takesOneArg(1, 2); //=> [1, undefined]\n   */\n\n\n  var nAry = _curry2(function nAry(n, fn) {\n    switch (n) {\n      case 0:\n        return function () {\n          return fn.call(this);\n        };\n\n      case 1:\n        return function (a0) {\n          return fn.call(this, a0);\n        };\n\n      case 2:\n        return function (a0, a1) {\n          return fn.call(this, a0, a1);\n        };\n\n      case 3:\n        return function (a0, a1, a2) {\n          return fn.call(this, a0, a1, a2);\n        };\n\n      case 4:\n        return function (a0, a1, a2, a3) {\n          return fn.call(this, a0, a1, a2, a3);\n        };\n\n      case 5:\n        return function (a0, a1, a2, a3, a4) {\n          return fn.call(this, a0, a1, a2, a3, a4);\n        };\n\n      case 6:\n        return function (a0, a1, a2, a3, a4, a5) {\n          return fn.call(this, a0, a1, a2, a3, a4, a5);\n        };\n\n      case 7:\n        return function (a0, a1, a2, a3, a4, a5, a6) {\n          return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n        };\n\n      case 8:\n        return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n          return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n        };\n\n      case 9:\n        return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n          return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n        };\n\n      case 10:\n        return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n          return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n        };\n\n      default:\n        throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n    }\n  });\n  /**\n   * Negates its argument.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Math\n   * @sig Number -> Number\n   * @param {Number} n\n   * @return {Number}\n   * @example\n   *\n   *      R.negate(42); //=> -42\n   */\n\n\n  var negate = _curry1(function negate(n) {\n    return -n;\n  });\n  /**\n   * Returns `true` if no elements of the list match the predicate, `false`\n   * otherwise.\n   *\n   * Dispatches to the `any` method of the second argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.12.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> Boolean\n   * @param {Function} fn The predicate function.\n   * @param {Array} list The array to consider.\n   * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n   * @see R.all, R.any\n   * @example\n   *\n   *      var isEven = n => n % 2 === 0;\n   *\n   *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n   *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n   */\n\n\n  var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n  /**\n   * A function that returns the `!` of its argument. It will return `true` when\n   * passed false-y value, and `false` when passed a truth-y one.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Logic\n   * @sig * -> Boolean\n   * @param {*} a any value\n   * @return {Boolean} the logical inverse of passed argument.\n   * @see R.complement\n   * @example\n   *\n   *      R.not(true); //=> false\n   *      R.not(false); //=> true\n   *      R.not(0); //=> true\n   *      R.not(1); //=> false\n   */\n\n\n  var not = _curry1(function not(a) {\n    return !a;\n  });\n  /**\n   * Returns the nth element of the given list or string. If n is negative the\n   * element at index length + n is returned.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig Number -> [a] -> a | Undefined\n   * @sig Number -> String -> String\n   * @param {Number} offset\n   * @param {*} list\n   * @return {*}\n   * @example\n   *\n   *      var list = ['foo', 'bar', 'baz', 'quux'];\n   *      R.nth(1, list); //=> 'bar'\n   *      R.nth(-1, list); //=> 'quux'\n   *      R.nth(-99, list); //=> undefined\n   *\n   *      R.nth(2, 'abc'); //=> 'c'\n   *      R.nth(3, 'abc'); //=> ''\n   */\n\n\n  var nth = _curry2(function nth(offset, list) {\n    var idx = offset < 0 ? list.length + offset : offset;\n    return _isString(list) ? list.charAt(idx) : list[idx];\n  });\n  /**\n   * Returns a function which returns its nth argument.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Function\n   * @sig Number -> *... -> *\n   * @param {Number} n\n   * @return {Function}\n   * @example\n   *\n   *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n   *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n   */\n\n\n  var nthArg = _curry1(function nthArg(n) {\n    var arity = n < 0 ? 1 : n + 1;\n    return curryN(arity, function () {\n      return nth(n, arguments);\n    });\n  });\n  /**\n   * Creates an object containing a single key:value pair.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.18.0\n   * @category Object\n   * @sig String -> a -> {String:a}\n   * @param {String} key\n   * @param {*} val\n   * @return {Object}\n   * @see R.pair\n   * @example\n   *\n   *      var matchPhrases = R.compose(\n   *        R.objOf('must'),\n   *        R.map(R.objOf('match_phrase'))\n   *      );\n   *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n   */\n\n\n  var objOf = _curry2(function objOf(key, val) {\n    var obj = {};\n    obj[key] = val;\n    return obj;\n  });\n  /**\n   * Returns a singleton array containing the value provided.\n   *\n   * Note this `of` is different from the ES6 `of`; See\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category Function\n   * @sig a -> [a]\n   * @param {*} x any value\n   * @return {Array} An array wrapping `x`.\n   * @example\n   *\n   *      R.of(null); //=> [null]\n   *      R.of([42]); //=> [[42]]\n   */\n\n\n  var of = _curry1(_of);\n  /**\n   * Accepts a function `fn` and returns a function that guards invocation of\n   * `fn` such that `fn` can only ever be called once, no matter how many times\n   * the returned function is invoked. The first value calculated is returned in\n   * subsequent invocations.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (a... -> b) -> (a... -> b)\n   * @param {Function} fn The function to wrap in a call-only-once wrapper.\n   * @return {Function} The wrapped function.\n   * @example\n   *\n   *      var addOneOnce = R.once(x => x + 1);\n   *      addOneOnce(10); //=> 11\n   *      addOneOnce(addOneOnce(50)); //=> 11\n   */\n\n\n  var once = _curry1(function once(fn) {\n    var called = false;\n    var result;\n    return _arity(fn.length, function () {\n      if (called) {\n        return result;\n      }\n\n      called = true;\n      result = fn.apply(this, arguments);\n      return result;\n    });\n  });\n  /**\n   * Returns `true` if one or both of its arguments are `true`. Returns `false`\n   * if both arguments are `false`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Logic\n   * @sig * -> * -> *\n   * @param {Boolean} a A boolean value\n   * @param {Boolean} b A boolean value\n   * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n   * @see R.either\n   * @example\n   *\n   *      R.or(true, true); //=> true\n   *      R.or(true, false); //=> true\n   *      R.or(false, true); //=> true\n   *      R.or(false, false); //=> false\n   */\n\n\n  var or = _curry2(function or(a, b) {\n    return a || b;\n  });\n  /**\n   * Returns the result of \"setting\" the portion of the given data structure\n   * focused by the given lens to the result of applying the given function to\n   * the focused value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category Object\n   * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n   * @sig Lens s a -> (a -> a) -> s -> s\n   * @param {Lens} lens\n   * @param {*} v\n   * @param {*} x\n   * @return {*}\n   * @see R.prop, R.lensIndex, R.lensProp\n   * @example\n   *\n   *      var headLens = R.lensIndex(0);\n   *\n   *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n   */\n  // `Identity` is a functor that holds a single value, where `map` simply\n  // transforms the held value with the provided function.\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n\n\n  var over = function () {\n    // `Identity` is a functor that holds a single value, where `map` simply\n    // transforms the held value with the provided function.\n    var Identity = function (x) {\n      return {\n        value: x,\n        map: function (f) {\n          return Identity(f(x));\n        }\n      };\n    };\n\n    return _curry3(function over(lens, f, x) {\n      // The value returned by the getter function is first transformed with `f`,\n      // then set as the value of an `Identity`. This is then mapped over with the\n      // setter function of the lens.\n      return lens(function (y) {\n        return Identity(f(y));\n      })(x).value;\n    });\n  }();\n  /**\n   * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.18.0\n   * @category List\n   * @sig a -> b -> (a,b)\n   * @param {*} fst\n   * @param {*} snd\n   * @return {Array}\n   * @see R.objOf, R.of\n   * @example\n   *\n   *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n   */\n\n\n  var pair = _curry2(function pair(fst, snd) {\n    return [fst, snd];\n  });\n  /**\n   * Retrieve the value at a given path.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.0\n   * @category Object\n   * @sig [String] -> {k: v} -> v | Undefined\n   * @param {Array} path The path to use.\n   * @param {Object} obj The object to retrieve the nested property from.\n   * @return {*} The data at `path`.\n   * @see R.prop\n   * @example\n   *\n   *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n   *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n   */\n\n\n  var path = _curry2(function path(paths, obj) {\n    var val = obj;\n    var idx = 0;\n\n    while (idx < paths.length) {\n      if (val == null) {\n        return;\n      }\n\n      val = val[paths[idx]];\n      idx += 1;\n    }\n\n    return val;\n  });\n  /**\n   * If the given, non-null object has a value at the given path, returns the\n   * value at that path. Otherwise returns the provided default value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.18.0\n   * @category Object\n   * @sig a -> [String] -> Object -> a\n   * @param {*} d The default value.\n   * @param {Array} p The path to use.\n   * @param {Object} obj The object to retrieve the nested property from.\n   * @return {*} The data at `path` of the supplied object or the default value.\n   * @example\n   *\n   *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n   *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n   */\n\n\n  var pathOr = _curry3(function pathOr(d, p, obj) {\n    return defaultTo(d, path(p, obj));\n  });\n  /**\n   * Returns `true` if the specified object property at given path satisfies the\n   * given predicate; `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category Logic\n   * @sig (a -> Boolean) -> [String] -> Object -> Boolean\n   * @param {Function} pred\n   * @param {Array} propPath\n   * @param {*} obj\n   * @return {Boolean}\n   * @see R.propSatisfies, R.path\n   * @example\n   *\n   *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n   */\n\n\n  var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n    return propPath.length > 0 && pred(path(propPath, obj));\n  });\n  /**\n   * Returns a partial copy of an object containing only the keys specified. If\n   * the key does not exist, the property is ignored.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig [k] -> {k: v} -> {k: v}\n   * @param {Array} names an array of String property names to copy onto a new object\n   * @param {Object} obj The object to copy from\n   * @return {Object} A new object with only properties from `names` on it.\n   * @see R.omit, R.props\n   * @example\n   *\n   *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n   *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n   */\n\n\n  var pick = _curry2(function pick(names, obj) {\n    var result = {};\n    var idx = 0;\n\n    while (idx < names.length) {\n      if (names[idx] in obj) {\n        result[names[idx]] = obj[names[idx]];\n      }\n\n      idx += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Similar to `pick` except that this one includes a `key: undefined` pair for\n   * properties that don't exist.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig [k] -> {k: v} -> {k: v}\n   * @param {Array} names an array of String property names to copy onto a new object\n   * @param {Object} obj The object to copy from\n   * @return {Object} A new object with only properties from `names` on it.\n   * @see R.pick\n   * @example\n   *\n   *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n   *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n   */\n\n\n  var pickAll = _curry2(function pickAll(names, obj) {\n    var result = {};\n    var idx = 0;\n    var len = names.length;\n\n    while (idx < len) {\n      var name = names[idx];\n      result[name] = obj[name];\n      idx += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Returns a partial copy of an object containing only the keys that satisfy\n   * the supplied predicate.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Object\n   * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n   * @param {Function} pred A predicate to determine whether or not a key\n   *        should be included on the output object.\n   * @param {Object} obj The object to copy from\n   * @return {Object} A new object with only properties that satisfy `pred`\n   *         on it.\n   * @see R.pick, R.filter\n   * @example\n   *\n   *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n   *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n   */\n\n\n  var pickBy = _curry2(function pickBy(test, obj) {\n    var result = {};\n\n    for (var prop in obj) {\n      if (test(obj[prop], prop, obj)) {\n        result[prop] = obj[prop];\n      }\n    }\n\n    return result;\n  });\n  /**\n   * Returns a new list with the given element at the front, followed by the\n   * contents of the list.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig a -> [a] -> [a]\n   * @param {*} el The item to add to the head of the output list.\n   * @param {Array} list The array to add to the tail of the output list.\n   * @return {Array} A new array.\n   * @see R.append\n   * @example\n   *\n   *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n   */\n\n\n  var prepend = _curry2(function prepend(el, list) {\n    return _concat([el], list);\n  });\n  /**\n   * Returns a function that when supplied an object returns the indicated\n   * property of that object, if it exists.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig s -> {s: a} -> a | Undefined\n   * @param {String} p The property name\n   * @param {Object} obj The object to query\n   * @return {*} The value at `obj.p`.\n   * @see R.path\n   * @example\n   *\n   *      R.prop('x', {x: 100}); //=> 100\n   *      R.prop('x', {}); //=> undefined\n   */\n\n\n  var prop = _curry2(function prop(p, obj) {\n    return obj[p];\n  });\n  /**\n   * Returns `true` if the specified object property is of the given type;\n   * `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category Type\n   * @sig Type -> String -> Object -> Boolean\n   * @param {Function} type\n   * @param {String} name\n   * @param {*} obj\n   * @return {Boolean}\n   * @see R.is, R.propSatisfies\n   * @example\n   *\n   *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n   *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n   *      R.propIs(Number, 'x', {});            //=> false\n   */\n\n\n  var propIs = _curry3(function propIs(type, name, obj) {\n    return is(type, obj[name]);\n  });\n  /**\n   * If the given, non-null object has an own property with the specified name,\n   * returns the value of that property. Otherwise returns the provided default\n   * value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.6.0\n   * @category Object\n   * @sig a -> String -> Object -> a\n   * @param {*} val The default value.\n   * @param {String} p The name of the property to return.\n   * @param {Object} obj The object to query.\n   * @return {*} The value of given property of the supplied object or the default value.\n   * @example\n   *\n   *      var alice = {\n   *        name: 'ALICE',\n   *        age: 101\n   *      };\n   *      var favorite = R.prop('favoriteLibrary');\n   *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n   *\n   *      favorite(alice);  //=> undefined\n   *      favoriteWithDefault(alice);  //=> 'Ramda'\n   */\n\n\n  var propOr = _curry3(function propOr(val, p, obj) {\n    return obj != null && _has(p, obj) ? obj[p] : val;\n  });\n  /**\n   * Returns `true` if the specified object property satisfies the given\n   * predicate; `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category Logic\n   * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n   * @param {Function} pred\n   * @param {String} name\n   * @param {*} obj\n   * @return {Boolean}\n   * @see R.propEq, R.propIs\n   * @example\n   *\n   *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n   */\n\n\n  var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n    return pred(obj[name]);\n  });\n  /**\n   * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n   * order.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig [k] -> {k: v} -> [v]\n   * @param {Array} ps The property names to fetch\n   * @param {Object} obj The object to query\n   * @return {Array} The corresponding values or partially applied function.\n   * @example\n   *\n   *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n   *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n   *\n   *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n   *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n   */\n\n\n  var props = _curry2(function props(ps, obj) {\n    var len = ps.length;\n    var out = [];\n    var idx = 0;\n\n    while (idx < len) {\n      out[idx] = obj[ps[idx]];\n      idx += 1;\n    }\n\n    return out;\n  });\n  /**\n   * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig Number -> Number -> [Number]\n   * @param {Number} from The first number in the list.\n   * @param {Number} to One more than the last number in the list.\n   * @return {Array} The list of numbers in tthe set `[a, b)`.\n   * @example\n   *\n   *      R.range(1, 5);    //=> [1, 2, 3, 4]\n   *      R.range(50, 53);  //=> [50, 51, 52]\n   */\n\n\n  var range = _curry2(function range(from, to) {\n    if (!(_isNumber(from) && _isNumber(to))) {\n      throw new TypeError('Both arguments to range must be numbers');\n    }\n\n    var result = [];\n    var n = from;\n\n    while (n < to) {\n      result.push(n);\n      n += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Returns a single item by iterating through the list, successively calling\n   * the iterator function and passing it an accumulator value and the current\n   * value from the array, and then passing the result to the next call.\n   *\n   * Similar to `reduce`, except moves through the input list from the right to\n   * the left.\n   *\n   * The iterator function receives two values: *(acc, value)*\n   *\n   * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n   * arrays), unlike the native `Array.prototype.reduce` method. For more details\n   * on this behavior, see:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig (a,b -> a) -> a -> [b] -> a\n   * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n   *        current element from the array.\n   * @param {*} acc The accumulator value.\n   * @param {Array} list The list to iterate over.\n   * @return {*} The final, accumulated value.\n   * @see R.addIndex\n   * @example\n   *\n   *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n   *      var flattenPairs = (acc, pair) => acc.concat(pair);\n   *\n   *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n   */\n\n\n  var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n    var idx = list.length - 1;\n\n    while (idx >= 0) {\n      acc = fn(acc, list[idx]);\n      idx -= 1;\n    }\n\n    return acc;\n  });\n  /**\n   * Returns a value wrapped to indicate that it is the final value of the reduce\n   * and transduce functions. The returned value should be considered a black\n   * box: the internal structure is not guaranteed to be stable.\n   *\n   * Note: this optimization is unavailable to functions not explicitly listed\n   * above. For instance, it is not currently supported by reduceRight.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.15.0\n   * @category List\n   * @sig a -> *\n   * @param {*} x The final value of the reduce.\n   * @return {*} The wrapped value.\n   * @see R.reduce, R.transduce\n   * @example\n   *\n   *      R.reduce(\n   *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n   *        0,\n   *        [1, 2, 3, 4, 5]) // 10\n   */\n\n\n  var reduced = _curry1(_reduced);\n  /**\n   * Removes the sub-list of `list` starting at index `start` and containing\n   * `count` elements. _Note that this is not destructive_: it returns a copy of\n   * the list with the changes.\n   * <small>No lists have been harmed in the application of this function.</small>\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.2\n   * @category List\n   * @sig Number -> Number -> [a] -> [a]\n   * @param {Number} start The position to start removing elements\n   * @param {Number} count The number of elements to remove\n   * @param {Array} list The list to remove from\n   * @return {Array} A new Array with `count` elements from `start` removed.\n   * @example\n   *\n   *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n   */\n\n\n  var remove = _curry3(function remove(start, count, list) {\n    return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n  });\n  /**\n   * Replace a substring or regex match in a string with a replacement.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.7.0\n   * @category String\n   * @sig RegExp|String -> String -> String -> String\n   * @param {RegExp|String} pattern A regular expression or a substring to match.\n   * @param {String} replacement The string to replace the matches with.\n   * @param {String} str The String to do the search and replacement in.\n   * @return {String} The result.\n   * @example\n   *\n   *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n   *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n   *\n   *      // Use the \"g\" (global) flag to replace all occurrences:\n   *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n   */\n\n\n  var replace = _curry3(function replace(regex, replacement, str) {\n    return str.replace(regex, replacement);\n  });\n  /**\n   * Returns a new list or string with the elements or characters in reverse\n   * order.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig [a] -> [a]\n   * @sig String -> String\n   * @param {Array|String} list\n   * @return {Array|String}\n   * @example\n   *\n   *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n   *      R.reverse([1, 2]);     //=> [2, 1]\n   *      R.reverse([1]);        //=> [1]\n   *      R.reverse([]);         //=> []\n   *\n   *      R.reverse('abc');      //=> 'cba'\n   *      R.reverse('ab');       //=> 'ba'\n   *      R.reverse('a');        //=> 'a'\n   *      R.reverse('');         //=> ''\n   */\n\n\n  var reverse = _curry1(function reverse(list) {\n    return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n  });\n  /**\n   * Scan is similar to reduce, but returns a list of successively reduced values\n   * from the left\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category List\n   * @sig (a,b -> a) -> a -> [b] -> [a]\n   * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n   *        current element from the array\n   * @param {*} acc The accumulator value.\n   * @param {Array} list The list to iterate over.\n   * @return {Array} A list of all intermediately reduced values.\n   * @example\n   *\n   *      var numbers = [1, 2, 3, 4];\n   *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n   */\n\n\n  var scan = _curry3(function scan(fn, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    var result = [acc];\n\n    while (idx < len) {\n      acc = fn(acc, list[idx]);\n      result[idx + 1] = acc;\n      idx += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Returns the result of \"setting\" the portion of the given data structure\n   * focused by the given lens to the given value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category Object\n   * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n   * @sig Lens s a -> a -> s -> s\n   * @param {Lens} lens\n   * @param {*} v\n   * @param {*} x\n   * @return {*}\n   * @see R.prop, R.lensIndex, R.lensProp\n   * @example\n   *\n   *      var xLens = R.lensProp('x');\n   *\n   *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n   *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n   */\n\n\n  var set = _curry3(function set(lens, v, x) {\n    return over(lens, always(v), x);\n  });\n  /**\n   * Returns the elements of the given list or string (or object with a `slice`\n   * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n   *\n   * Dispatches to the `slice` method of the third argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.4\n   * @category List\n   * @sig Number -> Number -> [a] -> [a]\n   * @sig Number -> Number -> String -> String\n   * @param {Number} fromIndex The start index (inclusive).\n   * @param {Number} toIndex The end index (exclusive).\n   * @param {*} list\n   * @return {*}\n   * @example\n   *\n   *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n   *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n   *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n   *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n   *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n   */\n\n\n  var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n    return Array.prototype.slice.call(list, fromIndex, toIndex);\n  }));\n  /**\n   * Returns a copy of the list, sorted according to the comparator function,\n   * which should accept two values at a time and return a negative number if the\n   * first value is smaller, a positive number if it's larger, and zero if they\n   * are equal. Please note that this is a **copy** of the list. It does not\n   * modify the original.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig (a,a -> Number) -> [a] -> [a]\n   * @param {Function} comparator A sorting function :: a -> b -> Int\n   * @param {Array} list The list to sort\n   * @return {Array} a new array with its elements sorted by the comparator function.\n   * @example\n   *\n   *      var diff = function(a, b) { return a - b; };\n   *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n   */\n\n\n  var sort = _curry2(function sort(comparator, list) {\n    return _slice(list).sort(comparator);\n  });\n  /**\n   * Sorts the list according to the supplied function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig Ord b => (a -> b) -> [a] -> [a]\n   * @param {Function} fn\n   * @param {Array} list The list to sort.\n   * @return {Array} A new list sorted by the keys generated by `fn`.\n   * @example\n   *\n   *      var sortByFirstItem = R.sortBy(R.prop(0));\n   *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n   *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n   *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n   *      var alice = {\n   *        name: 'ALICE',\n   *        age: 101\n   *      };\n   *      var bob = {\n   *        name: 'Bob',\n   *        age: -10\n   *      };\n   *      var clara = {\n   *        name: 'clara',\n   *        age: 314.159\n   *      };\n   *      var people = [clara, bob, alice];\n   *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n   */\n\n\n  var sortBy = _curry2(function sortBy(fn, list) {\n    return _slice(list).sort(function (a, b) {\n      var aa = fn(a);\n      var bb = fn(b);\n      return aa < bb ? -1 : aa > bb ? 1 : 0;\n    });\n  });\n  /**\n   * Splits a given list or string at a given index.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category List\n   * @sig Number -> [a] -> [[a], [a]]\n   * @sig Number -> String -> [String, String]\n   * @param {Number} index The index where the array/string is split.\n   * @param {Array|String} array The array/string to be split.\n   * @return {Array}\n   * @example\n   *\n   *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n   *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n   *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n   */\n\n\n  var splitAt = _curry2(function splitAt(index, array) {\n    return [slice(0, index, array), slice(index, length(array), array)];\n  });\n  /**\n   * Splits a collection into slices of the specified length.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category List\n   * @sig Number -> [a] -> [[a]]\n   * @sig Number -> String -> [String]\n   * @param {Number} n\n   * @param {Array} list\n   * @return {Array}\n   * @example\n   *\n   *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n   *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n   */\n\n\n  var splitEvery = _curry2(function splitEvery(n, list) {\n    if (n <= 0) {\n      throw new Error('First argument to splitEvery must be a positive integer');\n    }\n\n    var result = [];\n    var idx = 0;\n\n    while (idx < list.length) {\n      result.push(slice(idx, idx += n, list));\n    }\n\n    return result;\n  });\n  /**\n   * Takes a list and a predicate and returns a pair of lists with the following properties:\n   *\n   *  - the result of concatenating the two output lists is equivalent to the input list;\n   *  - none of the elements of the first output list satisfies the predicate; and\n   *  - if the second output list is non-empty, its first element satisfies the predicate.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n   * @param {Function} pred The predicate that determines where the array is split.\n   * @param {Array} list The array to be split.\n   * @return {Array}\n   * @example\n   *\n   *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n   */\n\n\n  var splitWhen = _curry2(function splitWhen(pred, list) {\n    var idx = 0;\n    var len = list.length;\n    var prefix = [];\n\n    while (idx < len && !pred(list[idx])) {\n      prefix.push(list[idx]);\n      idx += 1;\n    }\n\n    return [prefix, _slice(list, idx)];\n  });\n  /**\n   * Subtracts its second argument from its first argument.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Math\n   * @sig Number -> Number -> Number\n   * @param {Number} a The first value.\n   * @param {Number} b The second value.\n   * @return {Number} The result of `a - b`.\n   * @see R.add\n   * @example\n   *\n   *      R.subtract(10, 8); //=> 2\n   *\n   *      var minus5 = R.subtract(R.__, 5);\n   *      minus5(17); //=> 12\n   *\n   *      var complementaryAngle = R.subtract(90);\n   *      complementaryAngle(30); //=> 60\n   *      complementaryAngle(72); //=> 18\n   */\n\n\n  var subtract = _curry2(function subtract(a, b) {\n    return Number(a) - Number(b);\n  });\n  /**\n   * Returns all but the first element of the given list or string (or object\n   * with a `tail` method).\n   *\n   * Dispatches to the `slice` method of the first argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig [a] -> [a]\n   * @sig String -> String\n   * @param {*} list\n   * @return {*}\n   * @see R.head, R.init, R.last\n   * @example\n   *\n   *      R.tail([1, 2, 3]);  //=> [2, 3]\n   *      R.tail([1, 2]);     //=> [2]\n   *      R.tail([1]);        //=> []\n   *      R.tail([]);         //=> []\n   *\n   *      R.tail('abc');  //=> 'bc'\n   *      R.tail('ab');   //=> 'b'\n   *      R.tail('a');    //=> ''\n   *      R.tail('');     //=> ''\n   */\n\n\n  var tail = _checkForMethod('tail', slice(1, Infinity));\n  /**\n   * Returns the first `n` elements of the given list, string, or\n   * transducer/transformer (or object with a `take` method).\n   *\n   * Dispatches to the `take` method of the second argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig Number -> [a] -> [a]\n   * @sig Number -> String -> String\n   * @param {Number} n\n   * @param {*} list\n   * @return {*}\n   * @see R.drop\n   * @example\n   *\n   *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n   *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n   *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n   *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n   *      R.take(3, 'ramda');               //=> 'ram'\n   *\n   *      var personnel = [\n   *        'Dave Brubeck',\n   *        'Paul Desmond',\n   *        'Eugene Wright',\n   *        'Joe Morello',\n   *        'Gerry Mulligan',\n   *        'Bob Bates',\n   *        'Joe Dodge',\n   *        'Ron Crotty'\n   *      ];\n   *\n   *      var takeFive = R.take(5);\n   *      takeFive(personnel);\n   *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n   */\n\n\n  var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n    return slice(0, n < 0 ? Infinity : n, xs);\n  }));\n  /**\n   * Returns a new list containing the last `n` elements of a given list, passing\n   * each value to the supplied predicate function, and terminating when the\n   * predicate function returns `false`. Excludes the element that caused the\n   * predicate function to fail. The predicate function is passed one argument:\n   * *(value)*.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> [a]\n   * @param {Function} fn The function called per iteration.\n   * @param {Array} list The collection to iterate over.\n   * @return {Array} A new array.\n   * @see R.dropLastWhile, R.addIndex\n   * @example\n   *\n   *      var isNotOne = x => x !== 1;\n   *\n   *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n   */\n\n\n  var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n    var idx = list.length - 1;\n\n    while (idx >= 0 && fn(list[idx])) {\n      idx -= 1;\n    }\n\n    return _slice(list, idx + 1, Infinity);\n  });\n  /**\n   * Returns a new list containing the first `n` elements of a given list,\n   * passing each value to the supplied predicate function, and terminating when\n   * the predicate function returns `false`. Excludes the element that caused the\n   * predicate function to fail. The predicate function is passed one argument:\n   * *(value)*.\n   *\n   * Dispatches to the `takeWhile` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> [a]\n   * @param {Function} fn The function called per iteration.\n   * @param {Array} list The collection to iterate over.\n   * @return {Array} A new array.\n   * @see R.dropWhile, R.transduce, R.addIndex\n   * @example\n   *\n   *      var isNotFour = x => x !== 4;\n   *\n   *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n   */\n\n\n  var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n    var idx = 0;\n    var len = list.length;\n\n    while (idx < len && fn(list[idx])) {\n      idx += 1;\n    }\n\n    return _slice(list, 0, idx);\n  }));\n  /**\n   * Runs the given function with the supplied object, then returns the object.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (a -> *) -> a -> a\n   * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n   * @param {*} x\n   * @return {*} `x`.\n   * @example\n   *\n   *      var sayX = x => console.log('x is ' + x);\n   *      R.tap(sayX, 100); //=> 100\n   *      // logs 'x is 100'\n   */\n\n\n  var tap = _curry2(function tap(fn, x) {\n    fn(x);\n    return x;\n  });\n  /**\n   * Calls an input function `n` times, returning an array containing the results\n   * of those function calls.\n   *\n   * `fn` is passed one argument: The current value of `n`, which begins at `0`\n   * and is gradually incremented to `n - 1`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.3\n   * @category List\n   * @sig (Number -> a) -> Number -> [a]\n   * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n   * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n   * @return {Array} An array containing the return values of all calls to `fn`.\n   * @example\n   *\n   *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n   */\n\n\n  var times = _curry2(function times(fn, n) {\n    var len = Number(n);\n    var idx = 0;\n    var list;\n\n    if (len < 0 || isNaN(len)) {\n      throw new RangeError('n must be a non-negative number');\n    }\n\n    list = new Array(len);\n\n    while (idx < len) {\n      list[idx] = fn(idx);\n      idx += 1;\n    }\n\n    return list;\n  });\n  /**\n   * Converts an object into an array of key, value arrays. Only the object's\n   * own properties are used.\n   * Note that the order of the output array is not guaranteed to be consistent\n   * across different JS platforms.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.4.0\n   * @category Object\n   * @sig {String: *} -> [[String,*]]\n   * @param {Object} obj The object to extract from\n   * @return {Array} An array of key, value arrays from the object's own properties.\n   * @see R.fromPairs\n   * @example\n   *\n   *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n   */\n\n\n  var toPairs = _curry1(function toPairs(obj) {\n    var pairs = [];\n\n    for (var prop in obj) {\n      if (_has(prop, obj)) {\n        pairs[pairs.length] = [prop, obj[prop]];\n      }\n    }\n\n    return pairs;\n  });\n  /**\n   * Converts an object into an array of key, value arrays. The object's own\n   * properties and prototype properties are used. Note that the order of the\n   * output array is not guaranteed to be consistent across different JS\n   * platforms.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.4.0\n   * @category Object\n   * @sig {String: *} -> [[String,*]]\n   * @param {Object} obj The object to extract from\n   * @return {Array} An array of key, value arrays from the object's own\n   *         and prototype properties.\n   * @example\n   *\n   *      var F = function() { this.x = 'X'; };\n   *      F.prototype.y = 'Y';\n   *      var f = new F();\n   *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n   */\n\n\n  var toPairsIn = _curry1(function toPairsIn(obj) {\n    var pairs = [];\n\n    for (var prop in obj) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n\n    return pairs;\n  });\n  /**\n   * Transposes the rows and columns of a 2D list.\n   * When passed a list of `n` lists of length `x`,\n   * returns a list of `x` lists of length `n`.\n   *\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category List\n   * @sig [[a]] -> [[a]]\n   * @param {Array} list A 2D list\n   * @return {Array} A 2D list\n   * @example\n   *\n   *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n   *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n   *\n   * If some of the rows are shorter than the following rows, their elements are skipped:\n   *\n   *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n   */\n\n\n  var transpose = _curry1(function transpose(outerlist) {\n    var i = 0;\n    var result = [];\n\n    while (i < outerlist.length) {\n      var innerlist = outerlist[i];\n      var j = 0;\n\n      while (j < innerlist.length) {\n        if (typeof result[j] === 'undefined') {\n          result[j] = [];\n        }\n\n        result[j].push(innerlist[j]);\n        j += 1;\n      }\n\n      i += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Removes (strips) whitespace from both ends of the string.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.6.0\n   * @category String\n   * @sig String -> String\n   * @param {String} str The string to trim.\n   * @return {String} Trimmed version of `str`.\n   * @example\n   *\n   *      R.trim('   xyz  '); //=> 'xyz'\n   *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n   */\n\n\n  var trim = function () {\n    var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n    var zeroWidth = '\\u200B';\n    var hasProtoTrim = typeof String.prototype.trim === 'function';\n\n    if (!hasProtoTrim || ws.trim() || !zeroWidth.trim()) {\n      return _curry1(function trim(str) {\n        var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n        var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n        return str.replace(beginRx, '').replace(endRx, '');\n      });\n    } else {\n      return _curry1(function trim(str) {\n        return str.trim();\n      });\n    }\n  }();\n  /**\n   * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n   * function evaluates the `tryer`; if it does not throw, it simply returns the\n   * result. If the `tryer` *does* throw, the returned function evaluates the\n   * `catcher` function and returns its result. Note that for effective\n   * composition with this function, both the `tryer` and `catcher` functions\n   * must return the same type of results.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.20.0\n   * @category Function\n   * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n   * @param {Function} tryer The function that may throw.\n   * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n   * @return {Function} A new function that will catch exceptions and send then to the catcher.\n   * @example\n   *\n   *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n   *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n   */\n\n\n  var tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n    return _arity(tryer.length, function () {\n      try {\n        return tryer.apply(this, arguments);\n      } catch (e) {\n        return catcher.apply(this, _concat([e], arguments));\n      }\n    });\n  });\n  /**\n   * Gives a single-word string description of the (native) type of a value,\n   * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n   * attempt to distinguish user Object types any further, reporting them all as\n   * 'Object'.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Type\n   * @sig (* -> {*}) -> String\n   * @param {*} val The value to test\n   * @return {String}\n   * @example\n   *\n   *      R.type({}); //=> \"Object\"\n   *      R.type(1); //=> \"Number\"\n   *      R.type(false); //=> \"Boolean\"\n   *      R.type('s'); //=> \"String\"\n   *      R.type(null); //=> \"Null\"\n   *      R.type([]); //=> \"Array\"\n   *      R.type(/[A-z]/); //=> \"RegExp\"\n   */\n\n\n  var type = _curry1(function type(val) {\n    return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n  });\n  /**\n   * Takes a function `fn`, which takes a single array argument, and returns a\n   * function which:\n   *\n   *   - takes any number of positional arguments;\n   *   - passes these arguments to `fn` as an array; and\n   *   - returns the result.\n   *\n   * In other words, R.unapply derives a variadic function from a function which\n   * takes an array. R.unapply is the inverse of R.apply.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Function\n   * @sig ([*...] -> a) -> (*... -> a)\n   * @param {Function} fn\n   * @return {Function}\n   * @see R.apply\n   * @example\n   *\n   *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n   */\n\n\n  var unapply = _curry1(function unapply(fn) {\n    return function () {\n      return fn(_slice(arguments));\n    };\n  });\n  /**\n   * Wraps a function of any arity (including nullary) in a function that accepts\n   * exactly 1 parameter. Any extraneous parameters will not be passed to the\n   * supplied function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.0\n   * @category Function\n   * @sig (* -> b) -> (a -> b)\n   * @param {Function} fn The function to wrap.\n   * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n   *         arity 1.\n   * @example\n   *\n   *      var takesTwoArgs = function(a, b) {\n   *        return [a, b];\n   *      };\n   *      takesTwoArgs.length; //=> 2\n   *      takesTwoArgs(1, 2); //=> [1, 2]\n   *\n   *      var takesOneArg = R.unary(takesTwoArgs);\n   *      takesOneArg.length; //=> 1\n   *      // Only 1 argument is passed to the wrapped function\n   *      takesOneArg(1, 2); //=> [1, undefined]\n   */\n\n\n  var unary = _curry1(function unary(fn) {\n    return nAry(1, fn);\n  });\n  /**\n   * Returns a function of arity `n` from a (manually) curried function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category Function\n   * @sig Number -> (a -> b) -> (a -> c)\n   * @param {Number} length The arity for the returned function.\n   * @param {Function} fn The function to uncurry.\n   * @return {Function} A new function.\n   * @see R.curry\n   * @example\n   *\n   *      var addFour = a => b => c => d => a + b + c + d;\n   *\n   *      var uncurriedAddFour = R.uncurryN(4, addFour);\n   *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n   */\n\n\n  var uncurryN = _curry2(function uncurryN(depth, fn) {\n    return curryN(depth, function () {\n      var currentDepth = 1;\n      var value = fn;\n      var idx = 0;\n      var endIdx;\n\n      while (currentDepth <= depth && typeof value === 'function') {\n        endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n        value = value.apply(this, _slice(arguments, idx, endIdx));\n        currentDepth += 1;\n        idx = endIdx;\n      }\n\n      return value;\n    });\n  });\n  /**\n   * Builds a list from a seed value. Accepts an iterator function, which returns\n   * either false to stop iteration or an array of length 2 containing the value\n   * to add to the resulting list and the seed to be used in the next call to the\n   * iterator function.\n   *\n   * The iterator function receives one argument: *(seed)*.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category List\n   * @sig (a -> [b]) -> * -> [b]\n   * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n   *        either false to quit iteration or an array of length two to proceed. The element\n   *        at index 0 of this array will be added to the resulting array, and the element\n   *        at index 1 will be passed to the next call to `fn`.\n   * @param {*} seed The seed value.\n   * @return {Array} The final list.\n   * @example\n   *\n   *      var f = n => n > 50 ? false : [-n, n + 10];\n   *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n   */\n\n\n  var unfold = _curry2(function unfold(fn, seed) {\n    var pair = fn(seed);\n    var result = [];\n\n    while (pair && pair.length) {\n      result[result.length] = pair[0];\n      pair = fn(pair[1]);\n    }\n\n    return result;\n  });\n  /**\n   * Returns a new list containing only one copy of each element in the original\n   * list, based upon the value returned by applying the supplied predicate to\n   * two list elements. Prefers the first item if two items compare equal based\n   * on the predicate.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.0\n   * @category List\n   * @sig (a, a -> Boolean) -> [a] -> [a]\n   * @param {Function} pred A predicate used to test whether two items are equal.\n   * @param {Array} list The array to consider.\n   * @return {Array} The list of unique items.\n   * @example\n   *\n   *      var strEq = R.eqBy(String);\n   *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n   *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n   *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n   *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n   */\n\n\n  var uniqWith = _curry2(function uniqWith(pred, list) {\n    var idx = 0;\n    var len = list.length;\n    var result = [];\n    var item;\n\n    while (idx < len) {\n      item = list[idx];\n\n      if (!_containsWith(pred, item, result)) {\n        result[result.length] = item;\n      }\n\n      idx += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Tests the final argument by passing it to the given predicate function. If\n   * the predicate is not satisfied, the function will return the result of\n   * calling the `whenFalseFn` function with the same argument. If the predicate\n   * is satisfied, the argument is returned as is.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.18.0\n   * @category Logic\n   * @sig (a -> Boolean) -> (a -> a) -> a -> a\n   * @param {Function} pred        A predicate function\n   * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n   *                               to a falsy value.\n   * @param {*}        x           An object to test with the `pred` function and\n   *                               pass to `whenFalseFn` if necessary.\n   * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n   * @see R.ifElse, R.when\n   * @example\n   *\n   *      // coerceArray :: (a|[a]) -> [a]\n   *      var coerceArray = R.unless(R.isArrayLike, R.of);\n   *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n   *      coerceArray(1);         //=> [1]\n   */\n\n\n  var unless = _curry3(function unless(pred, whenFalseFn, x) {\n    return pred(x) ? x : whenFalseFn(x);\n  });\n  /**\n   * Takes a predicate, a transformation function, and an initial value,\n   * and returns a value of the same type as the initial value.\n   * It does so by applying the transformation until the predicate is satisfied,\n   * at which point it returns the satisfactory value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.20.0\n   * @category Logic\n   * @sig (a -> Boolean) -> (a -> a) -> a -> a\n   * @param {Function} pred A predicate function\n   * @param {Function} fn The iterator function\n   * @param {*} init Initial value\n   * @return {*} Final value that satisfies predicate\n   * @example\n   *\n   *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n   */\n\n\n  var until = _curry3(function until(pred, fn, init) {\n    var val = init;\n\n    while (!pred(val)) {\n      val = fn(val);\n    }\n\n    return val;\n  });\n  /**\n   * Returns a new copy of the array with the element at the provided index\n   * replaced with the given value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category List\n   * @sig Number -> a -> [a] -> [a]\n   * @param {Number} idx The index to update.\n   * @param {*} x The value to exist at the given index of the returned array.\n   * @param {Array|Arguments} list The source array-like object to be updated.\n   * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n   * @see R.adjust\n   * @example\n   *\n   *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n   *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n   */\n\n\n  var update = _curry3(function update(idx, x, list) {\n    return adjust(always(x), idx, list);\n  });\n  /**\n   * Accepts a function `fn` and a list of transformer functions and returns a\n   * new curried function. When the new function is invoked, it calls the\n   * function `fn` with parameters consisting of the result of calling each\n   * supplied handler on successive arguments to the new function.\n   *\n   * If more arguments are passed to the returned function than transformer\n   * functions, those arguments are passed directly to `fn` as additional\n   * parameters. If you expect additional arguments that don't need to be\n   * transformed, although you can ignore them, it's best to pass an identity\n   * function so that the new function reports the correct arity.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n   * @param {Function} fn The function to wrap.\n   * @param {Array} transformers A list of transformer functions\n   * @return {Function} The wrapped function.\n   * @example\n   *\n   *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n   *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n   *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n   *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n   */\n\n\n  var useWith = _curry2(function useWith(fn, transformers) {\n    return curryN(transformers.length, function () {\n      var args = [];\n      var idx = 0;\n\n      while (idx < transformers.length) {\n        args.push(transformers[idx].call(this, arguments[idx]));\n        idx += 1;\n      }\n\n      return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n    });\n  });\n  /**\n   * Returns a list of all the enumerable own properties of the supplied object.\n   * Note that the order of the output array is not guaranteed across different\n   * JS platforms.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig {k: v} -> [v]\n   * @param {Object} obj The object to extract values from\n   * @return {Array} An array of the values of the object's own properties.\n   * @example\n   *\n   *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n   */\n\n\n  var values = _curry1(function values(obj) {\n    var props = keys(obj);\n    var len = props.length;\n    var vals = [];\n    var idx = 0;\n\n    while (idx < len) {\n      vals[idx] = obj[props[idx]];\n      idx += 1;\n    }\n\n    return vals;\n  });\n  /**\n   * Returns a list of all the properties, including prototype properties, of the\n   * supplied object.\n   * Note that the order of the output array is not guaranteed to be consistent\n   * across different JS platforms.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.0\n   * @category Object\n   * @sig {k: v} -> [v]\n   * @param {Object} obj The object to extract values from\n   * @return {Array} An array of the values of the object's own and prototype properties.\n   * @example\n   *\n   *      var F = function() { this.x = 'X'; };\n   *      F.prototype.y = 'Y';\n   *      var f = new F();\n   *      R.valuesIn(f); //=> ['X', 'Y']\n   */\n\n\n  var valuesIn = _curry1(function valuesIn(obj) {\n    var prop;\n    var vs = [];\n\n    for (prop in obj) {\n      vs[vs.length] = obj[prop];\n    }\n\n    return vs;\n  });\n  /**\n   * Returns a \"view\" of the given data structure, determined by the given lens.\n   * The lens's focus determines which portion of the data structure is visible.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category Object\n   * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n   * @sig Lens s a -> s -> a\n   * @param {Lens} lens\n   * @param {*} x\n   * @return {*}\n   * @see R.prop, R.lensIndex, R.lensProp\n   * @example\n   *\n   *      var xLens = R.lensProp('x');\n   *\n   *      R.view(xLens, {x: 1, y: 2});  //=> 1\n   *      R.view(xLens, {x: 4, y: 2});  //=> 4\n   */\n  // `Const` is a functor that effectively ignores the function given to `map`.\n  // Using `Const` effectively ignores the setter function of the `lens`,\n  // leaving the value returned by the getter function unmodified.\n\n\n  var view = function () {\n    // `Const` is a functor that effectively ignores the function given to `map`.\n    var Const = function (x) {\n      return {\n        value: x,\n        map: function () {\n          return this;\n        }\n      };\n    };\n\n    return _curry2(function view(lens, x) {\n      // Using `Const` effectively ignores the setter function of the `lens`,\n      // leaving the value returned by the getter function unmodified.\n      return lens(Const)(x).value;\n    });\n  }();\n  /**\n   * Tests the final argument by passing it to the given predicate function. If\n   * the predicate is satisfied, the function will return the result of calling\n   * the `whenTrueFn` function with the same argument. If the predicate is not\n   * satisfied, the argument is returned as is.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.18.0\n   * @category Logic\n   * @sig (a -> Boolean) -> (a -> a) -> a -> a\n   * @param {Function} pred       A predicate function\n   * @param {Function} whenTrueFn A function to invoke when the `condition`\n   *                              evaluates to a truthy value.\n   * @param {*}        x          An object to test with the `pred` function and\n   *                              pass to `whenTrueFn` if necessary.\n   * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n   * @see R.ifElse, R.unless\n   * @example\n   *\n   *      // truncate :: String -> String\n   *      var truncate = R.when(\n   *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n   *        R.pipe(R.take(10), R.append('…'), R.join(''))\n   *      );\n   *      truncate('12345');         //=> '12345'\n   *      truncate('0123456789ABC'); //=> '0123456789…'\n   */\n\n\n  var when = _curry3(function when(pred, whenTrueFn, x) {\n    return pred(x) ? whenTrueFn(x) : x;\n  });\n  /**\n   * Takes a spec object and a test object; returns true if the test satisfies\n   * the spec. Each of the spec's own properties must be a predicate function.\n   * Each predicate is applied to the value of the corresponding property of the\n   * test object. `where` returns true if all the predicates return true, false\n   * otherwise.\n   *\n   * `where` is well suited to declaratively expressing constraints for other\n   * functions such as `filter` and `find`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.1\n   * @category Object\n   * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n   * @param {Object} spec\n   * @param {Object} testObj\n   * @return {Boolean}\n   * @example\n   *\n   *      // pred :: Object -> Boolean\n   *      var pred = where({\n   *        a: equals('foo'),\n   *        b: complement(equals('bar')),\n   *        x: gt(__, 10),\n   *        y: lt(__, 20)\n   *      });\n   *\n   *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n   *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n   *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n   *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n   *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n   */\n\n\n  var where = _curry2(function where(spec, testObj) {\n    for (var prop in spec) {\n      if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n  /**\n   * Wrap a function inside another to allow you to make adjustments to the\n   * parameters, or do other processing either before the internal function is\n   * called or with its results.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n   * @param {Function} fn The function to wrap.\n   * @param {Function} wrapper The wrapper function.\n   * @return {Function} The wrapped function.\n   * @deprecated since v0.22.0\n   * @example\n   *\n   *      var greet = name => 'Hello ' + name;\n   *\n   *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n   *\n   *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n   *\n   *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n   *        return gr(name.substring(0, 3));\n   *      });\n   *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n   */\n\n\n  var wrap = _curry2(function wrap(fn, wrapper) {\n    return curryN(fn.length, function () {\n      return wrapper.apply(this, _concat([fn], arguments));\n    });\n  });\n  /**\n   * Creates a new list out of the two supplied by creating each possible pair\n   * from the lists.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig [a] -> [b] -> [[a,b]]\n   * @param {Array} as The first list.\n   * @param {Array} bs The second list.\n   * @return {Array} The list made by combining each possible pair from\n   *         `as` and `bs` into pairs (`[a, b]`).\n   * @example\n   *\n   *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n   */\n  // = xprodWith(prepend); (takes about 3 times as long...)\n\n\n  var xprod = _curry2(function xprod(a, b) {\n    // = xprodWith(prepend); (takes about 3 times as long...)\n    var idx = 0;\n    var ilen = a.length;\n    var j;\n    var jlen = b.length;\n    var result = [];\n\n    while (idx < ilen) {\n      j = 0;\n\n      while (j < jlen) {\n        result[result.length] = [a[idx], b[j]];\n        j += 1;\n      }\n\n      idx += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Creates a new list out of the two supplied by pairing up equally-positioned\n   * items from both lists. The returned list is truncated to the length of the\n   * shorter of the two input lists.\n   * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig [a] -> [b] -> [[a,b]]\n   * @param {Array} list1 The first array to consider.\n   * @param {Array} list2 The second array to consider.\n   * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n   * @example\n   *\n   *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n   */\n\n\n  var zip = _curry2(function zip(a, b) {\n    var rv = [];\n    var idx = 0;\n    var len = Math.min(a.length, b.length);\n\n    while (idx < len) {\n      rv[idx] = [a[idx], b[idx]];\n      idx += 1;\n    }\n\n    return rv;\n  });\n  /**\n   * Creates a new object out of a list of keys and a list of values.\n   * Key/value pairing is truncated to the length of the shorter of the two lists.\n   * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category List\n   * @sig [String] -> [*] -> {String: *}\n   * @param {Array} keys The array that will be properties on the output object.\n   * @param {Array} values The list of values on the output object.\n   * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n   * @example\n   *\n   *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n   */\n\n\n  var zipObj = _curry2(function zipObj(keys, values) {\n    var idx = 0;\n    var len = Math.min(keys.length, values.length);\n    var out = {};\n\n    while (idx < len) {\n      out[keys[idx]] = values[idx];\n      idx += 1;\n    }\n\n    return out;\n  });\n  /**\n   * Creates a new list out of the two supplied by applying the function to each\n   * equally-positioned pair in the lists. The returned list is truncated to the\n   * length of the shorter of the two input lists.\n   *\n   * @function\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig (a,b -> c) -> [a] -> [b] -> [c]\n   * @param {Function} fn The function used to combine the two elements into one value.\n   * @param {Array} list1 The first array to consider.\n   * @param {Array} list2 The second array to consider.\n   * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n   *         using `fn`.\n   * @example\n   *\n   *      var f = (x, y) => {\n   *        // ...\n   *      };\n   *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n   *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n   */\n\n\n  var zipWith = _curry3(function zipWith(fn, a, b) {\n    var rv = [];\n    var idx = 0;\n    var len = Math.min(a.length, b.length);\n\n    while (idx < len) {\n      rv[idx] = fn(a[idx], b[idx]);\n      idx += 1;\n    }\n\n    return rv;\n  });\n  /**\n   * A function that always returns `false`. Any passed in parameters are ignored.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Function\n   * @sig * -> Boolean\n   * @param {*}\n   * @return {Boolean}\n   * @see R.always, R.T\n   * @example\n   *\n   *      R.F(); //=> false\n   */\n\n\n  var F = always(false);\n  /**\n   * A function that always returns `true`. Any passed in parameters are ignored.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Function\n   * @sig * -> Boolean\n   * @param {*}\n   * @return {Boolean}\n   * @see R.always, R.F\n   * @example\n   *\n   *      R.T(); //=> true\n   */\n\n  var T = always(true);\n  /**\n   * Copies an object.\n   *\n   * @private\n   * @param {*} value The value to be copied\n   * @param {Array} refFrom Array containing the source references\n   * @param {Array} refTo Array containing the copied source references\n   * @param {Boolean} deep Whether or not to perform deep cloning.\n   * @return {*} The copied value.\n   */\n\n  var _clone = function _clone(value, refFrom, refTo, deep) {\n    var copy = function copy(copiedValue) {\n      var len = refFrom.length;\n      var idx = 0;\n\n      while (idx < len) {\n        if (value === refFrom[idx]) {\n          return refTo[idx];\n        }\n\n        idx += 1;\n      }\n\n      refFrom[idx + 1] = value;\n      refTo[idx + 1] = copiedValue;\n\n      for (var key in value) {\n        copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n      }\n\n      return copiedValue;\n    };\n\n    switch (type(value)) {\n      case 'Object':\n        return copy({});\n\n      case 'Array':\n        return copy([]);\n\n      case 'Date':\n        return new Date(value.valueOf());\n\n      case 'RegExp':\n        return _cloneRegExp(value);\n\n      default:\n        return value;\n    }\n  };\n\n  var _createPartialApplicator = function _createPartialApplicator(concat) {\n    return _curry2(function (fn, args) {\n      return _arity(Math.max(0, fn.length - args.length), function () {\n        return fn.apply(this, concat(args, arguments));\n      });\n    });\n  };\n\n  var _dropLast = function dropLast(n, xs) {\n    return take(n < xs.length ? xs.length - n : 0, xs);\n  }; // Values of other types are only equal if identical.\n\n\n  var _equals = function _equals(a, b, stackA, stackB) {\n    if (identical(a, b)) {\n      return true;\n    }\n\n    if (type(a) !== type(b)) {\n      return false;\n    }\n\n    if (a == null || b == null) {\n      return false;\n    }\n\n    if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n      return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n    }\n\n    switch (type(a)) {\n      case 'Arguments':\n      case 'Array':\n      case 'Object':\n        if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n          return a === b;\n        }\n\n        break;\n\n      case 'Boolean':\n      case 'Number':\n      case 'String':\n        if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n          return false;\n        }\n\n        break;\n\n      case 'Date':\n        if (!identical(a.valueOf(), b.valueOf())) {\n          return false;\n        }\n\n        break;\n\n      case 'Error':\n        return a.name === b.name && a.message === b.message;\n\n      case 'RegExp':\n        if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n          return false;\n        }\n\n        break;\n\n      case 'Map':\n      case 'Set':\n        if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n          return false;\n        }\n\n        break;\n\n      case 'Int8Array':\n      case 'Uint8Array':\n      case 'Uint8ClampedArray':\n      case 'Int16Array':\n      case 'Uint16Array':\n      case 'Int32Array':\n      case 'Uint32Array':\n      case 'Float32Array':\n      case 'Float64Array':\n        break;\n\n      case 'ArrayBuffer':\n        break;\n\n      default:\n        // Values of other types are only equal if identical.\n        return false;\n    }\n\n    var keysA = keys(a);\n\n    if (keysA.length !== keys(b).length) {\n      return false;\n    }\n\n    var idx = stackA.length - 1;\n\n    while (idx >= 0) {\n      if (stackA[idx] === a) {\n        return stackB[idx] === b;\n      }\n\n      idx -= 1;\n    }\n\n    stackA.push(a);\n    stackB.push(b);\n    idx = keysA.length - 1;\n\n    while (idx >= 0) {\n      var key = keysA[idx];\n\n      if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n        return false;\n      }\n\n      idx -= 1;\n    }\n\n    stackA.pop();\n    stackB.pop();\n    return true;\n  };\n  /**\n   * `_makeFlat` is a helper function that returns a one-level or fully recursive\n   * function based on the flag passed in.\n   *\n   * @private\n   */\n\n\n  var _makeFlat = function _makeFlat(recursive) {\n    return function flatt(list) {\n      var value, jlen, j;\n      var result = [];\n      var idx = 0;\n      var ilen = list.length;\n\n      while (idx < ilen) {\n        if (isArrayLike(list[idx])) {\n          value = recursive ? flatt(list[idx]) : list[idx];\n          j = 0;\n          jlen = value.length;\n\n          while (j < jlen) {\n            result[result.length] = value[j];\n            j += 1;\n          }\n        } else {\n          result[result.length] = list[idx];\n        }\n\n        idx += 1;\n      }\n\n      return result;\n    };\n  };\n\n  var _reduce = function () {\n    function _arrayReduce(xf, acc, list) {\n      var idx = 0;\n      var len = list.length;\n\n      while (idx < len) {\n        acc = xf['@@transducer/step'](acc, list[idx]);\n\n        if (acc && acc['@@transducer/reduced']) {\n          acc = acc['@@transducer/value'];\n          break;\n        }\n\n        idx += 1;\n      }\n\n      return xf['@@transducer/result'](acc);\n    }\n\n    function _iterableReduce(xf, acc, iter) {\n      var step = iter.next();\n\n      while (!step.done) {\n        acc = xf['@@transducer/step'](acc, step.value);\n\n        if (acc && acc['@@transducer/reduced']) {\n          acc = acc['@@transducer/value'];\n          break;\n        }\n\n        step = iter.next();\n      }\n\n      return xf['@@transducer/result'](acc);\n    }\n\n    function _methodReduce(xf, acc, obj) {\n      return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n    }\n\n    var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n    return function _reduce(fn, acc, list) {\n      if (typeof fn === 'function') {\n        fn = _xwrap(fn);\n      }\n\n      if (isArrayLike(list)) {\n        return _arrayReduce(fn, acc, list);\n      }\n\n      if (typeof list.reduce === 'function') {\n        return _methodReduce(fn, acc, list);\n      }\n\n      if (list[symIterator] != null) {\n        return _iterableReduce(fn, acc, list[symIterator]());\n      }\n\n      if (typeof list.next === 'function') {\n        return _iterableReduce(fn, acc, list);\n      }\n\n      throw new TypeError('reduce: list must be array or iterable');\n    };\n  }();\n\n  var _stepCat = function () {\n    var _stepCatArray = {\n      '@@transducer/init': Array,\n      '@@transducer/step': function (xs, x) {\n        xs.push(x);\n        return xs;\n      },\n      '@@transducer/result': _identity\n    };\n    var _stepCatString = {\n      '@@transducer/init': String,\n      '@@transducer/step': function (a, b) {\n        return a + b;\n      },\n      '@@transducer/result': _identity\n    };\n    var _stepCatObject = {\n      '@@transducer/init': Object,\n      '@@transducer/step': function (result, input) {\n        return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);\n      },\n      '@@transducer/result': _identity\n    };\n    return function _stepCat(obj) {\n      if (_isTransformer(obj)) {\n        return obj;\n      }\n\n      if (isArrayLike(obj)) {\n        return _stepCatArray;\n      }\n\n      if (typeof obj === 'string') {\n        return _stepCatString;\n      }\n\n      if (typeof obj === 'object') {\n        return _stepCatObject;\n      }\n\n      throw new Error('Cannot create transformer for ' + obj);\n    };\n  }();\n\n  var _xdropLastWhile = function () {\n    function XDropLastWhile(fn, xf) {\n      this.f = fn;\n      this.retained = [];\n      this.xf = xf;\n    }\n\n    XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n\n    XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n      this.retained = null;\n      return this.xf['@@transducer/result'](result);\n    };\n\n    XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n      return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n    };\n\n    XDropLastWhile.prototype.flush = function (result, input) {\n      result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n      this.retained = [];\n      return this.xf['@@transducer/step'](result, input);\n    };\n\n    XDropLastWhile.prototype.retain = function (result, input) {\n      this.retained.push(input);\n      return result;\n    };\n\n    return _curry2(function _xdropLastWhile(fn, xf) {\n      return new XDropLastWhile(fn, xf);\n    });\n  }();\n  /**\n   * Creates a new list iteration function from an existing one by adding two new\n   * parameters to its callback function: the current index, and the entire list.\n   *\n   * This would turn, for instance, Ramda's simple `map` function into one that\n   * more closely resembles `Array.prototype.map`. Note that this will only work\n   * for functions in which the iteration callback function is the first\n   * parameter, and where the list is the last parameter. (This latter might be\n   * unimportant if the list parameter is not used.)\n   *\n   * @func\n   * @memberOf R\n   * @since v0.15.0\n   * @category Function\n   * @category List\n   * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n   * @param {Function} fn A list iteration function that does not pass index or list to its callback\n   * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n   * @example\n   *\n   *      var mapIndexed = R.addIndex(R.map);\n   *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n   *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n   */\n\n\n  var addIndex = _curry1(function addIndex(fn) {\n    return curryN(fn.length, function () {\n      var idx = 0;\n      var origFn = arguments[0];\n      var list = arguments[arguments.length - 1];\n\n      var args = _slice(arguments);\n\n      args[0] = function () {\n        var result = origFn.apply(this, _concat(arguments, [idx, list]));\n        idx += 1;\n        return result;\n      };\n\n      return fn.apply(this, args);\n    });\n  });\n  /**\n   * Wraps a function of any arity (including nullary) in a function that accepts\n   * exactly 2 parameters. Any extraneous parameters will not be passed to the\n   * supplied function.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.2.0\n   * @category Function\n   * @sig (* -> c) -> (a, b -> c)\n   * @param {Function} fn The function to wrap.\n   * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n   *         arity 2.\n   * @example\n   *\n   *      var takesThreeArgs = function(a, b, c) {\n   *        return [a, b, c];\n   *      };\n   *      takesThreeArgs.length; //=> 3\n   *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n   *\n   *      var takesTwoArgs = R.binary(takesThreeArgs);\n   *      takesTwoArgs.length; //=> 2\n   *      // Only 2 arguments are passed to the wrapped function\n   *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n   */\n\n\n  var binary = _curry1(function binary(fn) {\n    return nAry(2, fn);\n  });\n  /**\n   * Creates a deep copy of the value which may contain (nested) `Array`s and\n   * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n   * copied, but assigned by their reference.\n   *\n   * Dispatches to a `clone` method if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig {*} -> {*}\n   * @param {*} value The object or array to clone\n   * @return {*} A new object or array.\n   * @example\n   *\n   *      var objects = [{}, {}, {}];\n   *      var objectsClone = R.clone(objects);\n   *      objects[0] === objectsClone[0]; //=> false\n   */\n\n\n  var clone = _curry1(function clone(value) {\n    return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);\n  });\n  /**\n   * Returns a curried equivalent of the provided function. The curried function\n   * has two unusual capabilities. First, its arguments needn't be provided one\n   * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n   * following are equivalent:\n   *\n   *   - `g(1)(2)(3)`\n   *   - `g(1)(2, 3)`\n   *   - `g(1, 2)(3)`\n   *   - `g(1, 2, 3)`\n   *\n   * Secondly, the special placeholder value `R.__` may be used to specify\n   * \"gaps\", allowing partial application of any combination of arguments,\n   * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n   * following are equivalent:\n   *\n   *   - `g(1, 2, 3)`\n   *   - `g(_, 2, 3)(1)`\n   *   - `g(_, _, 3)(1)(2)`\n   *   - `g(_, _, 3)(1, 2)`\n   *   - `g(_, 2)(1)(3)`\n   *   - `g(_, 2)(1, 3)`\n   *   - `g(_, 2)(_, 3)(1)`\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (* -> a) -> (* -> a)\n   * @param {Function} fn The function to curry.\n   * @return {Function} A new, curried function.\n   * @see R.curryN\n   * @example\n   *\n   *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n   *\n   *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n   *      var f = curriedAddFourNumbers(1, 2);\n   *      var g = f(3);\n   *      g(4); //=> 10\n   */\n\n\n  var curry = _curry1(function curry(fn) {\n    return curryN(fn.length, fn);\n  });\n  /**\n   * Returns all but the first `n` elements of the given list, string, or\n   * transducer/transformer (or object with a `drop` method).\n   *\n   * Dispatches to the `drop` method of the second argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig Number -> [a] -> [a]\n   * @sig Number -> String -> String\n   * @param {Number} n\n   * @param {*} list\n   * @return {*}\n   * @see R.take, R.transduce\n   * @example\n   *\n   *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n   *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n   *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n   *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n   *      R.drop(3, 'ramda');               //=> 'da'\n   */\n\n\n  var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n    return slice(Math.max(0, n), Infinity, xs);\n  }));\n  /**\n   * Returns a list containing all but the last `n` elements of the given `list`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category List\n   * @sig Number -> [a] -> [a]\n   * @sig Number -> String -> String\n   * @param {Number} n The number of elements of `xs` to skip.\n   * @param {Array} xs The collection to consider.\n   * @return {Array}\n   * @see R.takeLast\n   * @example\n   *\n   *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n   *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n   *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n   *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n   *      R.dropLast(3, 'ramda');               //=> 'ra'\n   */\n\n\n  var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));\n  /**\n   * Returns a new list excluding all the tailing elements of a given list which\n   * satisfy the supplied predicate function. It passes each value from the right\n   * to the supplied predicate function, skipping elements while the predicate\n   * function returns `true`. The predicate function is applied to one argument:\n   * *(value)*.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category List\n   * @sig (a -> Boolean) -> [a] -> [a]\n   * @param {Function} fn The function called per iteration.\n   * @param {Array} list The collection to iterate over.\n   * @return {Array} A new array.\n   * @see R.takeLastWhile, R.addIndex\n   * @example\n   *\n   *      var lteThree = x => x <= 3;\n   *\n   *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n   */\n\n\n  var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));\n  /**\n   * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n   * cyclical data structures.\n   *\n   * Dispatches symmetrically to the `equals` methods of both arguments, if\n   * present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.15.0\n   * @category Relation\n   * @sig a -> b -> Boolean\n   * @param {*} a\n   * @param {*} b\n   * @return {Boolean}\n   * @example\n   *\n   *      R.equals(1, 1); //=> true\n   *      R.equals(1, '1'); //=> false\n   *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n   *\n   *      var a = {}; a.v = a;\n   *      var b = {}; b.v = b;\n   *      R.equals(a, b); //=> true\n   */\n\n\n  var equals = _curry2(function equals(a, b) {\n    return _equals(a, b, [], []);\n  });\n  /**\n   * Takes a predicate and a \"filterable\", and returns a new filterable of the\n   * same type containing the members of the given filterable which satisfy the\n   * given predicate.\n   *\n   * Dispatches to the `filter` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig Filterable f => (a -> Boolean) -> f a -> f a\n   * @param {Function} pred\n   * @param {Array} filterable\n   * @return {Array}\n   * @see R.reject, R.transduce, R.addIndex\n   * @example\n   *\n   *      var isEven = n => n % 2 === 0;\n   *\n   *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n   *\n   *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n   */\n  // else\n\n\n  var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {\n    return _isObject(filterable) ? _reduce(function (acc, key) {\n      if (pred(filterable[key])) {\n        acc[key] = filterable[key];\n      }\n\n      return acc;\n    }, {}, keys(filterable)) : // else\n    _filter(pred, filterable);\n  }));\n  /**\n   * Returns a new list by pulling every item out of it (and all its sub-arrays)\n   * and putting them in a new array, depth-first.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig [a] -> [b]\n   * @param {Array} list The array to consider.\n   * @return {Array} The flattened list.\n   * @see R.unnest\n   * @example\n   *\n   *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n   *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n   */\n\n\n  var flatten = _curry1(_makeFlat(true));\n  /**\n   * Returns a new function much like the supplied one, except that the first two\n   * arguments' order is reversed.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n   * @param {Function} fn The function to invoke with its first two parameters reversed.\n   * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n   * @example\n   *\n   *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n   *\n   *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n   *\n   *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n   */\n\n\n  var flip = _curry1(function flip(fn) {\n    return curry(function (a, b) {\n      var args = _slice(arguments);\n\n      args[0] = b;\n      args[1] = a;\n      return fn.apply(this, args);\n    });\n  });\n  /**\n   * Returns the first element of the given list or string. In some libraries\n   * this function is named `first`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig [a] -> a | Undefined\n   * @sig String -> String\n   * @param {Array|String} list\n   * @return {*}\n   * @see R.tail, R.init, R.last\n   * @example\n   *\n   *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n   *      R.head([]); //=> undefined\n   *\n   *      R.head('abc'); //=> 'a'\n   *      R.head(''); //=> ''\n   */\n\n\n  var head = nth(0);\n  /**\n   * Returns all but the last element of the given list or string.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category List\n   * @sig [a] -> [a]\n   * @sig String -> String\n   * @param {*} list\n   * @return {*}\n   * @see R.last, R.head, R.tail\n   * @example\n   *\n   *      R.init([1, 2, 3]);  //=> [1, 2]\n   *      R.init([1, 2]);     //=> [1]\n   *      R.init([1]);        //=> []\n   *      R.init([]);         //=> []\n   *\n   *      R.init('abc');  //=> 'ab'\n   *      R.init('ab');   //=> 'a'\n   *      R.init('a');    //=> ''\n   *      R.init('');     //=> ''\n   */\n\n  var init = slice(0, -1);\n  /**\n   * Combines two lists into a set (i.e. no duplicates) composed of those\n   * elements common to both lists. Duplication is determined according to the\n   * value returned by applying the supplied predicate to two list elements.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n   * @param {Function} pred A predicate function that determines whether\n   *        the two supplied elements are equal.\n   * @param {Array} list1 One list of items to compare\n   * @param {Array} list2 A second list of items to compare\n   * @return {Array} A new list containing those elements common to both lists.\n   * @see R.intersection\n   * @example\n   *\n   *      var buffaloSpringfield = [\n   *        {id: 824, name: 'Richie Furay'},\n   *        {id: 956, name: 'Dewey Martin'},\n   *        {id: 313, name: 'Bruce Palmer'},\n   *        {id: 456, name: 'Stephen Stills'},\n   *        {id: 177, name: 'Neil Young'}\n   *      ];\n   *      var csny = [\n   *        {id: 204, name: 'David Crosby'},\n   *        {id: 456, name: 'Stephen Stills'},\n   *        {id: 539, name: 'Graham Nash'},\n   *        {id: 177, name: 'Neil Young'}\n   *      ];\n   *\n   *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n   *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n   */\n\n  var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n    var lookupList, filteredList;\n\n    if (list1.length > list2.length) {\n      lookupList = list1;\n      filteredList = list2;\n    } else {\n      lookupList = list2;\n      filteredList = list1;\n    }\n\n    var results = [];\n    var idx = 0;\n\n    while (idx < filteredList.length) {\n      if (_containsWith(pred, filteredList[idx], lookupList)) {\n        results[results.length] = filteredList[idx];\n      }\n\n      idx += 1;\n    }\n\n    return uniqWith(pred, results);\n  });\n  /**\n   * Transforms the items of the list with the transducer and appends the\n   * transformed items to the accumulator using an appropriate iterator function\n   * based on the accumulator type.\n   *\n   * The accumulator can be an array, string, object or a transformer. Iterated\n   * items will be appended to arrays and concatenated to strings. Objects will\n   * be merged directly or 2-item arrays will be merged as key, value pairs.\n   *\n   * The accumulator can also be a transformer object that provides a 2-arity\n   * reducing iterator function, step, 0-arity initial value function, init, and\n   * 1-arity result extraction function result. The step function is used as the\n   * iterator function in reduce. The result function is used to convert the\n   * final accumulator into the return type and in most cases is R.identity. The\n   * init function is used to provide the initial accumulator.\n   *\n   * The iteration is performed with R.reduce after initializing the transducer.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.12.0\n   * @category List\n   * @sig a -> (b -> b) -> [c] -> a\n   * @param {*} acc The initial accumulator value.\n   * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n   * @param {Array} list The list to iterate over.\n   * @return {*} The final, accumulated value.\n   * @example\n   *\n   *      var numbers = [1, 2, 3, 4];\n   *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n   *\n   *      R.into([], transducer, numbers); //=> [2, 3]\n   *\n   *      var intoArray = R.into([]);\n   *      intoArray(transducer, numbers); //=> [2, 3]\n   */\n\n\n  var into = _curry3(function into(acc, xf, list) {\n    return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n  });\n  /**\n   * Same as R.invertObj, however this accounts for objects with duplicate values\n   * by putting the values into an array.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Object\n   * @sig {s: x} -> {x: [ s, ... ]}\n   * @param {Object} obj The object or array to invert\n   * @return {Object} out A new object with keys\n   * in an array.\n   * @example\n   *\n   *      var raceResultsByFirstName = {\n   *        first: 'alice',\n   *        second: 'jake',\n   *        third: 'alice',\n   *      };\n   *      R.invert(raceResultsByFirstName);\n   *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n   */\n\n\n  var invert = _curry1(function invert(obj) {\n    var props = keys(obj);\n    var len = props.length;\n    var idx = 0;\n    var out = {};\n\n    while (idx < len) {\n      var key = props[idx];\n      var val = obj[key];\n      var list = _has(val, out) ? out[val] : out[val] = [];\n      list[list.length] = key;\n      idx += 1;\n    }\n\n    return out;\n  });\n  /**\n   * Returns a new object with the keys of the given object as values, and the\n   * values of the given object, which are coerced to strings, as keys. Note\n   * that the last key found is preferred when handling the same value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Object\n   * @sig {s: x} -> {x: s}\n   * @param {Object} obj The object or array to invert\n   * @return {Object} out A new object\n   * @example\n   *\n   *      var raceResults = {\n   *        first: 'alice',\n   *        second: 'jake'\n   *      };\n   *      R.invertObj(raceResults);\n   *      //=> { 'alice': 'first', 'jake':'second' }\n   *\n   *      // Alternatively:\n   *      var raceResults = ['alice', 'jake'];\n   *      R.invertObj(raceResults);\n   *      //=> { 'alice': '0', 'jake':'1' }\n   */\n\n\n  var invertObj = _curry1(function invertObj(obj) {\n    var props = keys(obj);\n    var len = props.length;\n    var idx = 0;\n    var out = {};\n\n    while (idx < len) {\n      var key = props[idx];\n      out[obj[key]] = key;\n      idx += 1;\n    }\n\n    return out;\n  });\n  /**\n   * Returns `true` if the given value is its type's empty value; `false`\n   * otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Logic\n   * @sig a -> Boolean\n   * @param {*} x\n   * @return {Boolean}\n   * @see R.empty\n   * @example\n   *\n   *      R.isEmpty([1, 2, 3]);   //=> false\n   *      R.isEmpty([]);          //=> true\n   *      R.isEmpty('');          //=> true\n   *      R.isEmpty(null);        //=> false\n   *      R.isEmpty({});          //=> true\n   *      R.isEmpty({length: 0}); //=> false\n   */\n\n\n  var isEmpty = _curry1(function isEmpty(x) {\n    return x != null && equals(x, empty(x));\n  });\n  /**\n   * Returns the last element of the given list or string.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.4\n   * @category List\n   * @sig [a] -> a | Undefined\n   * @sig String -> String\n   * @param {*} list\n   * @return {*}\n   * @see R.init, R.head, R.tail\n   * @example\n   *\n   *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n   *      R.last([]); //=> undefined\n   *\n   *      R.last('abc'); //=> 'c'\n   *      R.last(''); //=> ''\n   */\n\n\n  var last = nth(-1);\n  /**\n   * Returns the position of the last occurrence of an item in an array, or -1 if\n   * the item is not included in the array. `R.equals` is used to determine\n   * equality.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig a -> [a] -> Number\n   * @param {*} target The item to find.\n   * @param {Array} xs The array to search in.\n   * @return {Number} the index of the target, or -1 if the target is not found.\n   * @see R.indexOf\n   * @example\n   *\n   *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n   *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n   */\n\n  var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n    if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n      return xs.lastIndexOf(target);\n    } else {\n      var idx = xs.length - 1;\n\n      while (idx >= 0) {\n        if (equals(xs[idx], target)) {\n          return idx;\n        }\n\n        idx -= 1;\n      }\n\n      return -1;\n    }\n  });\n  /**\n   * Takes a function and\n   * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n   * applies the function to each of the functor's values, and returns\n   * a functor of the same shape.\n   *\n   * Ramda provides suitable `map` implementations for `Array` and `Object`,\n   * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n   *\n   * Dispatches to the `map` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * Also treats functions as functors and will compose them together.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig Functor f => (a -> b) -> f a -> f b\n   * @param {Function} fn The function to be called on every element of the input `list`.\n   * @param {Array} list The list to be iterated over.\n   * @return {Array} The new list.\n   * @see R.transduce, R.addIndex\n   * @example\n   *\n   *      var double = x => x * 2;\n   *\n   *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n   *\n   *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n   */\n\n\n  var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n    switch (Object.prototype.toString.call(functor)) {\n      case '[object Function]':\n        return curryN(functor.length, function () {\n          return fn.call(this, functor.apply(this, arguments));\n        });\n\n      case '[object Object]':\n        return _reduce(function (acc, key) {\n          acc[key] = fn(functor[key]);\n          return acc;\n        }, {}, keys(functor));\n\n      default:\n        return _map(fn, functor);\n    }\n  }));\n  /**\n   * An Object-specific version of `map`. The function is applied to three\n   * arguments: *(value, key, obj)*. If only the value is significant, use\n   * `map` instead.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Object\n   * @sig ((*, String, Object) -> *) -> Object -> Object\n   * @param {Function} fn\n   * @param {Object} obj\n   * @return {Object}\n   * @see R.map\n   * @example\n   *\n   *      var values = { x: 1, y: 2, z: 3 };\n   *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n   *\n   *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n   */\n\n\n  var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n    return _reduce(function (acc, key) {\n      acc[key] = fn(obj[key], key, obj);\n      return acc;\n    }, {}, keys(obj));\n  });\n  /**\n   * Creates a new object with the own properties of the two provided objects. If\n   * a key exists in both objects, the provided function is applied to the values\n   * associated with the key in each object, with the result being used as the\n   * value associated with the key in the returned object. The key will be\n   * excluded from the returned object if the resulting value is `undefined`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category Object\n   * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n   * @param {Function} fn\n   * @param {Object} l\n   * @param {Object} r\n   * @return {Object}\n   * @see R.merge, R.mergeWithKey\n   * @example\n   *\n   *      R.mergeWith(R.concat,\n   *                  { a: true, values: [10, 20] },\n   *                  { b: true, values: [15, 35] });\n   *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n   */\n\n\n  var mergeWith = _curry3(function mergeWith(fn, l, r) {\n    return mergeWithKey(function (_, _l, _r) {\n      return fn(_l, _r);\n    }, l, r);\n  });\n  /**\n   * Takes a function `f` and a list of arguments, and returns a function `g`.\n   * When applied, `g` returns the result of applying `f` to the arguments\n   * provided initially followed by the arguments provided to `g`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category Function\n   * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n   * @param {Function} f\n   * @param {Array} args\n   * @return {Function}\n   * @see R.partialRight\n   * @example\n   *\n   *      var multiply = (a, b) => a * b;\n   *      var double = R.partial(multiply, [2]);\n   *      double(2); //=> 4\n   *\n   *      var greet = (salutation, title, firstName, lastName) =>\n   *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n   *\n   *      var sayHello = R.partial(greet, ['Hello']);\n   *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n   *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n   */\n\n\n  var partial = _createPartialApplicator(_concat);\n  /**\n   * Takes a function `f` and a list of arguments, and returns a function `g`.\n   * When applied, `g` returns the result of applying `f` to the arguments\n   * provided to `g` followed by the arguments provided initially.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category Function\n   * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n   * @param {Function} f\n   * @param {Array} args\n   * @return {Function}\n   * @see R.partial\n   * @example\n   *\n   *      var greet = (salutation, title, firstName, lastName) =>\n   *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n   *\n   *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n   *\n   *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n   */\n\n\n  var partialRight = _createPartialApplicator(flip(_concat));\n  /**\n   * Determines whether a nested path on an object has a specific value, in\n   * `R.equals` terms. Most likely used to filter a list.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.7.0\n   * @category Relation\n   * @sig [String] -> * -> {String: *} -> Boolean\n   * @param {Array} path The path of the nested property to use\n   * @param {*} val The value to compare the nested property with\n   * @param {Object} obj The object to check the nested property in\n   * @return {Boolean} `true` if the value equals the nested object property,\n   *         `false` otherwise.\n   * @example\n   *\n   *      var user1 = { address: { zipCode: 90210 } };\n   *      var user2 = { address: { zipCode: 55555 } };\n   *      var user3 = { name: 'Bob' };\n   *      var users = [ user1, user2, user3 ];\n   *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n   *      R.filter(isFamous, users); //=> [ user1 ]\n   */\n\n\n  var pathEq = _curry3(function pathEq(_path, val, obj) {\n    return equals(path(_path, obj), val);\n  });\n  /**\n   * Returns a new list by plucking the same named property off all objects in\n   * the list supplied.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig k -> [{k: v}] -> [v]\n   * @param {Number|String} key The key name to pluck off of each object.\n   * @param {Array} list The array to consider.\n   * @return {Array} The list of values for the given key.\n   * @see R.props\n   * @example\n   *\n   *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n   *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n   */\n\n\n  var pluck = _curry2(function pluck(p, list) {\n    return map(prop(p), list);\n  });\n  /**\n   * Reasonable analog to SQL `select` statement.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @category Relation\n   * @sig [k] -> [{k: v}] -> [{k: v}]\n   * @param {Array} props The property names to project\n   * @param {Array} objs The objects to query\n   * @return {Array} An array of objects with just the `props` properties.\n   * @example\n   *\n   *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n   *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n   *      var kids = [abby, fred];\n   *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n   */\n  // passing `identity` gives correct arity\n\n\n  var project = useWith(_map, [pickAll, identity]);\n  /**\n   * Returns `true` if the specified object property is equal, in `R.equals`\n   * terms, to the given value; `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig String -> a -> Object -> Boolean\n   * @param {String} name\n   * @param {*} val\n   * @param {*} obj\n   * @return {Boolean}\n   * @see R.equals, R.propSatisfies\n   * @example\n   *\n   *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n   *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n   *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n   *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n   *      var kids = [abby, fred, rusty, alois];\n   *      var hasBrownHair = R.propEq('hair', 'brown');\n   *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n   */\n\n  var propEq = _curry3(function propEq(name, val, obj) {\n    return equals(val, obj[name]);\n  });\n  /**\n   * Returns a single item by iterating through the list, successively calling\n   * the iterator function and passing it an accumulator value and the current\n   * value from the array, and then passing the result to the next call.\n   *\n   * The iterator function receives two values: *(acc, value)*. It may use\n   * `R.reduced` to shortcut the iteration.\n   *\n   * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n   * arrays), unlike the native `Array.prototype.reduce` method. For more details\n   * on this behavior, see:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n   *\n   * Dispatches to the `reduce` method of the third argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig ((a, b) -> a) -> a -> [b] -> a\n   * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n   *        current element from the array.\n   * @param {*} acc The accumulator value.\n   * @param {Array} list The list to iterate over.\n   * @return {*} The final, accumulated value.\n   * @see R.reduced, R.addIndex\n   * @example\n   *\n   *      var numbers = [1, 2, 3];\n   *      var plus = (a, b) => a + b;\n   *\n   *      R.reduce(plus, 10, numbers); //=> 16\n   */\n\n\n  var reduce = _curry3(_reduce);\n  /**\n   * Groups the elements of the list according to the result of calling\n   * the String-returning function `keyFn` on each element and reduces the elements\n   * of each group to a single value via the reducer function `valueFn`.\n   *\n   * This function is basically a more general `groupBy` function.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.20.0\n   * @category List\n   * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n   * @param {Function} valueFn The function that reduces the elements of each group to a single\n   *        value. Receives two values, accumulator for a particular group and the current element.\n   * @param {*} acc The (initial) accumulator value for each group.\n   * @param {Function} keyFn The function that maps the list's element into a key.\n   * @param {Array} list The array to group.\n   * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n   *         `valueFn` for elements which produced that key when passed to `keyFn`.\n   * @see R.groupBy, R.reduce\n   * @example\n   *\n   *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n   *      var namesByGrade = reduceToNamesBy(function(student) {\n   *        var score = student.score;\n   *        return score < 65 ? 'F' :\n   *               score < 70 ? 'D' :\n   *               score < 80 ? 'C' :\n   *               score < 90 ? 'B' : 'A';\n   *      });\n   *      var students = [{name: 'Lucy', score: 92},\n   *                      {name: 'Drew', score: 85},\n   *                      // ...\n   *                      {name: 'Bart', score: 62}];\n   *      namesByGrade(students);\n   *      // {\n   *      //   'A': ['Lucy'],\n   *      //   'B': ['Drew']\n   *      //   // ...,\n   *      //   'F': ['Bart']\n   *      // }\n   */\n\n\n  var reduceBy = _curryN(4, [], _dispatchable('reduceBy', _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n    return _reduce(function (acc, elt) {\n      var key = keyFn(elt);\n      acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n      return acc;\n    }, {}, list);\n  }));\n  /**\n   * Like `reduce`, `reduceWhile` returns a single item by iterating through\n   * the list, successively calling the iterator function. `reduceWhile` also\n   * takes a predicate that is evaluated before each step. If the predicate returns\n   * `false`, it \"short-circuits\" the iteration and returns the current value\n   * of the accumulator.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.22.0\n   * @category List\n   * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n   * @param {Function} pred The predicate. It is passed the accumulator and the\n   *        current element.\n   * @param {Function} fn The iterator function. Receives two values, the\n   *        accumulator and the current element.\n   * @param {*} a The accumulator value.\n   * @param {Array} list The list to iterate over.\n   * @return {*} The final, accumulated value.\n   * @see R.reduce, R.reduced\n   * @example\n   *\n   *      var isOdd = (acc, x) => x % 2 === 1;\n   *      var xs = [1, 3, 5, 60, 777, 800];\n   *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n   *\n   *      var ys = [2, 4, 6]\n   *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n   */\n\n\n  var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n    return _reduce(function (acc, x) {\n      return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n    }, a, list);\n  });\n  /**\n   * The complement of `filter`.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig Filterable f => (a -> Boolean) -> f a -> f a\n   * @param {Function} pred\n   * @param {Array} filterable\n   * @return {Array}\n   * @see R.filter, R.transduce, R.addIndex\n   * @example\n   *\n   *      var isOdd = (n) => n % 2 === 1;\n   *\n   *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n   *\n   *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n   */\n\n\n  var reject = _curry2(function reject(pred, filterable) {\n    return filter(_complement(pred), filterable);\n  });\n  /**\n   * Returns a fixed list of size `n` containing a specified identical value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.1\n   * @category List\n   * @sig a -> n -> [a]\n   * @param {*} value The value to repeat.\n   * @param {Number} n The desired size of the output list.\n   * @return {Array} A new array containing `n` `value`s.\n   * @example\n   *\n   *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n   *\n   *      var obj = {};\n   *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n   *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n   */\n\n\n  var repeat = _curry2(function repeat(value, n) {\n    return times(always(value), n);\n  });\n  /**\n   * Adds together all the elements of a list.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Math\n   * @sig [Number] -> Number\n   * @param {Array} list An array of numbers\n   * @return {Number} The sum of all the numbers in the list.\n   * @see R.reduce\n   * @example\n   *\n   *      R.sum([2,4,6,8,100,1]); //=> 121\n   */\n\n\n  var sum = reduce(add, 0);\n  /**\n   * Returns a new list containing the last `n` elements of the given list.\n   * If `n > list.length`, returns a list of `list.length` elements.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category List\n   * @sig Number -> [a] -> [a]\n   * @sig Number -> String -> String\n   * @param {Number} n The number of elements to return.\n   * @param {Array} xs The collection to consider.\n   * @return {Array}\n   * @see R.dropLast\n   * @example\n   *\n   *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n   *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n   *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n   *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n   *      R.takeLast(3, 'ramda');               //=> 'mda'\n   */\n\n  var takeLast = _curry2(function takeLast(n, xs) {\n    return drop(n >= 0 ? xs.length - n : 0, xs);\n  });\n  /**\n   * Initializes a transducer using supplied iterator function. Returns a single\n   * item by iterating through the list, successively calling the transformed\n   * iterator function and passing it an accumulator value and the current value\n   * from the array, and then passing the result to the next call.\n   *\n   * The iterator function receives two values: *(acc, value)*. It will be\n   * wrapped as a transformer to initialize the transducer. A transformer can be\n   * passed directly in place of an iterator function. In both cases, iteration\n   * may be stopped early with the `R.reduced` function.\n   *\n   * A transducer is a function that accepts a transformer and returns a\n   * transformer and can be composed directly.\n   *\n   * A transformer is an an object that provides a 2-arity reducing iterator\n   * function, step, 0-arity initial value function, init, and 1-arity result\n   * extraction function, result. The step function is used as the iterator\n   * function in reduce. The result function is used to convert the final\n   * accumulator into the return type and in most cases is R.identity. The init\n   * function can be used to provide an initial accumulator, but is ignored by\n   * transduce.\n   *\n   * The iteration is performed with R.reduce after initializing the transducer.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.12.0\n   * @category List\n   * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n   * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n   * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n   *        current element from the array. Wrapped as transformer, if necessary, and used to\n   *        initialize the transducer\n   * @param {*} acc The initial accumulator value.\n   * @param {Array} list The list to iterate over.\n   * @return {*} The final, accumulated value.\n   * @see R.reduce, R.reduced, R.into\n   * @example\n   *\n   *      var numbers = [1, 2, 3, 4];\n   *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n   *\n   *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n   */\n\n\n  var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n    return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n  });\n  /**\n   * Combines two lists into a set (i.e. no duplicates) composed of the elements\n   * of each list. Duplication is determined according to the value returned by\n   * applying the supplied predicate to two list elements.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n   * @param {Function} pred A predicate used to test whether two items are equal.\n   * @param {Array} list1 The first list.\n   * @param {Array} list2 The second list.\n   * @return {Array} The first and second lists concatenated, with\n   *         duplicates removed.\n   * @see R.union\n   * @example\n   *\n   *      var l1 = [{a: 1}, {a: 2}];\n   *      var l2 = [{a: 1}, {a: 4}];\n   *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n   */\n\n  var unionWith = _curry3(function unionWith(pred, list1, list2) {\n    return uniqWith(pred, _concat(list1, list2));\n  });\n  /**\n   * Takes a spec object and a test object; returns true if the test satisfies\n   * the spec, false otherwise. An object satisfies the spec if, for each of the\n   * spec's own properties, accessing that property of the object gives the same\n   * value (in `R.equals` terms) as accessing that property of the spec.\n   *\n   * `whereEq` is a specialization of [`where`](#where).\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category Object\n   * @sig {String: *} -> {String: *} -> Boolean\n   * @param {Object} spec\n   * @param {Object} testObj\n   * @return {Boolean}\n   * @see R.where\n   * @example\n   *\n   *      // pred :: Object -> Boolean\n   *      var pred = R.whereEq({a: 1, b: 2});\n   *\n   *      pred({a: 1});              //=> false\n   *      pred({a: 1, b: 2});        //=> true\n   *      pred({a: 1, b: 2, c: 3});  //=> true\n   *      pred({a: 1, b: 1});        //=> false\n   */\n\n\n  var whereEq = _curry2(function whereEq(spec, testObj) {\n    return where(map(equals, spec), testObj);\n  });\n\n  var _flatCat = function () {\n    var preservingReduced = function (xf) {\n      return {\n        '@@transducer/init': _xfBase.init,\n        '@@transducer/result': function (result) {\n          return xf['@@transducer/result'](result);\n        },\n        '@@transducer/step': function (result, input) {\n          var ret = xf['@@transducer/step'](result, input);\n          return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n        }\n      };\n    };\n\n    return function _xcat(xf) {\n      var rxf = preservingReduced(xf);\n      return {\n        '@@transducer/init': _xfBase.init,\n        '@@transducer/result': function (result) {\n          return rxf['@@transducer/result'](result);\n        },\n        '@@transducer/step': function (result, input) {\n          return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n        }\n      };\n    };\n  }(); // Array.prototype.indexOf doesn't exist below IE9\n  // manually crawl the list to distinguish between +0 and -0\n  // NaN\n  // non-zero numbers can utilise Set\n  // all these types can utilise Set\n  // null can utilise Set\n  // anything else not covered above, defer to R.equals\n\n\n  var _indexOf = function _indexOf(list, a, idx) {\n    var inf, item; // Array.prototype.indexOf doesn't exist below IE9\n\n    if (typeof list.indexOf === 'function') {\n      switch (typeof a) {\n        case 'number':\n          if (a === 0) {\n            // manually crawl the list to distinguish between +0 and -0\n            inf = 1 / a;\n\n            while (idx < list.length) {\n              item = list[idx];\n\n              if (item === 0 && 1 / item === inf) {\n                return idx;\n              }\n\n              idx += 1;\n            }\n\n            return -1;\n          } else if (a !== a) {\n            // NaN\n            while (idx < list.length) {\n              item = list[idx];\n\n              if (typeof item === 'number' && item !== item) {\n                return idx;\n              }\n\n              idx += 1;\n            }\n\n            return -1;\n          } // non-zero numbers can utilise Set\n\n\n          return list.indexOf(a, idx);\n        // all these types can utilise Set\n\n        case 'string':\n        case 'boolean':\n        case 'function':\n        case 'undefined':\n          return list.indexOf(a, idx);\n\n        case 'object':\n          if (a === null) {\n            // null can utilise Set\n            return list.indexOf(a, idx);\n          }\n\n      }\n    } // anything else not covered above, defer to R.equals\n\n\n    while (idx < list.length) {\n      if (equals(list[idx], a)) {\n        return idx;\n      }\n\n      idx += 1;\n    }\n\n    return -1;\n  };\n\n  var _xchain = _curry2(function _xchain(f, xf) {\n    return map(f, _flatCat(xf));\n  });\n  /**\n   * Takes a list of predicates and returns a predicate that returns true for a\n   * given list of arguments if every one of the provided predicates is satisfied\n   * by those arguments.\n   *\n   * The function returned is a curried function whose arity matches that of the\n   * highest-arity predicate.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Logic\n   * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n   * @param {Array} preds\n   * @return {Function}\n   * @see R.anyPass\n   * @example\n   *\n   *      var isQueen = R.propEq('rank', 'Q');\n   *      var isSpade = R.propEq('suit', '♠︎');\n   *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n   *\n   *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n   *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n   */\n\n\n  var allPass = _curry1(function allPass(preds) {\n    return curryN(reduce(max, 0, pluck('length', preds)), function () {\n      var idx = 0;\n      var len = preds.length;\n\n      while (idx < len) {\n        if (!preds[idx].apply(this, arguments)) {\n          return false;\n        }\n\n        idx += 1;\n      }\n\n      return true;\n    });\n  });\n  /**\n   * Takes a list of predicates and returns a predicate that returns true for a\n   * given list of arguments if at least one of the provided predicates is\n   * satisfied by those arguments.\n   *\n   * The function returned is a curried function whose arity matches that of the\n   * highest-arity predicate.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Logic\n   * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n   * @param {Array} preds\n   * @return {Function}\n   * @see R.allPass\n   * @example\n   *\n   *      var gte = R.anyPass([R.gt, R.equals]);\n   *\n   *      gte(3, 2); //=> true\n   *      gte(2, 2); //=> true\n   *      gte(2, 3); //=> false\n   */\n\n\n  var anyPass = _curry1(function anyPass(preds) {\n    return curryN(reduce(max, 0, pluck('length', preds)), function () {\n      var idx = 0;\n      var len = preds.length;\n\n      while (idx < len) {\n        if (preds[idx].apply(this, arguments)) {\n          return true;\n        }\n\n        idx += 1;\n      }\n\n      return false;\n    });\n  });\n  /**\n   * ap applies a list of functions to a list of values.\n   *\n   * Dispatches to the `ap` method of the second argument, if present. Also\n   * treats curried functions as applicatives.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category Function\n   * @sig [a -> b] -> [a] -> [b]\n   * @sig Apply f => f (a -> b) -> f a -> f b\n   * @param {Array} fns An array of functions\n   * @param {Array} vs An array of values\n   * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n   * @example\n   *\n   *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n   */\n  // else\n\n\n  var ap = _curry2(function ap(applicative, fn) {\n    return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {\n      return applicative(x)(fn(x));\n    } : // else\n    _reduce(function (acc, f) {\n      return _concat(acc, map(f, fn));\n    }, [], applicative);\n  });\n  /**\n   * Given a spec object recursively mapping properties to functions, creates a\n   * function producing an object of the same structure, by mapping each property\n   * to the result of calling its associated function with the supplied arguments.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.20.0\n   * @category Function\n   * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n   * @param {Object} spec an object recursively mapping properties to functions for\n   *        producing the values for these properties.\n   * @return {Function} A function that returns an object of the same structure\n   * as `spec', with each property set to the value returned by calling its\n   * associated function with the supplied arguments.\n   * @see R.converge, R.juxt\n   * @example\n   *\n   *      var getMetrics = R.applySpec({\n   *                                      sum: R.add,\n   *                                      nested: { mul: R.multiply }\n   *                                   });\n   *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n   */\n\n\n  var applySpec = _curry1(function applySpec(spec) {\n    spec = map(function (v) {\n      return typeof v == 'function' ? v : applySpec(v);\n    }, spec);\n    return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n      var args = arguments;\n      return map(function (f) {\n        return apply(f, args);\n      }, spec);\n    });\n  });\n  /**\n   * Returns the result of calling its first argument with the remaining\n   * arguments. This is occasionally useful as a converging function for\n   * `R.converge`: the left branch can produce a function while the right branch\n   * produces a value to be passed to that function as an argument.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category Function\n   * @sig (*... -> a),*... -> a\n   * @param {Function} fn The function to apply to the remaining arguments.\n   * @param {...*} args Any number of positional arguments.\n   * @return {*}\n   * @see R.apply\n   * @example\n   *\n   *      var indentN = R.pipe(R.times(R.always(' ')),\n   *                           R.join(''),\n   *                           R.replace(/^(?!$)/gm));\n   *\n   *      var format = R.converge(R.call, [\n   *                                  R.pipe(R.prop('indent'), indentN),\n   *                                  R.prop('value')\n   *                              ]);\n   *\n   *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n   */\n\n\n  var call = curry(function call(fn) {\n    return fn.apply(this, _slice(arguments, 1));\n  });\n  /**\n   * `chain` maps a function over a list and concatenates the results. `chain`\n   * is also known as `flatMap` in some libraries\n   *\n   * Dispatches to the `chain` method of the second argument, if present,\n   * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category List\n   * @sig Chain m => (a -> m b) -> m a -> m b\n   * @param {Function} fn\n   * @param {Array} list\n   * @return {Array}\n   * @example\n   *\n   *      var duplicate = n => [n, n];\n   *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n   */\n\n  var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n    if (typeof monad === 'function') {\n      return function () {\n        return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n      };\n    }\n\n    return _makeFlat(false)(map(fn, monad));\n  }));\n  /**\n   * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n   * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments\n   * to `fn` are applied to each of the predicates in turn until one returns a\n   * \"truthy\" value, at which point `fn` returns the result of applying its\n   * arguments to the corresponding transformer. If none of the predicates\n   * matches, `fn` returns undefined.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.6.0\n   * @category Logic\n   * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n   * @param {Array} pairs\n   * @return {Function}\n   * @example\n   *\n   *      var fn = R.cond([\n   *        [R.equals(0),   R.always('water freezes at 0°C')],\n   *        [R.equals(100), R.always('water boils at 100°C')],\n   *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n   *      ]);\n   *      fn(0); //=> 'water freezes at 0°C'\n   *      fn(50); //=> 'nothing special happens at 50°C'\n   *      fn(100); //=> 'water boils at 100°C'\n   */\n\n\n  var cond = _curry1(function cond(pairs) {\n    var arity = reduce(max, 0, map(function (pair) {\n      return pair[0].length;\n    }, pairs));\n    return _arity(arity, function () {\n      var idx = 0;\n\n      while (idx < pairs.length) {\n        if (pairs[idx][0].apply(this, arguments)) {\n          return pairs[idx][1].apply(this, arguments);\n        }\n\n        idx += 1;\n      }\n    });\n  });\n  /**\n   * Wraps a constructor function inside a curried function that can be called\n   * with the same arguments and returns the same type. The arity of the function\n   * returned is specified to allow using variadic constructor functions.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.4.0\n   * @category Function\n   * @sig Number -> (* -> {*}) -> (* -> {*})\n   * @param {Number} n The arity of the constructor function.\n   * @param {Function} Fn The constructor function to wrap.\n   * @return {Function} A wrapped, curried constructor function.\n   * @example\n   *\n   *      // Variadic constructor function\n   *      var Widget = () => {\n   *        this.children = Array.prototype.slice.call(arguments);\n   *        // ...\n   *      };\n   *      Widget.prototype = {\n   *        // ...\n   *      };\n   *      var allConfigs = [\n   *        // ...\n   *      ];\n   *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n   */\n\n\n  var constructN = _curry2(function constructN(n, Fn) {\n    if (n > 10) {\n      throw new Error('Constructor with greater than ten arguments');\n    }\n\n    if (n === 0) {\n      return function () {\n        return new Fn();\n      };\n    }\n\n    return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n      switch (arguments.length) {\n        case 1:\n          return new Fn($0);\n\n        case 2:\n          return new Fn($0, $1);\n\n        case 3:\n          return new Fn($0, $1, $2);\n\n        case 4:\n          return new Fn($0, $1, $2, $3);\n\n        case 5:\n          return new Fn($0, $1, $2, $3, $4);\n\n        case 6:\n          return new Fn($0, $1, $2, $3, $4, $5);\n\n        case 7:\n          return new Fn($0, $1, $2, $3, $4, $5, $6);\n\n        case 8:\n          return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n\n        case 9:\n          return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n\n        case 10:\n          return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n      }\n    }));\n  });\n  /**\n   * Accepts a converging function and a list of branching functions and returns\n   * a new function. When invoked, this new function is applied to some\n   * arguments, each branching function is applied to those same arguments. The\n   * results of each branching function are passed as arguments to the converging\n   * function to produce the return value.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.4.2\n   * @category Function\n   * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n   * @param {Function} after A function. `after` will be invoked with the return values of\n   *        `fn1` and `fn2` as its arguments.\n   * @param {Array} functions A list of functions.\n   * @return {Function} A new function.\n   * @example\n   *\n   *      var add = (a, b) => a + b;\n   *      var multiply = (a, b) => a * b;\n   *      var subtract = (a, b) => a - b;\n   *\n   *      //≅ multiply( add(1, 2), subtract(1, 2) );\n   *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n   *\n   *      var add3 = (a, b, c) => a + b + c;\n   *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n   */\n\n\n  var converge = _curry2(function converge(after, fns) {\n    return curryN(reduce(max, 0, pluck('length', fns)), function () {\n      var args = arguments;\n      var context = this;\n      return after.apply(context, _map(function (fn) {\n        return fn.apply(context, args);\n      }, fns));\n    });\n  });\n  /**\n   * Counts the elements of a list according to how many match each value of a\n   * key generated by the supplied function. Returns an object mapping the keys\n   * produced by `fn` to the number of occurrences in the list. Note that all\n   * keys are coerced to strings because of how JavaScript objects work.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig (a -> String) -> [a] -> {*}\n   * @param {Function} fn The function used to map values to keys.\n   * @param {Array} list The list to count elements from.\n   * @return {Object} An object mapping keys to number of occurrences in the list.\n   * @example\n   *\n   *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n   *      var letters = R.split('', 'abcABCaaaBBc');\n   *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n   *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n   */\n\n\n  var countBy = reduceBy(function (acc, elem) {\n    return acc + 1;\n  }, 0);\n  /**\n   * Returns a new list without any consecutively repeating elements. Equality is\n   * determined by applying the supplied predicate two consecutive elements. The\n   * first element in a series of equal element is the one being preserved.\n   *\n   * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category List\n   * @sig (a, a -> Boolean) -> [a] -> [a]\n   * @param {Function} pred A predicate used to test whether two items are equal.\n   * @param {Array} list The array to consider.\n   * @return {Array} `list` without repeating elements.\n   * @see R.transduce\n   * @example\n   *\n   *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n   *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n   */\n\n  var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n    var result = [];\n    var idx = 1;\n    var len = list.length;\n\n    if (len !== 0) {\n      result[0] = list[0];\n\n      while (idx < len) {\n        if (!pred(last(result), list[idx])) {\n          result[result.length] = list[idx];\n        }\n\n        idx += 1;\n      }\n    }\n\n    return result;\n  }));\n  /**\n   * Takes a function and two values in its domain and returns `true` if the\n   * values map to the same value in the codomain; `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.18.0\n   * @category Relation\n   * @sig (a -> b) -> a -> a -> Boolean\n   * @param {Function} f\n   * @param {*} x\n   * @param {*} y\n   * @return {Boolean}\n   * @example\n   *\n   *      R.eqBy(Math.abs, 5, -5); //=> true\n   */\n\n\n  var eqBy = _curry3(function eqBy(f, x, y) {\n    return equals(f(x), f(y));\n  });\n  /**\n   * Reports whether two objects have the same value, in `R.equals` terms, for\n   * the specified property. Useful as a curried predicate.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig k -> {k: v} -> {k: v} -> Boolean\n   * @param {String} prop The name of the property to compare\n   * @param {Object} obj1\n   * @param {Object} obj2\n   * @return {Boolean}\n   *\n   * @example\n   *\n   *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n   *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n   *      R.eqProps('a', o1, o2); //=> false\n   *      R.eqProps('c', o1, o2); //=> true\n   */\n\n\n  var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n    return equals(obj1[prop], obj2[prop]);\n  });\n  /**\n   * Splits a list into sub-lists stored in an object, based on the result of\n   * calling a String-returning function on each element, and grouping the\n   * results according to values returned.\n   *\n   * Dispatches to the `groupBy` method of the second argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig (a -> String) -> [a] -> {String: [a]}\n   * @param {Function} fn Function :: a -> String\n   * @param {Array} list The array to group\n   * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n   *         that produced that key when passed to `fn`.\n   * @see R.transduce\n   * @example\n   *\n   *      var byGrade = R.groupBy(function(student) {\n   *        var score = student.score;\n   *        return score < 65 ? 'F' :\n   *               score < 70 ? 'D' :\n   *               score < 80 ? 'C' :\n   *               score < 90 ? 'B' : 'A';\n   *      });\n   *      var students = [{name: 'Abby', score: 84},\n   *                      {name: 'Eddy', score: 58},\n   *                      // ...\n   *                      {name: 'Jack', score: 69}];\n   *      byGrade(students);\n   *      // {\n   *      //   'A': [{name: 'Dianne', score: 99}],\n   *      //   'B': [{name: 'Abby', score: 84}]\n   *      //   // ...,\n   *      //   'F': [{name: 'Eddy', score: 58}]\n   *      // }\n   */\n\n\n  var groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function (acc, item) {\n    if (acc == null) {\n      acc = [];\n    }\n\n    acc.push(item);\n    return acc;\n  }, null)));\n  /**\n   * Given a function that generates a key, turns a list of objects into an\n   * object indexing the objects by the given key. Note that if multiple\n   * objects generate the same value for the indexing key only the last value\n   * will be included in the generated object.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category List\n   * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n   * @param {Function} fn Function :: a -> String\n   * @param {Array} array The array of objects to index\n   * @return {Object} An object indexing each array element by the given property.\n   * @example\n   *\n   *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n   *      R.indexBy(R.prop('id'), list);\n   *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n   */\n\n\n  var indexBy = reduceBy(function (acc, elem) {\n    return elem;\n  }, null);\n  /**\n   * Returns the position of the first occurrence of an item in an array, or -1\n   * if the item is not included in the array. `R.equals` is used to determine\n   * equality.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig a -> [a] -> Number\n   * @param {*} target The item to find.\n   * @param {Array} xs The array to search in.\n   * @return {Number} the index of the target, or -1 if the target is not found.\n   * @see R.lastIndexOf\n   * @example\n   *\n   *      R.indexOf(3, [1,2,3,4]); //=> 2\n   *      R.indexOf(10, [1,2,3,4]); //=> -1\n   */\n\n  var indexOf = _curry2(function indexOf(target, xs) {\n    return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n  });\n  /**\n   * juxt applies a list of functions to a list of values.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category Function\n   * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n   * @param {Array} fns An array of functions\n   * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n   * @see R.applySpec\n   * @example\n   *\n   *      var getRange = R.juxt([Math.min, Math.max]);\n   *      getRange(3, 4, 9, -3); //=> [-3, 9]\n   */\n\n\n  var juxt = _curry1(function juxt(fns) {\n    return converge(_arrayOf, fns);\n  });\n  /**\n   * Returns a lens for the given getter and setter functions. The getter \"gets\"\n   * the value of the focus; the setter \"sets\" the value of the focus. The setter\n   * should not mutate the data structure.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.8.0\n   * @category Object\n   * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n   * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n   * @param {Function} getter\n   * @param {Function} setter\n   * @return {Lens}\n   * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n   * @example\n   *\n   *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n   *\n   *      R.view(xLens, {x: 1, y: 2});            //=> 1\n   *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n   *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n   */\n\n\n  var lens = _curry2(function lens(getter, setter) {\n    return function (toFunctorFn) {\n      return function (target) {\n        return map(function (focus) {\n          return setter(focus, target);\n        }, toFunctorFn(getter(target)));\n      };\n    };\n  });\n  /**\n   * Returns a lens whose focus is the specified index.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category Object\n   * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n   * @sig Number -> Lens s a\n   * @param {Number} n\n   * @return {Lens}\n   * @see R.view, R.set, R.over\n   * @example\n   *\n   *      var headLens = R.lensIndex(0);\n   *\n   *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n   *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n   *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n   */\n\n\n  var lensIndex = _curry1(function lensIndex(n) {\n    return lens(nth(n), update(n));\n  });\n  /**\n   * Returns a lens whose focus is the specified path.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category Object\n   * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n   * @sig [String] -> Lens s a\n   * @param {Array} path The path to use.\n   * @return {Lens}\n   * @see R.view, R.set, R.over\n   * @example\n   *\n   *      var xyLens = R.lensPath(['x', 'y']);\n   *\n   *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2\n   *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}\n   *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}\n   */\n\n\n  var lensPath = _curry1(function lensPath(p) {\n    return lens(path(p), assocPath(p));\n  });\n  /**\n   * Returns a lens whose focus is the specified property.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category Object\n   * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n   * @sig String -> Lens s a\n   * @param {String} k\n   * @return {Lens}\n   * @see R.view, R.set, R.over\n   * @example\n   *\n   *      var xLens = R.lensProp('x');\n   *\n   *      R.view(xLens, {x: 1, y: 2});            //=> 1\n   *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n   *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n   */\n\n\n  var lensProp = _curry1(function lensProp(k) {\n    return lens(prop(k), assoc(k));\n  });\n  /**\n   * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n   * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n   *\n   * @func\n   * @memberOf R\n   * @since v0.7.0\n   * @category Function\n   * @sig Number -> (*... -> *) -> ([*]... -> [*])\n   * @param {Function} fn The function to lift into higher context\n   * @return {Function} The lifted function.\n   * @see R.lift, R.ap\n   * @example\n   *\n   *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));\n   *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n   */\n\n\n  var liftN = _curry2(function liftN(arity, fn) {\n    var lifted = curryN(arity, fn);\n    return curryN(arity, function () {\n      return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n    });\n  });\n  /**\n   * Returns the mean of the given list of numbers.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category Math\n   * @sig [Number] -> Number\n   * @param {Array} list\n   * @return {Number}\n   * @example\n   *\n   *      R.mean([2, 7, 9]); //=> 6\n   *      R.mean([]); //=> NaN\n   */\n\n\n  var mean = _curry1(function mean(list) {\n    return sum(list) / list.length;\n  });\n  /**\n   * Returns the median of the given list of numbers.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category Math\n   * @sig [Number] -> Number\n   * @param {Array} list\n   * @return {Number}\n   * @example\n   *\n   *      R.median([2, 9, 7]); //=> 7\n   *      R.median([7, 2, 10, 9]); //=> 8\n   *      R.median([]); //=> NaN\n   */\n\n\n  var median = _curry1(function median(list) {\n    var len = list.length;\n\n    if (len === 0) {\n      return NaN;\n    }\n\n    var width = 2 - len % 2;\n    var idx = (len - width) / 2;\n    return mean(_slice(list).sort(function (a, b) {\n      return a < b ? -1 : a > b ? 1 : 0;\n    }).slice(idx, idx + width));\n  });\n  /**\n   * Takes a predicate and a list or other \"filterable\" object and returns the\n   * pair of filterable objects of the same type of elements which do and do not\n   * satisfy, the predicate, respectively.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.4\n   * @category List\n   * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n   * @param {Function} pred A predicate to determine which side the element belongs to.\n   * @param {Array} filterable the list (or other filterable) to partition.\n   * @return {Array} An array, containing first the subset of elements that satisfy the\n   *         predicate, and second the subset of elements that do not satisfy.\n   * @see R.filter, R.reject\n   * @example\n   *\n   *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n   *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n   *\n   *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n   *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n   */\n\n\n  var partition = juxt([filter, reject]);\n  /**\n   * Performs left-to-right function composition. The leftmost function may have\n   * any arity; the remaining functions must be unary.\n   *\n   * In some libraries this function is named `sequence`.\n   *\n   * **Note:** The result of pipe is not automatically curried.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n   * @param {...Function} functions\n   * @return {Function}\n   * @see R.compose\n   * @example\n   *\n   *      var f = R.pipe(Math.pow, R.negate, R.inc);\n   *\n   *      f(3, 4); // -(3^4) + 1\n   */\n\n  var pipe = function pipe() {\n    if (arguments.length === 0) {\n      throw new Error('pipe requires at least one argument');\n    }\n\n    return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n  };\n  /**\n   * Performs left-to-right composition of one or more Promise-returning\n   * functions. The leftmost function may have any arity; the remaining functions\n   * must be unary.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category Function\n   * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n   * @param {...Function} functions\n   * @return {Function}\n   * @see R.composeP\n   * @example\n   *\n   *      //  followersForUser :: String -> Promise [User]\n   *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n   */\n\n\n  var pipeP = function pipeP() {\n    if (arguments.length === 0) {\n      throw new Error('pipeP requires at least one argument');\n    }\n\n    return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n  };\n  /**\n   * Multiplies together all the elements of a list.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Math\n   * @sig [Number] -> Number\n   * @param {Array} list An array of numbers\n   * @return {Number} The product of all the numbers in the list.\n   * @see R.reduce\n   * @example\n   *\n   *      R.product([2,4,6,8,100,1]); //=> 38400\n   */\n\n\n  var product = reduce(multiply, 1);\n  /**\n   * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n   * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n   * Applicative of Traversable.\n   *\n   * Dispatches to the `sequence` method of the second argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category List\n   * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n   * @param {Function} of\n   * @param {*} traversable\n   * @return {*}\n   * @see R.traverse\n   * @example\n   *\n   *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n   *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n   *\n   *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n   *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n   */\n\n  var sequence = _curry2(function sequence(of, traversable) {\n    return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n      return ap(map(prepend, x), acc);\n    }, of([]), traversable);\n  });\n  /**\n   * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n   * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n   * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n   * into an Applicative of Traversable.\n   *\n   * Dispatches to the `sequence` method of the third argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category List\n   * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n   * @param {Function} of\n   * @param {Function} f\n   * @param {*} traversable\n   * @return {*}\n   * @see R.sequence\n   * @example\n   *\n   *      // Returns `Nothing` if the given divisor is `0`\n   *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n   *\n   *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n   *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n   */\n\n\n  var traverse = _curry3(function traverse(of, f, traversable) {\n    return sequence(of, map(f, traversable));\n  });\n  /**\n   * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n   * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n   *\n   * @func\n   * @memberOf R\n   * @since v0.3.0\n   * @category List\n   * @sig Chain c => c (c a) -> c a\n   * @param {*} list\n   * @return {*}\n   * @see R.flatten, R.chain\n   * @example\n   *\n   *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n   *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n   */\n\n\n  var unnest = chain(_identity);\n\n  var _contains = function _contains(a, list) {\n    return _indexOf(list, a, 0) >= 0;\n  }; //  mapPairs :: (Object, [String]) -> [String]\n\n\n  var _toString = function _toString(x, seen) {\n    var recur = function recur(y) {\n      var xs = seen.concat([x]);\n      return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n    }; //  mapPairs :: (Object, [String]) -> [String]\n\n\n    var mapPairs = function (obj, keys) {\n      return _map(function (k) {\n        return _quote(k) + ': ' + recur(obj[k]);\n      }, keys.slice().sort());\n    };\n\n    switch (Object.prototype.toString.call(x)) {\n      case '[object Arguments]':\n        return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n\n      case '[object Array]':\n        return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n          return /^\\d+$/.test(k);\n        }, keys(x)))).join(', ') + ']';\n\n      case '[object Boolean]':\n        return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n\n      case '[object Date]':\n        return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n\n      case '[object Null]':\n        return 'null';\n\n      case '[object Number]':\n        return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n\n      case '[object String]':\n        return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n\n      case '[object Undefined]':\n        return 'undefined';\n\n      default:\n        if (typeof x.toString === 'function') {\n          var repr = x.toString();\n\n          if (repr !== '[object Object]') {\n            return repr;\n          }\n        }\n\n        return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n    }\n  };\n  /**\n   * Performs right-to-left function composition. The rightmost function may have\n   * any arity; the remaining functions must be unary.\n   *\n   * **Note:** The result of compose is not automatically curried.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n   * @param {...Function} functions\n   * @return {Function}\n   * @see R.pipe\n   * @example\n   *\n   *      var f = R.compose(R.inc, R.negate, Math.pow);\n   *\n   *      f(3, 4); // -(3^4) + 1\n   */\n\n\n  var compose = function compose() {\n    if (arguments.length === 0) {\n      throw new Error('compose requires at least one argument');\n    }\n\n    return pipe.apply(this, reverse(arguments));\n  };\n  /**\n   * Returns the right-to-left Kleisli composition of the provided functions,\n   * each of which must return a value of a type supported by [`chain`](#chain).\n   *\n   * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category Function\n   * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n   * @param {...Function}\n   * @return {Function}\n   * @see R.pipeK\n   * @example\n   *\n   *      //  parseJson :: String -> Maybe *\n   *      //  get :: String -> Object -> Maybe *\n   *\n   *      //  getStateCode :: Maybe String -> Maybe String\n   *      var getStateCode = R.composeK(\n   *        R.compose(Maybe.of, R.toUpper),\n   *        get('state'),\n   *        get('address'),\n   *        get('user'),\n   *        parseJson\n   *      );\n   *\n   *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n   *      //=> Just('NY')\n   *      getStateCode(Maybe.of('[Invalid JSON]'));\n   *      //=> Nothing()\n   */\n\n\n  var composeK = function composeK() {\n    return compose.apply(this, prepend(identity, map(chain, arguments)));\n  };\n  /**\n   * Performs right-to-left composition of one or more Promise-returning\n   * functions. The rightmost function may have any arity; the remaining\n   * functions must be unary.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.10.0\n   * @category Function\n   * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n   * @param {...Function} functions\n   * @return {Function}\n   * @see R.pipeP\n   * @example\n   *\n   *      //  followersForUser :: String -> Promise [User]\n   *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n   */\n\n\n  var composeP = function composeP() {\n    if (arguments.length === 0) {\n      throw new Error('composeP requires at least one argument');\n    }\n\n    return pipeP.apply(this, reverse(arguments));\n  };\n  /**\n   * Wraps a constructor function inside a curried function that can be called\n   * with the same arguments and returns the same type.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (* -> {*}) -> (* -> {*})\n   * @param {Function} Fn The constructor function to wrap.\n   * @return {Function} A wrapped, curried constructor function.\n   * @example\n   *\n   *      // Constructor function\n   *      var Widget = config => {\n   *        // ...\n   *      };\n   *      Widget.prototype = {\n   *        // ...\n   *      };\n   *      var allConfigs = [\n   *        // ...\n   *      ];\n   *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n   */\n\n\n  var construct = _curry1(function construct(Fn) {\n    return constructN(Fn.length, Fn);\n  });\n  /**\n   * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n   * least one element of the given list; `false` otherwise.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig a -> [a] -> Boolean\n   * @param {Object} a The item to compare against.\n   * @param {Array} list The array to consider.\n   * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n   * @see R.any\n   * @example\n   *\n   *      R.contains(3, [1, 2, 3]); //=> true\n   *      R.contains(4, [1, 2, 3]); //=> false\n   *      R.contains([42], [[42]]); //=> true\n   */\n\n\n  var contains = _curry2(_contains);\n  /**\n   * Finds the set (i.e. no duplicates) of all elements in the first list not\n   * contained in the second list.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig [*] -> [*] -> [*]\n   * @param {Array} list1 The first list.\n   * @param {Array} list2 The second list.\n   * @return {Array} The elements in `list1` that are not in `list2`.\n   * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith\n   * @example\n   *\n   *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n   *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n   */\n\n\n  var difference = _curry2(function difference(first, second) {\n    var out = [];\n    var idx = 0;\n    var firstLen = first.length;\n\n    while (idx < firstLen) {\n      if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n        out[out.length] = first[idx];\n      }\n\n      idx += 1;\n    }\n\n    return out;\n  });\n  /**\n   * Returns a new list without any consecutively repeating elements. `R.equals`\n   * is used to determine equality.\n   *\n   * Dispatches to the `dropRepeats` method of the first argument, if present.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category List\n   * @sig [a] -> [a]\n   * @param {Array} list The array to consider.\n   * @return {Array} `list` without repeating elements.\n   * @see R.transduce\n   * @example\n   *\n   *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n   */\n\n\n  var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n  /**\n   * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n   * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n   *\n   * @func\n   * @memberOf R\n   * @since v0.7.0\n   * @category Function\n   * @sig (*... -> *) -> ([*]... -> [*])\n   * @param {Function} fn The function to lift into higher context\n   * @return {Function} The lifted function.\n   * @see R.liftN\n   * @example\n   *\n   *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n   *\n   *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n   *\n   *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n   *\n   *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n   */\n\n\n  var lift = _curry1(function lift(fn) {\n    return liftN(fn.length, fn);\n  });\n  /**\n   * Returns a partial copy of an object omitting the keys specified.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Object\n   * @sig [String] -> {String: *} -> {String: *}\n   * @param {Array} names an array of String property names to omit from the new object\n   * @param {Object} obj The object to copy from\n   * @return {Object} A new object with properties from `names` not on it.\n   * @see R.pick\n   * @example\n   *\n   *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n   */\n\n\n  var omit = _curry2(function omit(names, obj) {\n    var result = {};\n\n    for (var prop in obj) {\n      if (!_contains(prop, names)) {\n        result[prop] = obj[prop];\n      }\n    }\n\n    return result;\n  });\n  /**\n   * Returns the left-to-right Kleisli composition of the provided functions,\n   * each of which must return a value of a type supported by [`chain`](#chain).\n   *\n   * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category Function\n   * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n   * @param {...Function}\n   * @return {Function}\n   * @see R.composeK\n   * @example\n   *\n   *      //  parseJson :: String -> Maybe *\n   *      //  get :: String -> Object -> Maybe *\n   *\n   *      //  getStateCode :: Maybe String -> Maybe String\n   *      var getStateCode = R.pipeK(\n   *        parseJson,\n   *        get('user'),\n   *        get('address'),\n   *        get('state'),\n   *        R.compose(Maybe.of, R.toUpper)\n   *      );\n   *\n   *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n   *      //=> Just('NY')\n   *      getStateCode(Maybe.of('[Invalid JSON]'));\n   *      //=> Nothing()\n   */\n\n\n  var pipeK = function pipeK() {\n    return composeK.apply(this, reverse(arguments));\n  };\n  /**\n   * Returns the string representation of the given value. `eval`'ing the output\n   * should result in a value equivalent to the input value. Many of the built-in\n   * `toString` methods do not satisfy this requirement.\n   *\n   * If the given value is an `[object Object]` with a `toString` method other\n   * than `Object.prototype.toString`, this method is invoked with no arguments\n   * to produce the return value. This means user-defined constructor functions\n   * can provide a suitable `toString` method. For example:\n   *\n   *     function Point(x, y) {\n   *       this.x = x;\n   *       this.y = y;\n   *     }\n   *\n   *     Point.prototype.toString = function() {\n   *       return 'new Point(' + this.x + ', ' + this.y + ')';\n   *     };\n   *\n   *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n   *\n   * @func\n   * @memberOf R\n   * @since v0.14.0\n   * @category String\n   * @sig * -> String\n   * @param {*} val\n   * @return {String}\n   * @example\n   *\n   *      R.toString(42); //=> '42'\n   *      R.toString('abc'); //=> '\"abc\"'\n   *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n   *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n   *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n   */\n\n\n  var toString = _curry1(function toString(val) {\n    return _toString(val, []);\n  });\n  /**\n   * Returns a new list without values in the first argument.\n   * `R.equals` is used to determine equality.\n   *\n   * Acts as a transducer if a transformer is given in list position.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category List\n   * @sig [a] -> [a] -> [a]\n   * @param {Array} list1 The values to be removed from `list2`.\n   * @param {Array} list2 The array to remove values from.\n   * @return {Array} The new array without values in `list1`.\n   * @see R.transduce\n   * @example\n   *\n   *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n   */\n\n\n  var without = _curry2(function (xs, list) {\n    return reject(flip(_contains)(xs), list);\n  }); // A simple Set type that honours R.equals semantics\n\n  /* globals Set */\n  // until we figure out why jsdoc chokes on this\n  // @param item The item to add to the Set\n  // @returns {boolean} true if the item did not exist prior, otherwise false\n  //\n  //\n  // @param item The item to check for existence in the Set\n  // @returns {boolean} true if the item exists in the Set, otherwise false\n  //\n  //\n  // Combines the logic for checking whether an item is a member of the set and\n  // for adding a new item to the set.\n  //\n  // @param item       The item to check or add to the Set instance.\n  // @param shouldAdd  If true, the item will be added to the set if it doesn't\n  //                   already exist.\n  // @param set        The set instance to check or add to.\n  // @return {boolean} true if the item already existed, otherwise false.\n  //\n  // distinguish between +0 and -0\n  // these types can all utilise the native Set\n  // set._items['boolean'] holds a two element array\n  // representing [ falseExists, trueExists ]\n  // compare functions for reference equality\n\n  /* falls through */\n  // reduce the search size of heterogeneous sets by creating buckets\n  // for each type.\n  // scan through all previously applied items\n\n\n  var _Set = function () {\n    function _Set() {\n      /* globals Set */\n      this._nativeSet = typeof Set === 'function' ? new Set() : null;\n      this._items = {};\n    } // until we figure out why jsdoc chokes on this\n    // @param item The item to add to the Set\n    // @returns {boolean} true if the item did not exist prior, otherwise false\n    //\n\n\n    _Set.prototype.add = function (item) {\n      return !hasOrAdd(item, true, this);\n    }; //\n    // @param item The item to check for existence in the Set\n    // @returns {boolean} true if the item exists in the Set, otherwise false\n    //\n\n\n    _Set.prototype.has = function (item) {\n      return hasOrAdd(item, false, this);\n    }; //\n    // Combines the logic for checking whether an item is a member of the set and\n    // for adding a new item to the set.\n    //\n    // @param item       The item to check or add to the Set instance.\n    // @param shouldAdd  If true, the item will be added to the set if it doesn't\n    //                   already exist.\n    // @param set        The set instance to check or add to.\n    // @return {boolean} true if the item already existed, otherwise false.\n    //\n\n\n    function hasOrAdd(item, shouldAdd, set) {\n      var type = typeof item;\n      var prevSize, newSize;\n\n      switch (type) {\n        case 'string':\n        case 'number':\n          // distinguish between +0 and -0\n          if (item === 0 && 1 / item === -Infinity) {\n            if (set._items['-0']) {\n              return true;\n            } else {\n              if (shouldAdd) {\n                set._items['-0'] = true;\n              }\n\n              return false;\n            }\n          } // these types can all utilise the native Set\n\n\n          if (set._nativeSet !== null) {\n            if (shouldAdd) {\n              prevSize = set._nativeSet.size;\n\n              set._nativeSet.add(item);\n\n              newSize = set._nativeSet.size;\n              return newSize === prevSize;\n            } else {\n              return set._nativeSet.has(item);\n            }\n          } else {\n            if (!(type in set._items)) {\n              if (shouldAdd) {\n                set._items[type] = {};\n                set._items[type][item] = true;\n              }\n\n              return false;\n            } else if (item in set._items[type]) {\n              return true;\n            } else {\n              if (shouldAdd) {\n                set._items[type][item] = true;\n              }\n\n              return false;\n            }\n          }\n\n        case 'boolean':\n          // set._items['boolean'] holds a two element array\n          // representing [ falseExists, trueExists ]\n          if (type in set._items) {\n            var bIdx = item ? 1 : 0;\n\n            if (set._items[type][bIdx]) {\n              return true;\n            } else {\n              if (shouldAdd) {\n                set._items[type][bIdx] = true;\n              }\n\n              return false;\n            }\n          } else {\n            if (shouldAdd) {\n              set._items[type] = item ? [false, true] : [true, false];\n            }\n\n            return false;\n          }\n\n        case 'function':\n          // compare functions for reference equality\n          if (set._nativeSet !== null) {\n            if (shouldAdd) {\n              prevSize = set._nativeSet.size;\n\n              set._nativeSet.add(item);\n\n              newSize = set._nativeSet.size;\n              return newSize > prevSize;\n            } else {\n              return set._nativeSet.has(item);\n            }\n          } else {\n            if (!(type in set._items)) {\n              if (shouldAdd) {\n                set._items[type] = [item];\n              }\n\n              return false;\n            }\n\n            if (!_contains(item, set._items[type])) {\n              if (shouldAdd) {\n                set._items[type].push(item);\n              }\n\n              return false;\n            }\n\n            return true;\n          }\n\n        case 'undefined':\n          if (set._items[type]) {\n            return true;\n          } else {\n            if (shouldAdd) {\n              set._items[type] = true;\n            }\n\n            return false;\n          }\n\n        case 'object':\n          if (item === null) {\n            if (!set._items['null']) {\n              if (shouldAdd) {\n                set._items['null'] = true;\n              }\n\n              return false;\n            }\n\n            return true;\n          }\n\n        /* falls through */\n\n        default:\n          // reduce the search size of heterogeneous sets by creating buckets\n          // for each type.\n          type = Object.prototype.toString.call(item);\n\n          if (!(type in set._items)) {\n            if (shouldAdd) {\n              set._items[type] = [item];\n            }\n\n            return false;\n          } // scan through all previously applied items\n\n\n          if (!_contains(item, set._items[type])) {\n            if (shouldAdd) {\n              set._items[type].push(item);\n            }\n\n            return false;\n          }\n\n          return true;\n      }\n    }\n\n    return _Set;\n  }();\n  /**\n   * A function wrapping calls to the two functions in an `&&` operation,\n   * returning the result of the first function if it is false-y and the result\n   * of the second function otherwise. Note that this is short-circuited,\n   * meaning that the second function will not be invoked if the first returns a\n   * false-y value.\n   *\n   * In addition to functions, `R.both` also accepts any fantasy-land compatible\n   * applicative functor.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.12.0\n   * @category Logic\n   * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n   * @param {Function} f a predicate\n   * @param {Function} g another predicate\n   * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n   * @see R.and\n   * @example\n   *\n   *      var gt10 = x => x > 10;\n   *      var even = x => x % 2 === 0;\n   *      var f = R.both(gt10, even);\n   *      f(100); //=> true\n   *      f(101); //=> false\n   */\n\n\n  var both = _curry2(function both(f, g) {\n    return _isFunction(f) ? function _both() {\n      return f.apply(this, arguments) && g.apply(this, arguments);\n    } : lift(and)(f, g);\n  });\n  /**\n   * Takes a function `f` and returns a function `g` such that:\n   *\n   *   - applying `g` to zero or more arguments will give __true__ if applying\n   *     the same arguments to `f` gives a logical __false__ value; and\n   *\n   *   - applying `g` to zero or more arguments will give __false__ if applying\n   *     the same arguments to `f` gives a logical __true__ value.\n   *\n   * `R.complement` will work on all other functors as well.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.12.0\n   * @category Logic\n   * @sig (*... -> *) -> (*... -> Boolean)\n   * @param {Function} f\n   * @return {Function}\n   * @see R.not\n   * @example\n   *\n   *      var isEven = n => n % 2 === 0;\n   *      var isOdd = R.complement(isEven);\n   *      isOdd(21); //=> true\n   *      isOdd(42); //=> false\n   */\n\n\n  var complement = lift(not);\n  /**\n   * Returns the result of concatenating the given lists or strings.\n   *\n   * Note: `R.concat` expects both arguments to be of the same type,\n   * unlike the native `Array.prototype.concat` method. It will throw\n   * an error if you `concat` an Array with a non-Array value.\n   *\n   * Dispatches to the `concat` method of the first argument, if present.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig [a] -> [a] -> [a]\n   * @sig String -> String -> String\n   * @param {Array|String} a\n   * @param {Array|String} b\n   * @return {Array|String}\n   *\n   * @example\n   *\n   *      R.concat([], []); //=> []\n   *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n   *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n   */\n\n  var concat = _curry2(function concat(a, b) {\n    if (a == null || !_isFunction(a.concat)) {\n      throw new TypeError(toString(a) + ' does not have a method named \"concat\"');\n    }\n\n    if (_isArray(a) && !_isArray(b)) {\n      throw new TypeError(toString(b) + ' is not an array');\n    }\n\n    return a.concat(b);\n  });\n  /**\n   * A function wrapping calls to the two functions in an `||` operation,\n   * returning the result of the first function if it is truth-y and the result\n   * of the second function otherwise. Note that this is short-circuited,\n   * meaning that the second function will not be invoked if the first returns a\n   * truth-y value.\n   *\n   * In addition to functions, `R.either` also accepts any fantasy-land compatible\n   * applicative functor.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.12.0\n   * @category Logic\n   * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n   * @param {Function} f a predicate\n   * @param {Function} g another predicate\n   * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n   * @see R.or\n   * @example\n   *\n   *      var gt10 = x => x > 10;\n   *      var even = x => x % 2 === 0;\n   *      var f = R.either(gt10, even);\n   *      f(101); //=> true\n   *      f(8); //=> true\n   */\n\n\n  var either = _curry2(function either(f, g) {\n    return _isFunction(f) ? function _either() {\n      return f.apply(this, arguments) || g.apply(this, arguments);\n    } : lift(or)(f, g);\n  });\n  /**\n   * Turns a named method with a specified arity into a function that can be\n   * called directly supplied with arguments and a target object.\n   *\n   * The returned function is curried and accepts `arity + 1` parameters where\n   * the final parameter is the target object.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n   * @param {Number} arity Number of arguments the returned function should take\n   *        before the target object.\n   * @param {String} method Name of the method to call.\n   * @return {Function} A new curried function.\n   * @example\n   *\n   *      var sliceFrom = R.invoker(1, 'slice');\n   *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n   *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n   *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n   */\n\n\n  var invoker = _curry2(function invoker(arity, method) {\n    return curryN(arity + 1, function () {\n      var target = arguments[arity];\n\n      if (target != null && _isFunction(target[method])) {\n        return target[method].apply(target, _slice(arguments, 0, arity));\n      }\n\n      throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n    });\n  });\n  /**\n   * Returns a string made by inserting the `separator` between each element and\n   * concatenating all the elements into a single string.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig String -> [a] -> String\n   * @param {Number|String} separator The string used to separate the elements.\n   * @param {Array} xs The elements to join into a string.\n   * @return {String} str The string made by concatenating `xs` with `separator`.\n   * @see R.split\n   * @example\n   *\n   *      var spacer = R.join(' ');\n   *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n   *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n   */\n\n\n  var join = invoker(1, 'join');\n  /**\n   * Creates a new function that, when invoked, caches the result of calling `fn`\n   * for a given argument set and returns the result. Subsequent calls to the\n   * memoized `fn` with the same argument set will not result in an additional\n   * call to `fn`; instead, the cached result for that set of arguments will be\n   * returned.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Function\n   * @sig (*... -> a) -> (*... -> a)\n   * @param {Function} fn The function to memoize.\n   * @return {Function} Memoized version of `fn`.\n   * @example\n   *\n   *      var count = 0;\n   *      var factorial = R.memoize(n => {\n   *        count += 1;\n   *        return R.product(R.range(1, n + 1));\n   *      });\n   *      factorial(5); //=> 120\n   *      factorial(5); //=> 120\n   *      factorial(5); //=> 120\n   *      count; //=> 1\n   */\n\n  var memoize = _curry1(function memoize(fn) {\n    var cache = {};\n    return _arity(fn.length, function () {\n      var key = toString(arguments);\n\n      if (!_has(key, cache)) {\n        cache[key] = fn.apply(this, arguments);\n      }\n\n      return cache[key];\n    });\n  });\n  /**\n   * Splits a string into an array of strings based on the given\n   * separator.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category String\n   * @sig (String | RegExp) -> String -> [String]\n   * @param {String|RegExp} sep The pattern.\n   * @param {String} str The string to separate into an array.\n   * @return {Array} The array of strings from `str` separated by `str`.\n   * @see R.join\n   * @example\n   *\n   *      var pathComponents = R.split('/');\n   *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n   *\n   *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n   */\n\n\n  var split = invoker(1, 'split');\n  /**\n   * Finds the set (i.e. no duplicates) of all elements contained in the first or\n   * second list, but not both.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category Relation\n   * @sig [*] -> [*] -> [*]\n   * @param {Array} list1 The first list.\n   * @param {Array} list2 The second list.\n   * @return {Array} The elements in `list1` or `list2`, but not both.\n   * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n   * @example\n   *\n   *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n   *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n   */\n\n  var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n    return concat(difference(list1, list2), difference(list2, list1));\n  });\n  /**\n   * Finds the set (i.e. no duplicates) of all elements contained in the first or\n   * second list, but not both. Duplication is determined according to the value\n   * returned by applying the supplied predicate to two list elements.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.19.0\n   * @category Relation\n   * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]\n   * @param {Function} pred A predicate used to test whether two items are equal.\n   * @param {Array} list1 The first list.\n   * @param {Array} list2 The second list.\n   * @return {Array} The elements in `list1` or `list2`, but not both.\n   * @see R.symmetricDifference, R.difference, R.differenceWith\n   * @example\n   *\n   *      var eqA = R.eqBy(R.prop('a'));\n   *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n   *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n   *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n   */\n\n\n  var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n    return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n  });\n  /**\n   * Determines whether a given string matches a given regular expression.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.12.0\n   * @category String\n   * @sig RegExp -> String -> Boolean\n   * @param {RegExp} pattern\n   * @param {String} str\n   * @return {Boolean}\n   * @see R.match\n   * @example\n   *\n   *      R.test(/^x/, 'xyz'); //=> true\n   *      R.test(/^y/, 'xyz'); //=> false\n   */\n\n\n  var test = _curry2(function test(pattern, str) {\n    if (!_isRegExp(pattern)) {\n      throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n    }\n\n    return _cloneRegExp(pattern).test(str);\n  });\n  /**\n   * The lower case version of a string.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category String\n   * @sig String -> String\n   * @param {String} str The string to lower case.\n   * @return {String} The lower case version of `str`.\n   * @see R.toUpper\n   * @example\n   *\n   *      R.toLower('XYZ'); //=> 'xyz'\n   */\n\n\n  var toLower = invoker(0, 'toLowerCase');\n  /**\n   * The upper case version of a string.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.9.0\n   * @category String\n   * @sig String -> String\n   * @param {String} str The string to upper case.\n   * @return {String} The upper case version of `str`.\n   * @see R.toLower\n   * @example\n   *\n   *      R.toUpper('abc'); //=> 'ABC'\n   */\n\n  var toUpper = invoker(0, 'toUpperCase');\n  /**\n   * Returns a new list containing only one copy of each element in the original\n   * list, based upon the value returned by applying the supplied function to\n   * each list element. Prefers the first item if the supplied function produces\n   * the same value on two items. `R.equals` is used for comparison.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.16.0\n   * @category List\n   * @sig (a -> b) -> [a] -> [a]\n   * @param {Function} fn A function used to produce a value to use during comparisons.\n   * @param {Array} list The array to consider.\n   * @return {Array} The list of unique items.\n   * @example\n   *\n   *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n   */\n\n  var uniqBy = _curry2(function uniqBy(fn, list) {\n    var set = new _Set();\n    var result = [];\n    var idx = 0;\n    var appliedItem, item;\n\n    while (idx < list.length) {\n      item = list[idx];\n      appliedItem = fn(item);\n\n      if (set.add(appliedItem)) {\n        result.push(item);\n      }\n\n      idx += 1;\n    }\n\n    return result;\n  });\n  /**\n   * Returns a new list containing only one copy of each element in the original\n   * list. `R.equals` is used to determine equality.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category List\n   * @sig [a] -> [a]\n   * @param {Array} list The array to consider.\n   * @return {Array} The list of unique items.\n   * @example\n   *\n   *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n   *      R.uniq([1, '1']);     //=> [1, '1']\n   *      R.uniq([[42], [42]]); //=> [[42]]\n   */\n\n\n  var uniq = uniqBy(identity);\n  /**\n   * Combines two lists into a set (i.e. no duplicates) composed of those\n   * elements common to both lists.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig [*] -> [*] -> [*]\n   * @param {Array} list1 The first list.\n   * @param {Array} list2 The second list.\n   * @return {Array} The list of elements found in both `list1` and `list2`.\n   * @see R.intersectionWith\n   * @example\n   *\n   *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n   */\n\n  var intersection = _curry2(function intersection(list1, list2) {\n    var lookupList, filteredList;\n\n    if (list1.length > list2.length) {\n      lookupList = list1;\n      filteredList = list2;\n    } else {\n      lookupList = list2;\n      filteredList = list1;\n    }\n\n    return uniq(_filter(flip(_contains)(lookupList), filteredList));\n  });\n  /**\n   * Combines two lists into a set (i.e. no duplicates) composed of the elements\n   * of each list.\n   *\n   * @func\n   * @memberOf R\n   * @since v0.1.0\n   * @category Relation\n   * @sig [*] -> [*] -> [*]\n   * @param {Array} as The first list.\n   * @param {Array} bs The second list.\n   * @return {Array} The first and second lists concatenated, with\n   *         duplicates removed.\n   * @example\n   *\n   *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n   */\n\n\n  var union = _curry2(compose(uniq, _concat));\n\n  var R = {\n    F: F,\n    T: T,\n    __: __,\n    add: add,\n    addIndex: addIndex,\n    adjust: adjust,\n    all: all,\n    allPass: allPass,\n    always: always,\n    and: and,\n    any: any,\n    anyPass: anyPass,\n    ap: ap,\n    aperture: aperture,\n    append: append,\n    apply: apply,\n    applySpec: applySpec,\n    assoc: assoc,\n    assocPath: assocPath,\n    binary: binary,\n    bind: bind,\n    both: both,\n    call: call,\n    chain: chain,\n    clamp: clamp,\n    clone: clone,\n    comparator: comparator,\n    complement: complement,\n    compose: compose,\n    composeK: composeK,\n    composeP: composeP,\n    concat: concat,\n    cond: cond,\n    construct: construct,\n    constructN: constructN,\n    contains: contains,\n    converge: converge,\n    countBy: countBy,\n    curry: curry,\n    curryN: curryN,\n    dec: dec,\n    defaultTo: defaultTo,\n    difference: difference,\n    differenceWith: differenceWith,\n    dissoc: dissoc,\n    dissocPath: dissocPath,\n    divide: divide,\n    drop: drop,\n    dropLast: dropLast,\n    dropLastWhile: dropLastWhile,\n    dropRepeats: dropRepeats,\n    dropRepeatsWith: dropRepeatsWith,\n    dropWhile: dropWhile,\n    either: either,\n    empty: empty,\n    eqBy: eqBy,\n    eqProps: eqProps,\n    equals: equals,\n    evolve: evolve,\n    filter: filter,\n    find: find,\n    findIndex: findIndex,\n    findLast: findLast,\n    findLastIndex: findLastIndex,\n    flatten: flatten,\n    flip: flip,\n    forEach: forEach,\n    fromPairs: fromPairs,\n    groupBy: groupBy,\n    groupWith: groupWith,\n    gt: gt,\n    gte: gte,\n    has: has,\n    hasIn: hasIn,\n    head: head,\n    identical: identical,\n    identity: identity,\n    ifElse: ifElse,\n    inc: inc,\n    indexBy: indexBy,\n    indexOf: indexOf,\n    init: init,\n    insert: insert,\n    insertAll: insertAll,\n    intersection: intersection,\n    intersectionWith: intersectionWith,\n    intersperse: intersperse,\n    into: into,\n    invert: invert,\n    invertObj: invertObj,\n    invoker: invoker,\n    is: is,\n    isArrayLike: isArrayLike,\n    isEmpty: isEmpty,\n    isNil: isNil,\n    join: join,\n    juxt: juxt,\n    keys: keys,\n    keysIn: keysIn,\n    last: last,\n    lastIndexOf: lastIndexOf,\n    length: length,\n    lens: lens,\n    lensIndex: lensIndex,\n    lensPath: lensPath,\n    lensProp: lensProp,\n    lift: lift,\n    liftN: liftN,\n    lt: lt,\n    lte: lte,\n    map: map,\n    mapAccum: mapAccum,\n    mapAccumRight: mapAccumRight,\n    mapObjIndexed: mapObjIndexed,\n    match: match,\n    mathMod: mathMod,\n    max: max,\n    maxBy: maxBy,\n    mean: mean,\n    median: median,\n    memoize: memoize,\n    merge: merge,\n    mergeAll: mergeAll,\n    mergeWith: mergeWith,\n    mergeWithKey: mergeWithKey,\n    min: min,\n    minBy: minBy,\n    modulo: modulo,\n    multiply: multiply,\n    nAry: nAry,\n    negate: negate,\n    none: none,\n    not: not,\n    nth: nth,\n    nthArg: nthArg,\n    objOf: objOf,\n    of: of,\n    omit: omit,\n    once: once,\n    or: or,\n    over: over,\n    pair: pair,\n    partial: partial,\n    partialRight: partialRight,\n    partition: partition,\n    path: path,\n    pathEq: pathEq,\n    pathOr: pathOr,\n    pathSatisfies: pathSatisfies,\n    pick: pick,\n    pickAll: pickAll,\n    pickBy: pickBy,\n    pipe: pipe,\n    pipeK: pipeK,\n    pipeP: pipeP,\n    pluck: pluck,\n    prepend: prepend,\n    product: product,\n    project: project,\n    prop: prop,\n    propEq: propEq,\n    propIs: propIs,\n    propOr: propOr,\n    propSatisfies: propSatisfies,\n    props: props,\n    range: range,\n    reduce: reduce,\n    reduceBy: reduceBy,\n    reduceRight: reduceRight,\n    reduceWhile: reduceWhile,\n    reduced: reduced,\n    reject: reject,\n    remove: remove,\n    repeat: repeat,\n    replace: replace,\n    reverse: reverse,\n    scan: scan,\n    sequence: sequence,\n    set: set,\n    slice: slice,\n    sort: sort,\n    sortBy: sortBy,\n    split: split,\n    splitAt: splitAt,\n    splitEvery: splitEvery,\n    splitWhen: splitWhen,\n    subtract: subtract,\n    sum: sum,\n    symmetricDifference: symmetricDifference,\n    symmetricDifferenceWith: symmetricDifferenceWith,\n    tail: tail,\n    take: take,\n    takeLast: takeLast,\n    takeLastWhile: takeLastWhile,\n    takeWhile: takeWhile,\n    tap: tap,\n    test: test,\n    times: times,\n    toLower: toLower,\n    toPairs: toPairs,\n    toPairsIn: toPairsIn,\n    toString: toString,\n    toUpper: toUpper,\n    transduce: transduce,\n    transpose: transpose,\n    traverse: traverse,\n    trim: trim,\n    tryCatch: tryCatch,\n    type: type,\n    unapply: unapply,\n    unary: unary,\n    uncurryN: uncurryN,\n    unfold: unfold,\n    union: union,\n    unionWith: unionWith,\n    uniq: uniq,\n    uniqBy: uniqBy,\n    uniqWith: uniqWith,\n    unless: unless,\n    unnest: unnest,\n    until: until,\n    update: update,\n    useWith: useWith,\n    values: values,\n    valuesIn: valuesIn,\n    view: view,\n    when: when,\n    where: where,\n    whereEq: whereEq,\n    without: without,\n    wrap: wrap,\n    xprod: xprod,\n    zip: zip,\n    zipObj: zipObj,\n    zipWith: zipWith\n  };\n  /* eslint-env amd */\n\n  /* TEST_ENTRY_POINT */\n\n  if (typeof exports === 'object') {\n    module.exports = R;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return R;\n    });\n  } else {\n    this.R = R;\n  }\n}).call(this);","map":{"version":3,"names":["__","_arity","n","fn","apply","arguments","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","Error","_arrayFromIterator","iter","list","next","done","push","value","_arrayOf","Array","prototype","slice","call","_cloneRegExp","pattern","RegExp","source","global","ignoreCase","multiline","sticky","unicode","_complement","f","_concat","set1","set2","idx","len1","length","len2","result","_containsWith","pred","x","len","_filter","_forceReduced","_functionName","match","String","_has","prop","obj","Object","hasOwnProperty","_identity","_isArguments","toString","_isArray","isArray","val","_isFunction","_isInteger","Number","isInteger","_isNumber","_isObject","_isPlaceholder","a","_isRegExp","_isString","_isTransformer","_map","functor","_objectAssign","target","TypeError","output","nextKey","_of","_pipe","g","_pipeP","ctx","then","_quote","s","escaped","replace","_reduced","_slice","args","from","to","Math","max","min","_toISOString","pad","Date","toISOString","d","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","_xfBase","init","xf","_xwrap","XWrap","acc","_aperture","limit","_assign","assign","_checkForMethod","methodname","_curry1","f1","_curry2","f2","b","_b","_a","_curry3","f3","c","_c","_curryN","received","combined","argsIdx","left","combinedIdx","_dispatchable","transducer","_dropLastWhile","dropLastWhile","_xall","XAll","all","input","_xany","XAny","any","_xaperture","XAperture","pos","full","store","getCopy","_xdrop","XDrop","_xdropLast","XDropLast","_xdropRepeatsWith","XDropRepeatsWith","lastValue","undefined","seenFirstValue","sameAsLast","_xdropWhile","XDropWhile","_xfilter","XFilter","_xfind","XFind","found","_xfindIndex","XFindIndex","_xfindLast","XFindLast","last","_xfindLastIndex","XFindLastIndex","lastIdx","_xmap","XMap","_xreduceBy","XReduceBy","valueFn","valueAcc","keyFn","inputs","key","_xtake","XTake","i","ret","_xtakeWhile","XTakeWhile","add","adjust","start","_idx","_list","always","and","aperture","append","el","assoc","p","assocPath","path","bind","thisObj","clamp","comparator","curryN","dec","defaultTo","v","differenceWith","first","second","out","firstLen","dissoc","dissocPath","head","tail","divide","dropWhile","empty","constructor","evolve","transformations","object","transformation","type","find","findIndex","findLast","findLastIndex","forEach","fromPairs","pairs","groupWith","res","nextidx","gt","gte","has","hasIn","identical","identity","ifElse","condition","onTrue","onFalse","_ifElse","inc","insert","elt","splice","insertAll","elts","intersperse","separator","is","Ctor","isArrayLike","nodeType","isNil","keys","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","hasArgsEnumBug","contains","item","nIdx","ks","checkArgsLength","keysIn","NaN","lt","lte","mapAccum","tuple","mapAccumRight","rx","str","mathMod","m","maxBy","merge","l","r","mergeAll","concat","mergeWithKey","k","minBy","modulo","multiply","nAry","negate","none","not","nth","offset","charAt","nthArg","arity","objOf","of","once","called","or","over","Identity","map","lens","y","pair","fst","snd","paths","pathOr","pathSatisfies","propPath","pick","names","pickAll","name","pickBy","test","prepend","propIs","propOr","propSatisfies","props","ps","range","reduceRight","reduced","remove","count","regex","replacement","reverse","split","join","scan","set","fromIndex","toIndex","sort","sortBy","aa","bb","splitAt","index","array","splitEvery","splitWhen","prefix","subtract","Infinity","take","xs","takeLastWhile","takeWhile","tap","times","isNaN","RangeError","toPairs","toPairsIn","transpose","outerlist","innerlist","j","trim","ws","zeroWidth","hasProtoTrim","beginRx","endRx","tryCatch","_tryCatch","tryer","catcher","e","unapply","unary","uncurryN","depth","currentDepth","endIdx","unfold","seed","uniqWith","unless","whenFalseFn","until","update","useWith","transformers","values","vals","valuesIn","vs","view","Const","when","whenTrueFn","where","spec","testObj","wrap","wrapper","xprod","ilen","jlen","zip","rv","zipObj","zipWith","F","T","_clone","refFrom","refTo","deep","copy","copiedValue","valueOf","_createPartialApplicator","_dropLast","dropLast","_equals","stackA","stackB","equals","message","entries","keysA","pop","_makeFlat","recursive","flatt","_reduce","_arrayReduce","_iterableReduce","step","_methodReduce","reduce","symIterator","Symbol","iterator","_stepCat","_stepCatArray","_stepCatString","_stepCatObject","_xdropLastWhile","XDropLastWhile","retained","retain","flush","addIndex","origFn","binary","clone","curry","drop","filter","filterable","flatten","flip","intersectionWith","list1","list2","lookupList","filteredList","results","into","invert","invertObj","isEmpty","lastIndexOf","mapObjIndexed","mergeWith","_","_l","_r","partial","partialRight","pathEq","_path","pluck","project","propEq","reduceBy","reduceWhile","_reduceWhile","reject","repeat","sum","takeLast","transduce","unionWith","whereEq","_flatCat","preservingReduced","_xcat","rxf","_indexOf","inf","indexOf","_xchain","allPass","preds","anyPass","ap","applicative","applySpec","chain","monad","cond","constructN","Fn","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","converge","after","fns","context","countBy","elem","dropRepeatsWith","eqBy","eqProps","obj1","obj2","groupBy","indexBy","juxt","getter","setter","toFunctorFn","focus","lensIndex","lensPath","lensProp","liftN","lifted","mean","median","width","partition","pipe","pipeP","product","sequence","traversable","traverse","unnest","_contains","_toString","seen","recur","mapPairs","repr","compose","composeK","composeP","construct","difference","dropRepeats","lift","omit","pipeK","without","_Set","_nativeSet","Set","_items","hasOrAdd","shouldAdd","prevSize","newSize","size","bIdx","both","_both","complement","either","_either","invoker","method","memoize","cache","symmetricDifference","symmetricDifferenceWith","toLower","toUpper","uniqBy","appliedItem","uniq","intersection","union","R","exports","module","define","amd"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/ramda/dist/ramda.js"],"sourcesContent":["//  Ramda v0.22.1\n//  https://github.com/ramda/ramda\n//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n\n;(function() {\n\n  'use strict';\n\n  /**\n     * A special placeholder value used to specify \"gaps\" within curried functions,\n     * allowing partial application of any combination of arguments, regardless of\n     * their positions.\n     *\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are\n     * equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2, _)(1, 3)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @constant\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @example\n     *\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n     *      greet('Alice'); //=> 'Hello, Alice!'\n     */\n    var __ = { '@@functional/placeholder': true };\n\n    /* eslint-disable no-unused-vars */\n    var _arity = function _arity(n, fn) {\n        /* eslint-disable no-unused-vars */\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.apply(this, arguments);\n            };\n        case 1:\n            return function (a0) {\n                return fn.apply(this, arguments);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.apply(this, arguments);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.apply(this, arguments);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.apply(this, arguments);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.apply(this, arguments);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.apply(this, arguments);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.apply(this, arguments);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.apply(this, arguments);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.apply(this, arguments);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.apply(this, arguments);\n            };\n        default:\n            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n        }\n    };\n\n    var _arrayFromIterator = function _arrayFromIterator(iter) {\n        var list = [];\n        var next;\n        while (!(next = iter.next()).done) {\n            list.push(next.value);\n        }\n        return list;\n    };\n\n    var _arrayOf = function _arrayOf() {\n        return Array.prototype.slice.call(arguments);\n    };\n\n    var _cloneRegExp = function _cloneRegExp(pattern) {\n        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n    };\n\n    var _complement = function _complement(f) {\n        return function () {\n            return !f.apply(this, arguments);\n        };\n    };\n\n    /**\n     * Private `concat` function to merge two array-like objects.\n     *\n     * @private\n     * @param {Array|Arguments} [set1=[]] An array-like object.\n     * @param {Array|Arguments} [set2=[]] An array-like object.\n     * @return {Array} A new, merged array.\n     * @example\n     *\n     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     */\n    var _concat = function _concat(set1, set2) {\n        set1 = set1 || [];\n        set2 = set2 || [];\n        var idx;\n        var len1 = set1.length;\n        var len2 = set2.length;\n        var result = [];\n        idx = 0;\n        while (idx < len1) {\n            result[result.length] = set1[idx];\n            idx += 1;\n        }\n        idx = 0;\n        while (idx < len2) {\n            result[result.length] = set2[idx];\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _containsWith = function _containsWith(pred, x, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (pred(x, list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    };\n\n    var _filter = function _filter(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        while (idx < len) {\n            if (fn(list[idx])) {\n                result[result.length] = list[idx];\n            }\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _forceReduced = function _forceReduced(x) {\n        return {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n    var _functionName = function _functionName(f) {\n        // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n        var match = String(f).match(/^function (\\w*)/);\n        return match == null ? '' : match[1];\n    };\n\n    var _has = function _has(prop, obj) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    };\n\n    var _identity = function _identity(x) {\n        return x;\n    };\n\n    var _isArguments = function () {\n        var toString = Object.prototype.toString;\n        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n            return toString.call(x) === '[object Arguments]';\n        } : function _isArguments(x) {\n            return _has('callee', x);\n        };\n    }();\n\n    /**\n     * Tests whether or not an object is an array.\n     *\n     * @private\n     * @param {*} val The object to test.\n     * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n     * @example\n     *\n     *      _isArray([]); //=> true\n     *      _isArray(null); //=> false\n     *      _isArray({}); //=> false\n     */\n    var _isArray = Array.isArray || function _isArray(val) {\n        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n    };\n\n    var _isFunction = function _isFunction(x) {\n        return Object.prototype.toString.call(x) === '[object Function]';\n    };\n\n    /**\n     * Determine if the passed argument is an integer.\n     *\n     * @private\n     * @param {*} n\n     * @category Type\n     * @return {Boolean}\n     */\n    var _isInteger = Number.isInteger || function _isInteger(n) {\n        return n << 0 === n;\n    };\n\n    var _isNumber = function _isNumber(x) {\n        return Object.prototype.toString.call(x) === '[object Number]';\n    };\n\n    var _isObject = function _isObject(x) {\n        return Object.prototype.toString.call(x) === '[object Object]';\n    };\n\n    var _isPlaceholder = function _isPlaceholder(a) {\n        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n    };\n\n    var _isRegExp = function _isRegExp(x) {\n        return Object.prototype.toString.call(x) === '[object RegExp]';\n    };\n\n    var _isString = function _isString(x) {\n        return Object.prototype.toString.call(x) === '[object String]';\n    };\n\n    var _isTransformer = function _isTransformer(obj) {\n        return typeof obj['@@transducer/step'] === 'function';\n    };\n\n    var _map = function _map(fn, functor) {\n        var idx = 0;\n        var len = functor.length;\n        var result = Array(len);\n        while (idx < len) {\n            result[idx] = fn(functor[idx]);\n            idx += 1;\n        }\n        return result;\n    };\n\n    // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    var _objectAssign = function _objectAssign(target) {\n        if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        var idx = 1;\n        var length = arguments.length;\n        while (idx < length) {\n            var source = arguments[idx];\n            if (source != null) {\n                for (var nextKey in source) {\n                    if (_has(nextKey, source)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n            idx += 1;\n        }\n        return output;\n    };\n\n    var _of = function _of(x) {\n        return [x];\n    };\n\n    var _pipe = function _pipe(f, g) {\n        return function () {\n            return g.call(this, f.apply(this, arguments));\n        };\n    };\n\n    var _pipeP = function _pipeP(f, g) {\n        return function () {\n            var ctx = this;\n            return f.apply(ctx, arguments).then(function (x) {\n                return g.call(ctx, x);\n            });\n        };\n    };\n\n    // \\b matches word boundary; [\\b] matches backspace\n    var _quote = function _quote(s) {\n        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n    };\n\n    var _reduced = function _reduced(x) {\n        return x && x['@@transducer/reduced'] ? x : {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    /**\n     * An optimized, private array `slice` implementation.\n     *\n     * @private\n     * @param {Arguments|Array} args The array or arguments object to consider.\n     * @param {Number} [from=0] The array index to slice from, inclusive.\n     * @param {Number} [to=args.length] The array index to slice to, exclusive.\n     * @return {Array} A new, sliced array.\n     * @example\n     *\n     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n     *\n     *      var firstThreeArgs = function(a, b, c, d) {\n     *        return _slice(arguments, 0, 3);\n     *      };\n     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n     */\n    var _slice = function _slice(args, from, to) {\n        switch (arguments.length) {\n        case 1:\n            return _slice(args, 0, args.length);\n        case 2:\n            return _slice(args, from, args.length);\n        default:\n            var list = [];\n            var idx = 0;\n            var len = Math.max(0, Math.min(args.length, to) - from);\n            while (idx < len) {\n                list[idx] = args[from + idx];\n                idx += 1;\n            }\n            return list;\n        }\n    };\n\n    /**\n     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n     */\n    var _toISOString = function () {\n        var pad = function pad(n) {\n            return (n < 10 ? '0' : '') + n;\n        };\n        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n            return d.toISOString();\n        } : function _toISOString(d) {\n            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n        };\n    }();\n\n    var _xfBase = {\n        init: function () {\n            return this.xf['@@transducer/init']();\n        },\n        result: function (result) {\n            return this.xf['@@transducer/result'](result);\n        }\n    };\n\n    var _xwrap = function () {\n        function XWrap(fn) {\n            this.f = fn;\n        }\n        XWrap.prototype['@@transducer/init'] = function () {\n            throw new Error('init not implemented on XWrap');\n        };\n        XWrap.prototype['@@transducer/result'] = function (acc) {\n            return acc;\n        };\n        XWrap.prototype['@@transducer/step'] = function (acc, x) {\n            return this.f(acc, x);\n        };\n        return function _xwrap(fn) {\n            return new XWrap(fn);\n        };\n    }();\n\n    var _aperture = function _aperture(n, list) {\n        var idx = 0;\n        var limit = list.length - (n - 1);\n        var acc = new Array(limit >= 0 ? limit : 0);\n        while (idx < limit) {\n            acc[idx] = _slice(list, idx, idx + n);\n            idx += 1;\n        }\n        return acc;\n    };\n\n    var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\n    /**\n     * Similar to hasMethod, this checks whether a function has a [methodname]\n     * function. If it isn't an array it will execute that function otherwise it\n     * will default to the ramda implementation.\n     *\n     * @private\n     * @param {Function} fn ramda implemtation\n     * @param {String} methodname property to check for a custom implementation\n     * @return {Object} Whatever the return value of the method is.\n     */\n    var _checkForMethod = function _checkForMethod(methodname, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n        };\n    };\n\n    /**\n     * Optimized internal one-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry1 = function _curry1(fn) {\n        return function f1(a) {\n            if (arguments.length === 0 || _isPlaceholder(a)) {\n                return f1;\n            } else {\n                return fn.apply(this, arguments);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal two-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry2 = function _curry2(fn) {\n        return function f2(a, b) {\n            switch (arguments.length) {\n            case 0:\n                return f2;\n            case 1:\n                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n                    return fn(a, _b);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b);\n                }) : fn(a, b);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal three-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry3 = function _curry3(fn) {\n        return function f3(a, b, c) {\n            switch (arguments.length) {\n            case 0:\n                return f3;\n            case 1:\n                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                });\n            case 2:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _curry1(function (_c) {\n                    return fn(a, b, _c);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n                    return fn(_a, _b, c);\n                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b, c);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b, c);\n                }) : _isPlaceholder(c) ? _curry1(function (_c) {\n                    return fn(a, b, _c);\n                }) : fn(a, b, c);\n            }\n        };\n    };\n\n    /**\n     * Internal curryN function.\n     *\n     * @private\n     * @category Function\n     * @param {Number} length The arity of the curried function.\n     * @param {Array} received An array of arguments received thus far.\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curryN = function _curryN(length, received, fn) {\n        return function () {\n            var combined = [];\n            var argsIdx = 0;\n            var left = length;\n            var combinedIdx = 0;\n            while (combinedIdx < received.length || argsIdx < arguments.length) {\n                var result;\n                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n                    result = received[combinedIdx];\n                } else {\n                    result = arguments[argsIdx];\n                    argsIdx += 1;\n                }\n                combined[combinedIdx] = result;\n                if (!_isPlaceholder(result)) {\n                    left -= 1;\n                }\n                combinedIdx += 1;\n            }\n            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n        };\n    };\n\n    /**\n     * Returns a function that dispatches with different strategies based on the\n     * object in list position (last argument). If it is an array, executes [fn].\n     * Otherwise, if it has a function with [methodname], it will execute that\n     * function (functor case). Otherwise, if it is a transformer, uses transducer\n     * [xf] to return a new transformer (transducer case). Otherwise, it will\n     * default to executing [fn].\n     *\n     * @private\n     * @param {String} methodname property to check for a custom implementation\n     * @param {Function} xf transducer to initialize if object is transformer\n     * @param {Function} fn default ramda implementation\n     * @return {Function} A function that dispatches on object in list position\n     */\n    var _dispatchable = function _dispatchable(methodname, xf, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            if (!_isArray(obj)) {\n                var args = _slice(arguments, 0, length - 1);\n                if (typeof obj[methodname] === 'function') {\n                    return obj[methodname].apply(obj, args);\n                }\n                if (_isTransformer(obj)) {\n                    var transducer = xf.apply(null, args);\n                    return transducer(obj);\n                }\n            }\n            return fn.apply(this, arguments);\n        };\n    };\n\n    var _dropLastWhile = function dropLastWhile(pred, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && pred(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, 0, idx + 1);\n    };\n\n    var _xall = function () {\n        function XAll(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.all = true;\n        }\n        XAll.prototype['@@transducer/init'] = _xfBase.init;\n        XAll.prototype['@@transducer/result'] = function (result) {\n            if (this.all) {\n                result = this.xf['@@transducer/step'](result, true);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAll.prototype['@@transducer/step'] = function (result, input) {\n            if (!this.f(input)) {\n                this.all = false;\n                result = _reduced(this.xf['@@transducer/step'](result, false));\n            }\n            return result;\n        };\n        return _curry2(function _xall(f, xf) {\n            return new XAll(f, xf);\n        });\n    }();\n\n    var _xany = function () {\n        function XAny(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.any = false;\n        }\n        XAny.prototype['@@transducer/init'] = _xfBase.init;\n        XAny.prototype['@@transducer/result'] = function (result) {\n            if (!this.any) {\n                result = this.xf['@@transducer/step'](result, false);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAny.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.any = true;\n                result = _reduced(this.xf['@@transducer/step'](result, true));\n            }\n            return result;\n        };\n        return _curry2(function _xany(f, xf) {\n            return new XAny(f, xf);\n        });\n    }();\n\n    var _xaperture = function () {\n        function XAperture(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XAperture.prototype['@@transducer/init'] = _xfBase.init;\n        XAperture.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XAperture.prototype['@@transducer/step'] = function (result, input) {\n            this.store(input);\n            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n        };\n        XAperture.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        XAperture.prototype.getCopy = function () {\n            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n        };\n        return _curry2(function _xaperture(n, xf) {\n            return new XAperture(n, xf);\n        });\n    }();\n\n    var _xdrop = function () {\n        function XDrop(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XDrop.prototype['@@transducer/init'] = _xfBase.init;\n        XDrop.prototype['@@transducer/result'] = _xfBase.result;\n        XDrop.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n > 0) {\n                this.n -= 1;\n                return result;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdrop(n, xf) {\n            return new XDrop(n, xf);\n        });\n    }();\n\n    var _xdropLast = function () {\n        function XDropLast(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLast.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.full) {\n                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n            }\n            this.store(input);\n            return result;\n        };\n        XDropLast.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        return _curry2(function _xdropLast(n, xf) {\n            return new XDropLast(n, xf);\n        });\n    }();\n\n    var _xdropRepeatsWith = function () {\n        function XDropRepeatsWith(pred, xf) {\n            this.xf = xf;\n            this.pred = pred;\n            this.lastValue = undefined;\n            this.seenFirstValue = false;\n        }\n        XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n            return this.xf['@@transducer/init']();\n        };\n        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n            var sameAsLast = false;\n            if (!this.seenFirstValue) {\n                this.seenFirstValue = true;\n            } else if (this.pred(this.lastValue, input)) {\n                sameAsLast = true;\n            }\n            this.lastValue = input;\n            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropRepeatsWith(pred, xf) {\n            return new XDropRepeatsWith(pred, xf);\n        });\n    }();\n\n    var _xdropWhile = function () {\n        function XDropWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f) {\n                if (this.f(input)) {\n                    return result;\n                }\n                this.f = null;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropWhile(f, xf) {\n            return new XDropWhile(f, xf);\n        });\n    }();\n\n    var _xfilter = function () {\n        function XFilter(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFilter.prototype['@@transducer/init'] = _xfBase.init;\n        XFilter.prototype['@@transducer/result'] = _xfBase.result;\n        XFilter.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n        };\n        return _curry2(function _xfilter(f, xf) {\n            return new XFilter(f, xf);\n        });\n    }();\n\n    var _xfind = function () {\n        function XFind(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.found = false;\n        }\n        XFind.prototype['@@transducer/init'] = _xfBase.init;\n        XFind.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, void 0);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFind.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, input));\n            }\n            return result;\n        };\n        return _curry2(function _xfind(f, xf) {\n            return new XFind(f, xf);\n        });\n    }();\n\n    var _xfindIndex = function () {\n        function XFindIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.found = false;\n        }\n        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindIndex.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, -1);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n            }\n            return result;\n        };\n        return _curry2(function _xfindIndex(f, xf) {\n            return new XFindIndex(f, xf);\n        });\n    }();\n\n    var _xfindLast = function () {\n        function XFindLast(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLast.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n        };\n        XFindLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.last = input;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLast(f, xf) {\n            return new XFindLast(f, xf);\n        });\n    }();\n\n    var _xfindLastIndex = function () {\n        function XFindLastIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.lastIdx = -1;\n        }\n        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n        };\n        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.lastIdx = this.idx;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLastIndex(f, xf) {\n            return new XFindLastIndex(f, xf);\n        });\n    }();\n\n    var _xmap = function () {\n        function XMap(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XMap.prototype['@@transducer/init'] = _xfBase.init;\n        XMap.prototype['@@transducer/result'] = _xfBase.result;\n        XMap.prototype['@@transducer/step'] = function (result, input) {\n            return this.xf['@@transducer/step'](result, this.f(input));\n        };\n        return _curry2(function _xmap(f, xf) {\n            return new XMap(f, xf);\n        });\n    }();\n\n    var _xreduceBy = function () {\n        function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n            this.valueFn = valueFn;\n            this.valueAcc = valueAcc;\n            this.keyFn = keyFn;\n            this.xf = xf;\n            this.inputs = {};\n        }\n        XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n        XReduceBy.prototype['@@transducer/result'] = function (result) {\n            var key;\n            for (key in this.inputs) {\n                if (_has(key, this.inputs)) {\n                    result = this.xf['@@transducer/step'](result, this.inputs[key]);\n                    if (result['@@transducer/reduced']) {\n                        result = result['@@transducer/value'];\n                        break;\n                    }\n                }\n            }\n            this.inputs = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XReduceBy.prototype['@@transducer/step'] = function (result, input) {\n            var key = this.keyFn(input);\n            this.inputs[key] = this.inputs[key] || [\n                key,\n                this.valueAcc\n            ];\n            this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n            return result;\n        };\n        return _curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n            return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n        });\n    }();\n\n    var _xtake = function () {\n        function XTake(n, xf) {\n            this.xf = xf;\n            this.n = n;\n            this.i = 0;\n        }\n        XTake.prototype['@@transducer/init'] = _xfBase.init;\n        XTake.prototype['@@transducer/result'] = _xfBase.result;\n        XTake.prototype['@@transducer/step'] = function (result, input) {\n            this.i += 1;\n            var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n            return this.i >= this.n ? _reduced(ret) : ret;\n        };\n        return _curry2(function _xtake(n, xf) {\n            return new XTake(n, xf);\n        });\n    }();\n\n    var _xtakeWhile = function () {\n        function XTakeWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n        };\n        return _curry2(function _xtakeWhile(f, xf) {\n            return new XTakeWhile(f, xf);\n        });\n    }();\n\n    /**\n     * Adds two values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Number}\n     * @see R.subtract\n     * @example\n     *\n     *      R.add(2, 3);       //=>  5\n     *      R.add(7)(10);      //=> 17\n     */\n    var add = _curry2(function add(a, b) {\n        return Number(a) + Number(b);\n    });\n\n    /**\n     * Applies a function to the value at the given index of an array, returning a\n     * new copy of the array with the element at the given index replaced with the\n     * result of the function application.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a -> a) -> Number -> [a] -> [a]\n     * @param {Function} fn The function to apply.\n     * @param {Number} idx The index.\n     * @param {Array|Arguments} list An array-like object whose value\n     *        at the supplied index will be replaced.\n     * @return {Array} A copy of the supplied array-like object with\n     *         the element at index `idx` replaced with the value\n     *         returned by applying `fn` to the existing element.\n     * @see R.update\n     * @example\n     *\n     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var adjust = _curry3(function adjust(fn, idx, list) {\n        if (idx >= list.length || idx < -list.length) {\n            return list;\n        }\n        var start = idx < 0 ? list.length : 0;\n        var _idx = start + idx;\n        var _list = _concat(list);\n        _list[_idx] = fn(list[_idx]);\n        return _list;\n    });\n\n    /**\n     * Returns `true` if all elements of the list match the predicate, `false` if\n     * there are any that don't.\n     *\n     * Dispatches to the `all` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n     *         otherwise.\n     * @see R.any, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      var lessThan3 = R.flip(R.lt)(3);\n     *      R.all(lessThan2)([1, 2]); //=> false\n     *      R.all(lessThan3)([1, 2]); //=> true\n     */\n    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (!fn(list[idx])) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    }));\n\n    /**\n     * Returns a function that always returns the given value. Note that for\n     * non-primitives the value returned is a reference to the original value.\n     *\n     * This function is known as `const`, `constant`, or `K` (for K combinator) in\n     * other languages and libraries.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> (* -> a)\n     * @param {*} val The value to wrap in a function\n     * @return {Function} A Function :: * -> val.\n     * @example\n     *\n     *      var t = R.always('Tee');\n     *      t(); //=> 'Tee'\n     */\n    var always = _curry1(function always(val) {\n        return function () {\n            return val;\n        };\n    });\n\n    /**\n     * Returns `true` if both arguments are `true`; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n     * @see R.both\n     * @example\n     *\n     *      R.and(true, true); //=> true\n     *      R.and(true, false); //=> false\n     *      R.and(false, true); //=> false\n     *      R.and(false, false); //=> false\n     */\n    var and = _curry2(function and(a, b) {\n        return a && b;\n    });\n\n    /**\n     * Returns `true` if at least one of elements of the list match the predicate,\n     * `false` otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n     *         otherwise.\n     * @see R.all, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan0 = R.flip(R.lt)(0);\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      R.any(lessThan0)([1, 2]); //=> false\n     *      R.any(lessThan2)([1, 2]); //=> true\n     */\n    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (fn(list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    }));\n\n    /**\n     * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n     * greater than the length of the list, an empty list is returned.\n     *\n     * Dispatches to the `aperture` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @param {Number} n The size of the tuples to create\n     * @param {Array} list The list to split into `n`-tuples\n     * @return {Array} The new list.\n     * @see R.transduce\n     * @example\n     *\n     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n     */\n    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n\n    /**\n     * Returns a new list containing the contents of the given list, followed by\n     * the given element.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The element to add to the end of the new list.\n     * @param {Array} list The list whose contents will be added to the beginning of the output\n     *        list.\n     * @return {Array} A new list containing the contents of the old list followed by `el`.\n     * @see R.prepend\n     * @example\n     *\n     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     *      R.append('tests', []); //=> ['tests']\n     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n     */\n    var append = _curry2(function append(el, list) {\n        return _concat(list, [el]);\n    });\n\n    /**\n     * Applies function `fn` to the argument list `args`. This is useful for\n     * creating a fixed-arity function from a variadic function. `fn` should be a\n     * bound function if context is significant.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> a) -> [*] -> a\n     * @param {Function} fn\n     * @param {Array} args\n     * @return {*}\n     * @see R.call, R.unapply\n     * @example\n     *\n     *      var nums = [1, 2, 3, -99, 42, 6, 7];\n     *      R.apply(Math.max, nums); //=> 42\n     */\n    var apply = _curry2(function apply(fn, args) {\n        return fn.apply(this, args);\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the specified\n     * property with the given value. Note that this copies and flattens prototype\n     * properties onto the new object as well. All non-primitive properties are\n     * copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig String -> a -> {k: v} -> {k: v}\n     * @param {String} prop the property name to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except for the specified property.\n     * @see R.dissoc\n     * @example\n     *\n     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n     */\n    var assoc = _curry3(function assoc(prop, val, obj) {\n        var result = {};\n        for (var p in obj) {\n            result[p] = obj[p];\n        }\n        result[prop] = val;\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the nodes required\n     * to create the given path, and placing the specific value at the tail end of\n     * that path. Note that this copies and flattens prototype properties onto the\n     * new object as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig [String] -> a -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except along the specified path.\n     * @see R.dissocPath\n     * @example\n     *\n     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n     */\n    var assocPath = _curry3(function assocPath(path, val, obj) {\n        switch (path.length) {\n        case 0:\n            return val;\n        case 1:\n            return assoc(path[0], val, obj);\n        default:\n            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n        }\n    });\n\n    /**\n     * Creates a function that is bound to a context.\n     * Note: `R.bind` does not provide the additional argument-binding capabilities of\n     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @category Object\n     * @sig (* -> *) -> {*} -> (* -> *)\n     * @param {Function} fn The function to bind to context\n     * @param {Object} thisObj The context to bind `fn` to\n     * @return {Function} A function that will execute in the context of `thisObj`.\n     * @see R.partial\n     * @example\n     *\n     *      var log = R.bind(console.log, console);\n     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n     *      // logs {a: 2}\n     */\n    var bind = _curry2(function bind(fn, thisObj) {\n        return _arity(fn.length, function () {\n            return fn.apply(thisObj, arguments);\n        });\n    });\n\n    /**\n     * Restricts a number to be within a range.\n     *\n     * Also works for other ordered types such as Strings and Dates.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a -> a\n     * @param {Number} minimum number\n     * @param {Number} maximum number\n     * @param {Number} value to be clamped\n     * @return {Number} Returns the clamped value\n     * @example\n     *\n     *      R.clamp(1, 10, -1) // => 1\n     *      R.clamp(1, 10, 11) // => 10\n     *      R.clamp(1, 10, 4)  // => 4\n     */\n    var clamp = _curry3(function clamp(min, max, value) {\n        if (min > max) {\n            throw new Error('min must not be greater than max in clamp(min, max, value)');\n        }\n        return value < min ? min : value > max ? max : value;\n    });\n\n    /**\n     * Makes a comparator function out of a function that reports whether the first\n     * element is less than the second.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a, b -> Boolean) -> (a, b -> Number)\n     * @param {Function} pred A predicate function of arity two.\n     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n     * @example\n     *\n     *      var cmp = R.comparator((a, b) => a.age < b.age);\n     *      var people = [\n     *        // ...\n     *      ];\n     *      R.sort(cmp, people);\n     */\n    var comparator = _curry1(function comparator(pred) {\n        return function (a, b) {\n            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n        };\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function, with the specified\n     * arity. The curried function has two unusual capabilities. First, its\n     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curry\n     * @example\n     *\n     *      var sumArgs = (...args) => R.sum(args);\n     *\n     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curryN = _curry2(function curryN(length, fn) {\n        if (length === 1) {\n            return _curry1(fn);\n        }\n        return _arity(length, _curryN(length, [], fn));\n    });\n\n    /**\n     * Decrements its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.inc\n     * @example\n     *\n     *      R.dec(42); //=> 41\n     */\n    var dec = add(-1);\n\n    /**\n     * Returns the second argument if it is not `null`, `undefined` or `NaN`\n     * otherwise the first argument is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Logic\n     * @sig a -> b -> a | b\n     * @param {a} val The default value.\n     * @param {b} val The value to return if it is not null or undefined\n     * @return {*} The the second value or the default value\n     * @example\n     *\n     *      var defaultTo42 = R.defaultTo(42);\n     *\n     *      defaultTo42(null);  //=> 42\n     *      defaultTo42(undefined);  //=> 42\n     *      defaultTo42('Ramda');  //=> 'Ramda'\n     *      defaultTo42(parseInt('string')); //=> 42\n     */\n    var defaultTo = _curry2(function defaultTo(d, v) {\n        return v == null || v !== v ? d : v;\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n     * @example\n     *\n     *      var cmp = (x, y) => x.a === y.a;\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n     *      var l2 = [{a: 3}, {a: 4}];\n     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n     */\n    var differenceWith = _curry3(function differenceWith(pred, first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n                out.push(first[idx]);\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object that does not contain a `prop` property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Object\n     * @sig String -> {k: v} -> {k: v}\n     * @param {String} prop the name of the property to dissociate\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original but without the specified property\n     * @see R.assoc\n     * @example\n     *\n     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n     */\n    var dissoc = _curry2(function dissoc(prop, obj) {\n        var result = {};\n        for (var p in obj) {\n            if (p !== prop) {\n                result[p] = obj[p];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, omitting the property at the given path.\n     * Note that this copies and flattens prototype properties onto the new object\n     * as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.11.0\n     * @category Object\n     * @sig [String] -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object without the property at path\n     * @see R.assocPath\n     * @example\n     *\n     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n     */\n    var dissocPath = _curry2(function dissocPath(path, obj) {\n        switch (path.length) {\n        case 0:\n            return obj;\n        case 1:\n            return dissoc(path[0], obj);\n        default:\n            var head = path[0];\n            var tail = _slice(path, 1);\n            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n        }\n    });\n\n    /**\n     * Divides two numbers. Equivalent to `a / b`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a / b`.\n     * @see R.multiply\n     * @example\n     *\n     *      R.divide(71, 100); //=> 0.71\n     *\n     *      var half = R.divide(R.__, 2);\n     *      half(42); //=> 21\n     *\n     *      var reciprocal = R.divide(1);\n     *      reciprocal(4);   //=> 0.25\n     */\n    var divide = _curry2(function divide(a, b) {\n        return a / b;\n    });\n\n    /**\n     * Returns a new list excluding the leading elements of a given list which\n     * satisfy the supplied predicate function. It passes each value to the supplied\n     * predicate function, skipping elements while the predicate function returns\n     * `true`. The predicate function is applied to one argument: *(value)*.\n     *\n     * Dispatches to the `dropWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var lteTwo = x => x <= 2;\n     *\n     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n     */\n    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && pred(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, idx);\n    }));\n\n    /**\n     * Returns the empty value of its argument's type. Ramda defines the empty\n     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n     * types are supported if they define `<Type>.empty` and/or\n     * `<Type>.prototype.empty`.\n     *\n     * Dispatches to the `empty` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x\n     * @return {*}\n     * @example\n     *\n     *      R.empty(Just(42));      //=> Nothing()\n     *      R.empty([1, 2, 3]);     //=> []\n     *      R.empty('unicorns');    //=> ''\n     *      R.empty({x: 1, y: 2});  //=> {}\n     */\n    // else\n    var empty = _curry1(function empty(x) {\n        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n            return arguments;\n        }() : // else\n        void 0;\n    });\n\n    /**\n     * Creates a new object by recursively evolving a shallow copy of `object`,\n     * according to the `transformation` functions. All non-primitive properties\n     * are copied by reference.\n     *\n     * A `transformation` function will not be invoked if its corresponding key\n     * does not exist in the evolved object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n     * @param {Object} transformations The object specifying transformation functions to apply\n     *        to the object.\n     * @param {Object} object The object to be transformed.\n     * @return {Object} The transformed object.\n     * @example\n     *\n     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n     *      var transformations = {\n     *        firstName: R.trim,\n     *        lastName: R.trim, // Will not get invoked.\n     *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n     *      };\n     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n     */\n    var evolve = _curry2(function evolve(transformations, object) {\n        var result = {};\n        var transformation, key, type;\n        for (key in object) {\n            transformation = transformations[key];\n            type = typeof transformation;\n            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n        }\n        return result;\n    });\n\n    /**\n     * Returns the first element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `find` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     *        desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n     *      R.find(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx += 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the first element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Returns the last element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `findLast` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx -= 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the last element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findLastIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx -= 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Iterate over an input `list`, calling a provided function `fn` for each\n     * element in the list.\n     *\n     * `fn` receives one argument: *(value)*.\n     *\n     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.forEach` method. For more\n     * details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n     *\n     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n     * the original array. In some libraries this function is named `each`.\n     *\n     * Dispatches to the `forEach` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> *) -> [a] -> [a]\n     * @param {Function} fn The function to invoke. Receives one argument, `value`.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} The original list.\n     * @see R.addIndex\n     * @example\n     *\n     *      var printXPlusFive = x => console.log(x + 5);\n     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n     *      // logs 6\n     *      // logs 7\n     *      // logs 8\n     */\n    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            fn(list[idx]);\n            idx += 1;\n        }\n        return list;\n    }));\n\n    /**\n     * Creates a new object from a list key-value pairs. If a key appears in\n     * multiple pairs, the rightmost pair is included in the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [[k,v]] -> {k: v}\n     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n     * @return {Object} The object made by pairing up `keys` and `values`.\n     * @see R.toPairs, R.pair\n     * @example\n     *\n     *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n     */\n    var fromPairs = _curry1(function fromPairs(pairs) {\n        var result = {};\n        var idx = 0;\n        while (idx < pairs.length) {\n            result[pairs[idx][0]] = pairs[idx][1];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and returns a list of lists where each sublist's elements are\n     * all \"equal\" according to the provided equality function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.21.0\n     * @category List\n     * @sig ((a, a) → Boolean) → [a] → [[a]]\n     * @param {Function} fn Function for determining whether two given (adjacent)\n     *        elements should be in the same group\n     * @param {Array} list The array to group. Also accepts a string, which will be\n     *        treated as a list of characters.\n     * @return {List} A list that contains sublists of equal elements,\n     *         whose concatenations are equal to the original list.\n     * @example\n     *\n     * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n     * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n     *\n     * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n     * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n     *\n     * R.groupWith(R.eqBy(isVowel), 'aestiou')\n     * //=> ['ae', 'st', 'iou']\n     */\n    var groupWith = _curry2(function (fn, list) {\n        var res = [];\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            var nextidx = idx + 1;\n            while (nextidx < len && fn(list[idx], list[nextidx])) {\n                nextidx += 1;\n            }\n            res.push(list.slice(idx, nextidx));\n            idx = nextidx;\n        }\n        return res;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.lt\n     * @example\n     *\n     *      R.gt(2, 1); //=> true\n     *      R.gt(2, 2); //=> false\n     *      R.gt(2, 3); //=> false\n     *      R.gt('a', 'z'); //=> false\n     *      R.gt('z', 'a'); //=> true\n     */\n    var gt = _curry2(function gt(a, b) {\n        return a > b;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.lte\n     * @example\n     *\n     *      R.gte(2, 1); //=> true\n     *      R.gte(2, 2); //=> true\n     *      R.gte(2, 3); //=> false\n     *      R.gte('a', 'z'); //=> false\n     *      R.gte('z', 'a'); //=> true\n     */\n    var gte = _curry2(function gte(a, b) {\n        return a >= b;\n    });\n\n    /**\n     * Returns whether or not an object has an own property with the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      var hasName = R.has('name');\n     *      hasName({name: 'alice'});   //=> true\n     *      hasName({name: 'bob'});     //=> true\n     *      hasName({});                //=> false\n     *\n     *      var point = {x: 0, y: 0};\n     *      var pointHas = R.has(R.__, point);\n     *      pointHas('x');  //=> true\n     *      pointHas('y');  //=> true\n     *      pointHas('z');  //=> false\n     */\n    var has = _curry2(_has);\n\n    /**\n     * Returns whether or not an object or its prototype chain has a property with\n     * the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      function Rectangle(width, height) {\n     *        this.width = width;\n     *        this.height = height;\n     *      }\n     *      Rectangle.prototype.area = function() {\n     *        return this.width * this.height;\n     *      };\n     *\n     *      var square = new Rectangle(2, 2);\n     *      R.hasIn('width', square);  //=> true\n     *      R.hasIn('area', square);  //=> true\n     */\n    var hasIn = _curry2(function hasIn(prop, obj) {\n        return prop in obj;\n    });\n\n    /**\n     * Returns true if its arguments are identical, false otherwise. Values are\n     * identical if they reference the same memory. `NaN` is identical to `NaN`;\n     * `0` and `-0` are not identical.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      var o = {};\n     *      R.identical(o, o); //=> true\n     *      R.identical(1, 1); //=> true\n     *      R.identical(1, '1'); //=> false\n     *      R.identical([], []); //=> false\n     *      R.identical(0, -0); //=> false\n     *      R.identical(NaN, NaN); //=> true\n     */\n    // SameValue algorithm\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Step 6.a: NaN == NaN\n    var identical = _curry2(function identical(a, b) {\n        // SameValue algorithm\n        if (a === b) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return a !== 0 || 1 / a === 1 / b;\n        } else {\n            // Step 6.a: NaN == NaN\n            return a !== a && b !== b;\n        }\n    });\n\n    /**\n     * A function that does nothing but return the parameter supplied to it. Good\n     * as a default or placeholder function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x The value to return.\n     * @return {*} The input value, `x`.\n     * @example\n     *\n     *      R.identity(1); //=> 1\n     *\n     *      var obj = {};\n     *      R.identity(obj) === obj; //=> true\n     */\n    var identity = _curry1(_identity);\n\n    /**\n     * Creates a function that will process either the `onTrue` or the `onFalse`\n     * function depending upon the result of the `condition` predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n     * @param {Function} condition A predicate function\n     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n     *                    function depending upon the result of the `condition` predicate.\n     * @see R.unless, R.when\n     * @example\n     *\n     *      var incCount = R.ifElse(\n     *        R.has('count'),\n     *        R.over(R.lensProp('count'), R.inc),\n     *        R.assoc('count', 1)\n     *      );\n     *      incCount({});           //=> { count: 1 }\n     *      incCount({ count: 1 }); //=> { count: 2 }\n     */\n    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n        });\n    });\n\n    /**\n     * Increments its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.dec\n     * @example\n     *\n     *      R.inc(42); //=> 43\n     */\n    var inc = add(1);\n\n    /**\n     * Inserts the supplied element into the list, at index `index`. _Note that\n     * this is not destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} index The position to insert the element\n     * @param {*} elt The element to insert into the Array\n     * @param {Array} list The list to insert into\n     * @return {Array} A new Array with `elt` inserted at `index`.\n     * @example\n     *\n     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n     */\n    var insert = _curry3(function insert(idx, elt, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        var result = _slice(list);\n        result.splice(idx, 0, elt);\n        return result;\n    });\n\n    /**\n     * Inserts the sub-list into the list, at index `index`. _Note that this is not\n     * destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig Number -> [a] -> [a] -> [a]\n     * @param {Number} index The position to insert the sub-list\n     * @param {Array} elts The sub-list to insert into the Array\n     * @param {Array} list The list to insert the sub-list into\n     * @return {Array} A new Array with `elts` inserted starting at `index`.\n     * @example\n     *\n     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n     */\n    var insertAll = _curry3(function insertAll(idx, elts, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n    });\n\n    /**\n     * Creates a new list with the separator interposed between elements.\n     *\n     * Dispatches to the `intersperse` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} separator The element to add to the list.\n     * @param {Array} list The list to be interposed.\n     * @return {Array} The new list.\n     * @example\n     *\n     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n     */\n    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n        var out = [];\n        var idx = 0;\n        var length = list.length;\n        while (idx < length) {\n            if (idx === length - 1) {\n                out.push(list[idx]);\n            } else {\n                out.push(list[idx], separator);\n            }\n            idx += 1;\n        }\n        return out;\n    }));\n\n    /**\n     * See if an object (`val`) is an instance of the supplied constructor. This\n     * function will check up the inheritance chain, if any.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Type\n     * @sig (* -> {*}) -> a -> Boolean\n     * @param {Object} ctor A constructor\n     * @param {*} val The value to test\n     * @return {Boolean}\n     * @example\n     *\n     *      R.is(Object, {}); //=> true\n     *      R.is(Number, 1); //=> true\n     *      R.is(Object, 1); //=> false\n     *      R.is(String, 's'); //=> true\n     *      R.is(String, new String('')); //=> true\n     *      R.is(Object, new String('')); //=> true\n     *      R.is(Object, 's'); //=> false\n     *      R.is(Number, {}); //=> false\n     */\n    var is = _curry2(function is(Ctor, val) {\n        return val != null && val.constructor === Ctor || val instanceof Ctor;\n    });\n\n    /**\n     * Tests whether or not an object is similar to an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Type\n     * @category List\n     * @sig * -> Boolean\n     * @param {*} x The object to test.\n     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n     * @example\n     *\n     *      R.isArrayLike([]); //=> true\n     *      R.isArrayLike(true); //=> false\n     *      R.isArrayLike({}); //=> false\n     *      R.isArrayLike({length: 10}); //=> false\n     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n     */\n    var isArrayLike = _curry1(function isArrayLike(x) {\n        if (_isArray(x)) {\n            return true;\n        }\n        if (!x) {\n            return false;\n        }\n        if (typeof x !== 'object') {\n            return false;\n        }\n        if (_isString(x)) {\n            return false;\n        }\n        if (x.nodeType === 1) {\n            return !!x.length;\n        }\n        if (x.length === 0) {\n            return true;\n        }\n        if (x.length > 0) {\n            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n        }\n        return false;\n    });\n\n    /**\n     * Checks if the input value is `null` or `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Type\n     * @sig * -> Boolean\n     * @param {*} x The value to test.\n     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n     * @example\n     *\n     *      R.isNil(null); //=> true\n     *      R.isNil(undefined); //=> true\n     *      R.isNil(0); //=> false\n     *      R.isNil([]); //=> false\n     */\n    var isNil = _curry1(function isNil(x) {\n        return x == null;\n    });\n\n    /**\n     * Returns a list containing the names of all the enumerable own properties of\n     * the supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own properties.\n     * @example\n     *\n     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n     */\n    // cover IE < 9 keys issues\n    // Safari bug\n    var keys = function () {\n        // cover IE < 9 keys issues\n        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n        var nonEnumerableProps = [\n            'constructor',\n            'valueOf',\n            'isPrototypeOf',\n            'toString',\n            'propertyIsEnumerable',\n            'hasOwnProperty',\n            'toLocaleString'\n        ];\n        // Safari bug\n        var hasArgsEnumBug = function () {\n            'use strict';\n            return arguments.propertyIsEnumerable('length');\n        }();\n        var contains = function contains(list, item) {\n            var idx = 0;\n            while (idx < list.length) {\n                if (list[idx] === item) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        };\n        return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {\n            return Object(obj) !== obj ? [] : Object.keys(obj);\n        }) : _curry1(function keys(obj) {\n            if (Object(obj) !== obj) {\n                return [];\n            }\n            var prop, nIdx;\n            var ks = [];\n            var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n            for (prop in obj) {\n                if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n                    ks[ks.length] = prop;\n                }\n            }\n            if (hasEnumBug) {\n                nIdx = nonEnumerableProps.length - 1;\n                while (nIdx >= 0) {\n                    prop = nonEnumerableProps[nIdx];\n                    if (_has(prop, obj) && !contains(ks, prop)) {\n                        ks[ks.length] = prop;\n                    }\n                    nIdx -= 1;\n                }\n            }\n            return ks;\n        });\n    }();\n\n    /**\n     * Returns a list containing the names of all the properties of the supplied\n     * object, including prototype properties.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.keysIn(f); //=> ['x', 'y']\n     */\n    var keysIn = _curry1(function keysIn(obj) {\n        var prop;\n        var ks = [];\n        for (prop in obj) {\n            ks[ks.length] = prop;\n        }\n        return ks;\n    });\n\n    /**\n     * Returns the number of elements in the array by returning `list.length`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [a] -> Number\n     * @param {Array} list The array to inspect.\n     * @return {Number} The length of the array.\n     * @example\n     *\n     *      R.length([]); //=> 0\n     *      R.length([1, 2, 3]); //=> 3\n     */\n    var length = _curry1(function length(list) {\n        return list != null && _isNumber(list.length) ? list.length : NaN;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.gt\n     * @example\n     *\n     *      R.lt(2, 1); //=> false\n     *      R.lt(2, 2); //=> false\n     *      R.lt(2, 3); //=> true\n     *      R.lt('a', 'z'); //=> true\n     *      R.lt('z', 'a'); //=> false\n     */\n    var lt = _curry2(function lt(a, b) {\n        return a < b;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.gte\n     * @example\n     *\n     *      R.lte(2, 1); //=> false\n     *      R.lte(2, 2); //=> true\n     *      R.lte(2, 3); //=> true\n     *      R.lte('a', 'z'); //=> true\n     *      R.lte('z', 'a'); //=> false\n     */\n    var lte = _curry2(function lte(a, b) {\n        return a <= b;\n    });\n\n    /**\n     * The mapAccum function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from left to right, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var appender = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n     */\n    var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var tuple = [acc];\n        while (idx < len) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx += 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * The mapAccumRight function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from right to left, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * Similar to `mapAccum`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n     */\n    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n        var idx = list.length - 1;\n        var result = [];\n        var tuple = [acc];\n        while (idx >= 0) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx -= 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * Tests a regular expression against a String. Note that this function will\n     * return an empty array when there are no matches. This differs from\n     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n     * which returns `null` when there are no matches.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig RegExp -> String -> [String | Undefined]\n     * @param {RegExp} rx A regular expression.\n     * @param {String} str The string to match against\n     * @return {Array} The list of matches or empty array.\n     * @see R.test\n     * @example\n     *\n     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n     *      R.match(/a/, 'b'); //=> []\n     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n     */\n    var match = _curry2(function match(rx, str) {\n        return str.match(rx) || [];\n    });\n\n    /**\n     * mathMod behaves like the modulo operator should mathematically, unlike the\n     * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n     * when the modulus is zero or negative.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} m The dividend.\n     * @param {Number} p the modulus.\n     * @return {Number} The result of `b mod a`.\n     * @example\n     *\n     *      R.mathMod(-17, 5);  //=> 3\n     *      R.mathMod(17, 5);   //=> 2\n     *      R.mathMod(17, -5);  //=> NaN\n     *      R.mathMod(17, 0);   //=> NaN\n     *      R.mathMod(17.2, 5); //=> NaN\n     *      R.mathMod(17, 5.3); //=> NaN\n     *\n     *      var clock = R.mathMod(R.__, 12);\n     *      clock(15); //=> 3\n     *      clock(24); //=> 0\n     *\n     *      var seventeenMod = R.mathMod(17);\n     *      seventeenMod(3);  //=> 2\n     *      seventeenMod(4);  //=> 1\n     *      seventeenMod(10); //=> 7\n     */\n    var mathMod = _curry2(function mathMod(m, p) {\n        if (!_isInteger(m)) {\n            return NaN;\n        }\n        if (!_isInteger(p) || p < 1) {\n            return NaN;\n        }\n        return (m % p + p) % p;\n    });\n\n    /**\n     * Returns the larger of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.maxBy, R.min\n     * @example\n     *\n     *      R.max(789, 123); //=> 789\n     *      R.max('a', 'b'); //=> 'b'\n     */\n    var max = _curry2(function max(a, b) {\n        return b > a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * larger result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.max, R.minBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.maxBy(square, -3, 2); //=> -3\n     *\n     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n     *      R.reduce(R.maxBy(square), 0, []); //=> 0\n     */\n    var maxBy = _curry3(function maxBy(f, a, b) {\n        return f(b) > f(a) ? b : a;\n    });\n\n    /**\n     * Create a new object with the own properties of the first object merged with\n     * the own properties of the second object. If a key exists in both objects,\n     * the value from the second object will be used.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> {k: v} -> {k: v}\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.mergeWith, R.mergeWithKey\n     * @example\n     *\n     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n     *      //=> { 'name': 'fred', 'age': 40 }\n     *\n     *      var resetToDefault = R.merge(R.__, {x: 0});\n     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n     */\n    var merge = _curry2(function merge(l, r) {\n        return _assign({}, l, r);\n    });\n\n    /**\n     * Merges a list of objects together into one object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig [{k: v}] -> {k: v}\n     * @param {Array} list An array of objects\n     * @return {Object} A merged object.\n     * @see R.reduce\n     * @example\n     *\n     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n     */\n    var mergeAll = _curry1(function mergeAll(list) {\n        return _assign.apply(null, [{}].concat(list));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the key\n     * and the values associated with the key in each object, with the result being\n     * used as the value associated with the key in the returned object. The key\n     * will be excluded from the returned object if the resulting value is\n     * `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWith\n     * @example\n     *\n     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n     *      R.mergeWithKey(concatValues,\n     *                     { a: true, thing: 'foo', values: [10, 20] },\n     *                     { b: true, thing: 'bar', values: [15, 35] });\n     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n     */\n    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n        var result = {};\n        var k;\n        for (k in l) {\n            if (_has(k, l)) {\n                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n            }\n        }\n        for (k in r) {\n            if (_has(k, r) && !_has(k, result)) {\n                result[k] = r[k];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the smaller of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.minBy, R.max\n     * @example\n     *\n     *      R.min(789, 123); //=> 123\n     *      R.min('a', 'b'); //=> 'a'\n     */\n    var min = _curry2(function min(a, b) {\n        return b < a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * smaller result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.min, R.maxBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.minBy(square, -3, 2); //=> 2\n     *\n     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n     */\n    var minBy = _curry3(function minBy(f, a, b) {\n        return f(b) < f(a) ? b : a;\n    });\n\n    /**\n     * Divides the first parameter by the second and returns the remainder. Note\n     * that this function preserves the JavaScript-style behavior for modulo. For\n     * mathematical modulo see `mathMod`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The value to the divide.\n     * @param {Number} b The pseudo-modulus\n     * @return {Number} The result of `b % a`.\n     * @see R.mathMod\n     * @example\n     *\n     *      R.modulo(17, 3); //=> 2\n     *      // JS behavior:\n     *      R.modulo(-17, 3); //=> -2\n     *      R.modulo(17, -3); //=> 2\n     *\n     *      var isOdd = R.modulo(R.__, 2);\n     *      isOdd(42); //=> 0\n     *      isOdd(21); //=> 1\n     */\n    var modulo = _curry2(function modulo(a, b) {\n        return a % b;\n    });\n\n    /**\n     * Multiplies two numbers. Equivalent to `a * b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a * b`.\n     * @see R.divide\n     * @example\n     *\n     *      var double = R.multiply(2);\n     *      var triple = R.multiply(3);\n     *      double(3);       //=>  6\n     *      triple(4);       //=> 12\n     *      R.multiply(2, 5);  //=> 10\n     */\n    var multiply = _curry2(function multiply(a, b) {\n        return a * b;\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly `n` parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} n The desired arity of the new function.\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity `n`.\n     * @example\n     *\n     *      var takesTwoArgs = (a, b) => [a, b];\n     *\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.nAry(1, takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only `n` arguments are passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var nAry = _curry2(function nAry(n, fn) {\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.call(this);\n            };\n        case 1:\n            return function (a0) {\n                return fn.call(this, a0);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.call(this, a0, a1);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.call(this, a0, a1, a2);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.call(this, a0, a1, a2, a3);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.call(this, a0, a1, a2, a3, a4);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n            };\n        default:\n            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n        }\n    });\n\n    /**\n     * Negates its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @example\n     *\n     *      R.negate(42); //=> -42\n     */\n    var negate = _curry1(function negate(n) {\n        return -n;\n    });\n\n    /**\n     * Returns `true` if no elements of the list match the predicate, `false`\n     * otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n     * @see R.all, R.any\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n     *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n     */\n    var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n\n    /**\n     * A function that returns the `!` of its argument. It will return `true` when\n     * passed false-y value, and `false` when passed a truth-y one.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> Boolean\n     * @param {*} a any value\n     * @return {Boolean} the logical inverse of passed argument.\n     * @see R.complement\n     * @example\n     *\n     *      R.not(true); //=> false\n     *      R.not(false); //=> true\n     *      R.not(0); //=> true\n     *      R.not(1); //=> false\n     */\n    var not = _curry1(function not(a) {\n        return !a;\n    });\n\n    /**\n     * Returns the nth element of the given list or string. If n is negative the\n     * element at index length + n is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> a | Undefined\n     * @sig Number -> String -> String\n     * @param {Number} offset\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      var list = ['foo', 'bar', 'baz', 'quux'];\n     *      R.nth(1, list); //=> 'bar'\n     *      R.nth(-1, list); //=> 'quux'\n     *      R.nth(-99, list); //=> undefined\n     *\n     *      R.nth(2, 'abc'); //=> 'c'\n     *      R.nth(3, 'abc'); //=> ''\n     */\n    var nth = _curry2(function nth(offset, list) {\n        var idx = offset < 0 ? list.length + offset : offset;\n        return _isString(list) ? list.charAt(idx) : list[idx];\n    });\n\n    /**\n     * Returns a function which returns its nth argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig Number -> *... -> *\n     * @param {Number} n\n     * @return {Function}\n     * @example\n     *\n     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n     */\n    var nthArg = _curry1(function nthArg(n) {\n        var arity = n < 0 ? 1 : n + 1;\n        return curryN(arity, function () {\n            return nth(n, arguments);\n        });\n    });\n\n    /**\n     * Creates an object containing a single key:value pair.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig String -> a -> {String:a}\n     * @param {String} key\n     * @param {*} val\n     * @return {Object}\n     * @see R.pair\n     * @example\n     *\n     *      var matchPhrases = R.compose(\n     *        R.objOf('must'),\n     *        R.map(R.objOf('match_phrase'))\n     *      );\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */\n    var objOf = _curry2(function objOf(key, val) {\n        var obj = {};\n        obj[key] = val;\n        return obj;\n    });\n\n    /**\n     * Returns a singleton array containing the value provided.\n     *\n     * Note this `of` is different from the ES6 `of`; See\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> [a]\n     * @param {*} x any value\n     * @return {Array} An array wrapping `x`.\n     * @example\n     *\n     *      R.of(null); //=> [null]\n     *      R.of([42]); //=> [[42]]\n     */\n    var of = _curry1(_of);\n\n    /**\n     * Accepts a function `fn` and returns a function that guards invocation of\n     * `fn` such that `fn` can only ever be called once, no matter how many times\n     * the returned function is invoked. The first value calculated is returned in\n     * subsequent invocations.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> (a... -> b)\n     * @param {Function} fn The function to wrap in a call-only-once wrapper.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var addOneOnce = R.once(x => x + 1);\n     *      addOneOnce(10); //=> 11\n     *      addOneOnce(addOneOnce(50)); //=> 11\n     */\n    var once = _curry1(function once(fn) {\n        var called = false;\n        var result;\n        return _arity(fn.length, function () {\n            if (called) {\n                return result;\n            }\n            called = true;\n            result = fn.apply(this, arguments);\n            return result;\n        });\n    });\n\n    /**\n     * Returns `true` if one or both of its arguments are `true`. Returns `false`\n     * if both arguments are `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n     * @see R.either\n     * @example\n     *\n     *      R.or(true, true); //=> true\n     *      R.or(true, false); //=> true\n     *      R.or(false, true); //=> true\n     *      R.or(false, false); //=> false\n     */\n    var or = _curry2(function or(a, b) {\n        return a || b;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the result of applying the given function to\n     * the focused value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> (a -> a) -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n     */\n    // `Identity` is a functor that holds a single value, where `map` simply\n    // transforms the held value with the provided function.\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    var over = function () {\n        // `Identity` is a functor that holds a single value, where `map` simply\n        // transforms the held value with the provided function.\n        var Identity = function (x) {\n            return {\n                value: x,\n                map: function (f) {\n                    return Identity(f(x));\n                }\n            };\n        };\n        return _curry3(function over(lens, f, x) {\n            // The value returned by the getter function is first transformed with `f`,\n            // then set as the value of an `Identity`. This is then mapped over with the\n            // setter function of the lens.\n            return lens(function (y) {\n                return Identity(f(y));\n            })(x).value;\n        });\n    }();\n\n    /**\n     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig a -> b -> (a,b)\n     * @param {*} fst\n     * @param {*} snd\n     * @return {Array}\n     * @see R.objOf, R.of\n     * @example\n     *\n     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n     */\n    var pair = _curry2(function pair(fst, snd) {\n        return [\n            fst,\n            snd\n        ];\n    });\n\n    /**\n     * Retrieve the value at a given path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig [String] -> {k: v} -> v | Undefined\n     * @param {Array} path The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path`.\n     * @see R.prop\n     * @example\n     *\n     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n     */\n    var path = _curry2(function path(paths, obj) {\n        var val = obj;\n        var idx = 0;\n        while (idx < paths.length) {\n            if (val == null) {\n                return;\n            }\n            val = val[paths[idx]];\n            idx += 1;\n        }\n        return val;\n    });\n\n    /**\n     * If the given, non-null object has a value at the given path, returns the\n     * value at that path. Otherwise returns the provided default value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig a -> [String] -> Object -> a\n     * @param {*} d The default value.\n     * @param {Array} p The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path` of the supplied object or the default value.\n     * @example\n     *\n     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n     */\n    var pathOr = _curry3(function pathOr(d, p, obj) {\n        return defaultTo(d, path(p, obj));\n    });\n\n    /**\n     * Returns `true` if the specified object property at given path satisfies the\n     * given predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Logic\n     * @sig (a -> Boolean) -> [String] -> Object -> Boolean\n     * @param {Function} pred\n     * @param {Array} propPath\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propSatisfies, R.path\n     * @example\n     *\n     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n     */\n    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n        return propPath.length > 0 && pred(path(propPath, obj));\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys specified. If\n     * the key does not exist, the property is ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.omit, R.props\n     * @example\n     *\n     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n     */\n    var pick = _curry2(function pick(names, obj) {\n        var result = {};\n        var idx = 0;\n        while (idx < names.length) {\n            if (names[idx] in obj) {\n                result[names[idx]] = obj[names[idx]];\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Similar to `pick` except that this one includes a `key: undefined` pair for\n     * properties that don't exist.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n     */\n    var pickAll = _curry2(function pickAll(names, obj) {\n        var result = {};\n        var idx = 0;\n        var len = names.length;\n        while (idx < len) {\n            var name = names[idx];\n            result[name] = obj[name];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys that satisfy\n     * the supplied predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n     * @param {Function} pred A predicate to determine whether or not a key\n     *        should be included on the output object.\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties that satisfy `pred`\n     *         on it.\n     * @see R.pick, R.filter\n     * @example\n     *\n     *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n     */\n    var pickBy = _curry2(function pickBy(test, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (test(obj[prop], prop, obj)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list with the given element at the front, followed by the\n     * contents of the list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The item to add to the head of the output list.\n     * @param {Array} list The array to add to the tail of the output list.\n     * @return {Array} A new array.\n     * @see R.append\n     * @example\n     *\n     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n     */\n    var prepend = _curry2(function prepend(el, list) {\n        return _concat([el], list);\n    });\n\n    /**\n     * Returns a function that when supplied an object returns the indicated\n     * property of that object, if it exists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig s -> {s: a} -> a | Undefined\n     * @param {String} p The property name\n     * @param {Object} obj The object to query\n     * @return {*} The value at `obj.p`.\n     * @see R.path\n     * @example\n     *\n     *      R.prop('x', {x: 100}); //=> 100\n     *      R.prop('x', {}); //=> undefined\n     */\n    var prop = _curry2(function prop(p, obj) {\n        return obj[p];\n    });\n\n    /**\n     * Returns `true` if the specified object property is of the given type;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Type\n     * @sig Type -> String -> Object -> Boolean\n     * @param {Function} type\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.is, R.propSatisfies\n     * @example\n     *\n     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n     *      R.propIs(Number, 'x', {});            //=> false\n     */\n    var propIs = _curry3(function propIs(type, name, obj) {\n        return is(type, obj[name]);\n    });\n\n    /**\n     * If the given, non-null object has an own property with the specified name,\n     * returns the value of that property. Otherwise returns the provided default\n     * value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Object\n     * @sig a -> String -> Object -> a\n     * @param {*} val The default value.\n     * @param {String} p The name of the property to return.\n     * @param {Object} obj The object to query.\n     * @return {*} The value of given property of the supplied object or the default value.\n     * @example\n     *\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var favorite = R.prop('favoriteLibrary');\n     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n     *\n     *      favorite(alice);  //=> undefined\n     *      favoriteWithDefault(alice);  //=> 'Ramda'\n     */\n    var propOr = _curry3(function propOr(val, p, obj) {\n        return obj != null && _has(p, obj) ? obj[p] : val;\n    });\n\n    /**\n     * Returns `true` if the specified object property satisfies the given\n     * predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Logic\n     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n     * @param {Function} pred\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propEq, R.propIs\n     * @example\n     *\n     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n     */\n    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n        return pred(obj[name]);\n    });\n\n    /**\n     * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> [v]\n     * @param {Array} ps The property names to fetch\n     * @param {Object} obj The object to query\n     * @return {Array} The corresponding values or partially applied function.\n     * @example\n     *\n     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n     *\n     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n     */\n    var props = _curry2(function props(ps, obj) {\n        var len = ps.length;\n        var out = [];\n        var idx = 0;\n        while (idx < len) {\n            out[idx] = obj[ps[idx]];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> Number -> [Number]\n     * @param {Number} from The first number in the list.\n     * @param {Number} to One more than the last number in the list.\n     * @return {Array} The list of numbers in tthe set `[a, b)`.\n     * @example\n     *\n     *      R.range(1, 5);    //=> [1, 2, 3, 4]\n     *      R.range(50, 53);  //=> [50, 51, 52]\n     */\n    var range = _curry2(function range(from, to) {\n        if (!(_isNumber(from) && _isNumber(to))) {\n            throw new TypeError('Both arguments to range must be numbers');\n        }\n        var result = [];\n        var n = from;\n        while (n < to) {\n            result.push(n);\n            n += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * Similar to `reduce`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two values: *(acc, value)*\n     *\n     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n     *      var flattenPairs = (acc, pair) => acc.concat(pair);\n     *\n     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n     */\n    var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            acc = fn(acc, list[idx]);\n            idx -= 1;\n        }\n        return acc;\n    });\n\n    /**\n     * Returns a value wrapped to indicate that it is the final value of the reduce\n     * and transduce functions. The returned value should be considered a black\n     * box: the internal structure is not guaranteed to be stable.\n     *\n     * Note: this optimization is unavailable to functions not explicitly listed\n     * above. For instance, it is not currently supported by reduceRight.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category List\n     * @sig a -> *\n     * @param {*} x The final value of the reduce.\n     * @return {*} The wrapped value.\n     * @see R.reduce, R.transduce\n     * @example\n     *\n     *      R.reduce(\n     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n     *        0,\n     *        [1, 2, 3, 4, 5]) // 10\n     */\n    var reduced = _curry1(_reduced);\n\n    /**\n     * Removes the sub-list of `list` starting at index `start` and containing\n     * `count` elements. _Note that this is not destructive_: it returns a copy of\n     * the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @param {Number} start The position to start removing elements\n     * @param {Number} count The number of elements to remove\n     * @param {Array} list The list to remove from\n     * @return {Array} A new Array with `count` elements from `start` removed.\n     * @example\n     *\n     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n     */\n    var remove = _curry3(function remove(start, count, list) {\n        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n    });\n\n    /**\n     * Replace a substring or regex match in a string with a replacement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category String\n     * @sig RegExp|String -> String -> String -> String\n     * @param {RegExp|String} pattern A regular expression or a substring to match.\n     * @param {String} replacement The string to replace the matches with.\n     * @param {String} str The String to do the search and replacement in.\n     * @return {String} The result.\n     * @example\n     *\n     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *\n     *      // Use the \"g\" (global) flag to replace all occurrences:\n     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n     */\n    var replace = _curry3(function replace(regex, replacement, str) {\n        return str.replace(regex, replacement);\n    });\n\n    /**\n     * Returns a new list or string with the elements or characters in reverse\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {Array|String}\n     * @example\n     *\n     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n     *      R.reverse([1, 2]);     //=> [2, 1]\n     *      R.reverse([1]);        //=> [1]\n     *      R.reverse([]);         //=> []\n     *\n     *      R.reverse('abc');      //=> 'cba'\n     *      R.reverse('ab');       //=> 'ba'\n     *      R.reverse('a');        //=> 'a'\n     *      R.reverse('');         //=> ''\n     */\n    var reverse = _curry1(function reverse(list) {\n        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n    });\n\n    /**\n     * Scan is similar to reduce, but returns a list of successively reduced values\n     * from the left\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> [a]\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} A list of all intermediately reduced values.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n     */\n    var scan = _curry3(function scan(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [acc];\n        while (idx < len) {\n            acc = fn(acc, list[idx]);\n            result[idx + 1] = acc;\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> a -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n     */\n    var set = _curry3(function set(lens, v, x) {\n        return over(lens, always(v), x);\n    });\n\n    /**\n     * Returns the elements of the given list or string (or object with a `slice`\n     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n     *\n     * Dispatches to the `slice` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @sig Number -> Number -> String -> String\n     * @param {Number} fromIndex The start index (inclusive).\n     * @param {Number} toIndex The end index (exclusive).\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n     *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n     */\n    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n        return Array.prototype.slice.call(list, fromIndex, toIndex);\n    }));\n\n    /**\n     * Returns a copy of the list, sorted according to the comparator function,\n     * which should accept two values at a time and return a negative number if the\n     * first value is smaller, a positive number if it's larger, and zero if they\n     * are equal. Please note that this is a **copy** of the list. It does not\n     * modify the original.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,a -> Number) -> [a] -> [a]\n     * @param {Function} comparator A sorting function :: a -> b -> Int\n     * @param {Array} list The list to sort\n     * @return {Array} a new array with its elements sorted by the comparator function.\n     * @example\n     *\n     *      var diff = function(a, b) { return a - b; };\n     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n     */\n    var sort = _curry2(function sort(comparator, list) {\n        return _slice(list).sort(comparator);\n    });\n\n    /**\n     * Sorts the list according to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> [a] -> [a]\n     * @param {Function} fn\n     * @param {Array} list The list to sort.\n     * @return {Array} A new list sorted by the keys generated by `fn`.\n     * @example\n     *\n     *      var sortByFirstItem = R.sortBy(R.prop(0));\n     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var bob = {\n     *        name: 'Bob',\n     *        age: -10\n     *      };\n     *      var clara = {\n     *        name: 'clara',\n     *        age: 314.159\n     *      };\n     *      var people = [clara, bob, alice];\n     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n     */\n    var sortBy = _curry2(function sortBy(fn, list) {\n        return _slice(list).sort(function (a, b) {\n            var aa = fn(a);\n            var bb = fn(b);\n            return aa < bb ? -1 : aa > bb ? 1 : 0;\n        });\n    });\n\n    /**\n     * Splits a given list or string at a given index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig Number -> [a] -> [[a], [a]]\n     * @sig Number -> String -> [String, String]\n     * @param {Number} index The index where the array/string is split.\n     * @param {Array|String} array The array/string to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n     */\n    var splitAt = _curry2(function splitAt(index, array) {\n        return [\n            slice(0, index, array),\n            slice(index, length(array), array)\n        ];\n    });\n\n    /**\n     * Splits a collection into slices of the specified length.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @sig Number -> String -> [String]\n     * @param {Number} n\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n     */\n    var splitEvery = _curry2(function splitEvery(n, list) {\n        if (n <= 0) {\n            throw new Error('First argument to splitEvery must be a positive integer');\n        }\n        var result = [];\n        var idx = 0;\n        while (idx < list.length) {\n            result.push(slice(idx, idx += n, list));\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and a predicate and returns a pair of lists with the following properties:\n     *\n     *  - the result of concatenating the two output lists is equivalent to the input list;\n     *  - none of the elements of the first output list satisfies the predicate; and\n     *  - if the second output list is non-empty, its first element satisfies the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n     * @param {Function} pred The predicate that determines where the array is split.\n     * @param {Array} list The array to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n     */\n    var splitWhen = _curry2(function splitWhen(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var prefix = [];\n        while (idx < len && !pred(list[idx])) {\n            prefix.push(list[idx]);\n            idx += 1;\n        }\n        return [\n            prefix,\n            _slice(list, idx)\n        ];\n    });\n\n    /**\n     * Subtracts its second argument from its first argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a - b`.\n     * @see R.add\n     * @example\n     *\n     *      R.subtract(10, 8); //=> 2\n     *\n     *      var minus5 = R.subtract(R.__, 5);\n     *      minus5(17); //=> 12\n     *\n     *      var complementaryAngle = R.subtract(90);\n     *      complementaryAngle(30); //=> 60\n     *      complementaryAngle(72); //=> 18\n     */\n    var subtract = _curry2(function subtract(a, b) {\n        return Number(a) - Number(b);\n    });\n\n    /**\n     * Returns all but the first element of the given list or string (or object\n     * with a `tail` method).\n     *\n     * Dispatches to the `slice` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.head, R.init, R.last\n     * @example\n     *\n     *      R.tail([1, 2, 3]);  //=> [2, 3]\n     *      R.tail([1, 2]);     //=> [2]\n     *      R.tail([1]);        //=> []\n     *      R.tail([]);         //=> []\n     *\n     *      R.tail('abc');  //=> 'bc'\n     *      R.tail('ab');   //=> 'b'\n     *      R.tail('a');    //=> ''\n     *      R.tail('');     //=> ''\n     */\n    var tail = _checkForMethod('tail', slice(1, Infinity));\n\n    /**\n     * Returns the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `take` method).\n     *\n     * Dispatches to the `take` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.drop\n     * @example\n     *\n     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(3, 'ramda');               //=> 'ram'\n     *\n     *      var personnel = [\n     *        'Dave Brubeck',\n     *        'Paul Desmond',\n     *        'Eugene Wright',\n     *        'Joe Morello',\n     *        'Gerry Mulligan',\n     *        'Bob Bates',\n     *        'Joe Dodge',\n     *        'Ron Crotty'\n     *      ];\n     *\n     *      var takeFive = R.take(5);\n     *      takeFive(personnel);\n     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n     */\n    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n        return slice(0, n < 0 ? Infinity : n, xs);\n    }));\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing\n     * each value to the supplied predicate function, and terminating when the\n     * predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropLastWhile, R.addIndex\n     * @example\n     *\n     *      var isNotOne = x => x !== 1;\n     *\n     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n     */\n    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && fn(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, idx + 1, Infinity);\n    });\n\n    /**\n     * Returns a new list containing the first `n` elements of a given list,\n     * passing each value to the supplied predicate function, and terminating when\n     * the predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * Dispatches to the `takeWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isNotFour = x => x !== 4;\n     *\n     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n     */\n    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && fn(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, 0, idx);\n    }));\n\n    /**\n     * Runs the given function with the supplied object, then returns the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> *) -> a -> a\n     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n     * @param {*} x\n     * @return {*} `x`.\n     * @example\n     *\n     *      var sayX = x => console.log('x is ' + x);\n     *      R.tap(sayX, 100); //=> 100\n     *      // logs 'x is 100'\n     */\n    var tap = _curry2(function tap(fn, x) {\n        fn(x);\n        return x;\n    });\n\n    /**\n     * Calls an input function `n` times, returning an array containing the results\n     * of those function calls.\n     *\n     * `fn` is passed one argument: The current value of `n`, which begins at `0`\n     * and is gradually incremented to `n - 1`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.3\n     * @category List\n     * @sig (Number -> a) -> Number -> [a]\n     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n     * @return {Array} An array containing the return values of all calls to `fn`.\n     * @example\n     *\n     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n     */\n    var times = _curry2(function times(fn, n) {\n        var len = Number(n);\n        var idx = 0;\n        var list;\n        if (len < 0 || isNaN(len)) {\n            throw new RangeError('n must be a non-negative number');\n        }\n        list = new Array(len);\n        while (idx < len) {\n            list[idx] = fn(idx);\n            idx += 1;\n        }\n        return list;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. Only the object's\n     * own properties are used.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own properties.\n     * @see R.fromPairs\n     * @example\n     *\n     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n     */\n    var toPairs = _curry1(function toPairs(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            if (_has(prop, obj)) {\n                pairs[pairs.length] = [\n                    prop,\n                    obj[prop]\n                ];\n            }\n        }\n        return pairs;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. The object's own\n     * properties and prototype properties are used. Note that the order of the\n     * output array is not guaranteed to be consistent across different JS\n     * platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own\n     *         and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n     */\n    var toPairsIn = _curry1(function toPairsIn(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            pairs[pairs.length] = [\n                prop,\n                obj[prop]\n            ];\n        }\n        return pairs;\n    });\n\n    /**\n     * Transposes the rows and columns of a 2D list.\n     * When passed a list of `n` lists of length `x`,\n     * returns a list of `x` lists of length `n`.\n     *\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [[a]] -> [[a]]\n     * @param {Array} list A 2D list\n     * @return {Array} A 2D list\n     * @example\n     *\n     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     *\n     * If some of the rows are shorter than the following rows, their elements are skipped:\n     *\n     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n     */\n    var transpose = _curry1(function transpose(outerlist) {\n        var i = 0;\n        var result = [];\n        while (i < outerlist.length) {\n            var innerlist = outerlist[i];\n            var j = 0;\n            while (j < innerlist.length) {\n                if (typeof result[j] === 'undefined') {\n                    result[j] = [];\n                }\n                result[j].push(innerlist[j]);\n                j += 1;\n            }\n            i += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Removes (strips) whitespace from both ends of the string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to trim.\n     * @return {String} Trimmed version of `str`.\n     * @example\n     *\n     *      R.trim('   xyz  '); //=> 'xyz'\n     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n     */\n    var trim = function () {\n        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n        var zeroWidth = '\\u200B';\n        var hasProtoTrim = typeof String.prototype.trim === 'function';\n        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n            return _curry1(function trim(str) {\n                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n                return str.replace(beginRx, '').replace(endRx, '');\n            });\n        } else {\n            return _curry1(function trim(str) {\n                return str.trim();\n            });\n        }\n    }();\n\n    /**\n     * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n     * function evaluates the `tryer`; if it does not throw, it simply returns the\n     * result. If the `tryer` *does* throw, the returned function evaluates the\n     * `catcher` function and returns its result. Note that for effective\n     * composition with this function, both the `tryer` and `catcher` functions\n     * must return the same type of results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n     * @param {Function} tryer The function that may throw.\n     * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n     * @return {Function} A new function that will catch exceptions and send then to the catcher.\n     * @example\n     *\n     *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n     *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n     */\n    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n        return _arity(tryer.length, function () {\n            try {\n                return tryer.apply(this, arguments);\n            } catch (e) {\n                return catcher.apply(this, _concat([e], arguments));\n            }\n        });\n    });\n\n    /**\n     * Gives a single-word string description of the (native) type of a value,\n     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n     * attempt to distinguish user Object types any further, reporting them all as\n     * 'Object'.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Type\n     * @sig (* -> {*}) -> String\n     * @param {*} val The value to test\n     * @return {String}\n     * @example\n     *\n     *      R.type({}); //=> \"Object\"\n     *      R.type(1); //=> \"Number\"\n     *      R.type(false); //=> \"Boolean\"\n     *      R.type('s'); //=> \"String\"\n     *      R.type(null); //=> \"Null\"\n     *      R.type([]); //=> \"Array\"\n     *      R.type(/[A-z]/); //=> \"RegExp\"\n     */\n    var type = _curry1(function type(val) {\n        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n    });\n\n    /**\n     * Takes a function `fn`, which takes a single array argument, and returns a\n     * function which:\n     *\n     *   - takes any number of positional arguments;\n     *   - passes these arguments to `fn` as an array; and\n     *   - returns the result.\n     *\n     * In other words, R.unapply derives a variadic function from a function which\n     * takes an array. R.unapply is the inverse of R.apply.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Function\n     * @sig ([*...] -> a) -> (*... -> a)\n     * @param {Function} fn\n     * @return {Function}\n     * @see R.apply\n     * @example\n     *\n     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n     */\n    var unapply = _curry1(function unapply(fn) {\n        return function () {\n            return fn(_slice(arguments));\n        };\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 1 parameter. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> b) -> (a -> b)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 1.\n     * @example\n     *\n     *      var takesTwoArgs = function(a, b) {\n     *        return [a, b];\n     *      };\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.unary(takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only 1 argument is passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var unary = _curry1(function unary(fn) {\n        return nAry(1, fn);\n    });\n\n    /**\n     * Returns a function of arity `n` from a (manually) curried function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Function\n     * @sig Number -> (a -> b) -> (a -> c)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to uncurry.\n     * @return {Function} A new function.\n     * @see R.curry\n     * @example\n     *\n     *      var addFour = a => b => c => d => a + b + c + d;\n     *\n     *      var uncurriedAddFour = R.uncurryN(4, addFour);\n     *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n     */\n    var uncurryN = _curry2(function uncurryN(depth, fn) {\n        return curryN(depth, function () {\n            var currentDepth = 1;\n            var value = fn;\n            var idx = 0;\n            var endIdx;\n            while (currentDepth <= depth && typeof value === 'function') {\n                endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n                value = value.apply(this, _slice(arguments, idx, endIdx));\n                currentDepth += 1;\n                idx = endIdx;\n            }\n            return value;\n        });\n    });\n\n    /**\n     * Builds a list from a seed value. Accepts an iterator function, which returns\n     * either false to stop iteration or an array of length 2 containing the value\n     * to add to the resulting list and the seed to be used in the next call to the\n     * iterator function.\n     *\n     * The iterator function receives one argument: *(seed)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a -> [b]) -> * -> [b]\n     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n     *        either false to quit iteration or an array of length two to proceed. The element\n     *        at index 0 of this array will be added to the resulting array, and the element\n     *        at index 1 will be passed to the next call to `fn`.\n     * @param {*} seed The seed value.\n     * @return {Array} The final list.\n     * @example\n     *\n     *      var f = n => n > 50 ? false : [-n, n + 10];\n     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n     */\n    var unfold = _curry2(function unfold(fn, seed) {\n        var pair = fn(seed);\n        var result = [];\n        while (pair && pair.length) {\n            result[result.length] = pair[0];\n            pair = fn(pair[1]);\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied predicate to\n     * two list elements. Prefers the first item if two items compare equal based\n     * on the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      var strEq = R.eqBy(String);\n     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n     */\n    var uniqWith = _curry2(function uniqWith(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var item;\n        while (idx < len) {\n            item = list[idx];\n            if (!_containsWith(pred, item, result)) {\n                result[result.length] = item;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is not satisfied, the function will return the result of\n     * calling the `whenFalseFn` function with the same argument. If the predicate\n     * is satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred        A predicate function\n     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n     *                               to a falsy value.\n     * @param {*}        x           An object to test with the `pred` function and\n     *                               pass to `whenFalseFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n     * @see R.ifElse, R.when\n     * @example\n     *\n     *      // coerceArray :: (a|[a]) -> [a]\n     *      var coerceArray = R.unless(R.isArrayLike, R.of);\n     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n     *      coerceArray(1);         //=> [1]\n     */\n    var unless = _curry3(function unless(pred, whenFalseFn, x) {\n        return pred(x) ? x : whenFalseFn(x);\n    });\n\n    /**\n     * Takes a predicate, a transformation function, and an initial value,\n     * and returns a value of the same type as the initial value.\n     * It does so by applying the transformation until the predicate is satisfied,\n     * at which point it returns the satisfactory value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred A predicate function\n     * @param {Function} fn The iterator function\n     * @param {*} init Initial value\n     * @return {*} Final value that satisfies predicate\n     * @example\n     *\n     *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n     */\n    var until = _curry3(function until(pred, fn, init) {\n        var val = init;\n        while (!pred(val)) {\n            val = fn(val);\n        }\n        return val;\n    });\n\n    /**\n     * Returns a new copy of the array with the element at the provided index\n     * replaced with the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} idx The index to update.\n     * @param {*} x The value to exist at the given index of the returned array.\n     * @param {Array|Arguments} list The source array-like object to be updated.\n     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n     * @see R.adjust\n     * @example\n     *\n     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var update = _curry3(function update(idx, x, list) {\n        return adjust(always(x), idx, list);\n    });\n\n    /**\n     * Accepts a function `fn` and a list of transformer functions and returns a\n     * new curried function. When the new function is invoked, it calls the\n     * function `fn` with parameters consisting of the result of calling each\n     * supplied handler on successive arguments to the new function.\n     *\n     * If more arguments are passed to the returned function than transformer\n     * functions, those arguments are passed directly to `fn` as additional\n     * parameters. If you expect additional arguments that don't need to be\n     * transformed, although you can ignore them, it's best to pass an identity\n     * function so that the new function reports the correct arity.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} fn The function to wrap.\n     * @param {Array} transformers A list of transformer functions\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n     */\n    var useWith = _curry2(function useWith(fn, transformers) {\n        return curryN(transformers.length, function () {\n            var args = [];\n            var idx = 0;\n            while (idx < transformers.length) {\n                args.push(transformers[idx].call(this, arguments[idx]));\n                idx += 1;\n            }\n            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n        });\n    });\n\n    /**\n     * Returns a list of all the enumerable own properties of the supplied object.\n     * Note that the order of the output array is not guaranteed across different\n     * JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own properties.\n     * @example\n     *\n     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n     */\n    var values = _curry1(function values(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var vals = [];\n        var idx = 0;\n        while (idx < len) {\n            vals[idx] = obj[props[idx]];\n            idx += 1;\n        }\n        return vals;\n    });\n\n    /**\n     * Returns a list of all the properties, including prototype properties, of the\n     * supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.valuesIn(f); //=> ['X', 'Y']\n     */\n    var valuesIn = _curry1(function valuesIn(obj) {\n        var prop;\n        var vs = [];\n        for (prop in obj) {\n            vs[vs.length] = obj[prop];\n        }\n        return vs;\n    });\n\n    /**\n     * Returns a \"view\" of the given data structure, determined by the given lens.\n     * The lens's focus determines which portion of the data structure is visible.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> s -> a\n     * @param {Lens} lens\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});  //=> 1\n     *      R.view(xLens, {x: 4, y: 2});  //=> 4\n     */\n    // `Const` is a functor that effectively ignores the function given to `map`.\n    // Using `Const` effectively ignores the setter function of the `lens`,\n    // leaving the value returned by the getter function unmodified.\n    var view = function () {\n        // `Const` is a functor that effectively ignores the function given to `map`.\n        var Const = function (x) {\n            return {\n                value: x,\n                map: function () {\n                    return this;\n                }\n            };\n        };\n        return _curry2(function view(lens, x) {\n            // Using `Const` effectively ignores the setter function of the `lens`,\n            // leaving the value returned by the getter function unmodified.\n            return lens(Const)(x).value;\n        });\n    }();\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is satisfied, the function will return the result of calling\n     * the `whenTrueFn` function with the same argument. If the predicate is not\n     * satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred       A predicate function\n     * @param {Function} whenTrueFn A function to invoke when the `condition`\n     *                              evaluates to a truthy value.\n     * @param {*}        x          An object to test with the `pred` function and\n     *                              pass to `whenTrueFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n     * @see R.ifElse, R.unless\n     * @example\n     *\n     *      // truncate :: String -> String\n     *      var truncate = R.when(\n     *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n     *        R.pipe(R.take(10), R.append('…'), R.join(''))\n     *      );\n     *      truncate('12345');         //=> '12345'\n     *      truncate('0123456789ABC'); //=> '0123456789…'\n     */\n    var when = _curry3(function when(pred, whenTrueFn, x) {\n        return pred(x) ? whenTrueFn(x) : x;\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec. Each of the spec's own properties must be a predicate function.\n     * Each predicate is applied to the value of the corresponding property of the\n     * test object. `where` returns true if all the predicates return true, false\n     * otherwise.\n     *\n     * `where` is well suited to declaratively expressing constraints for other\n     * functions such as `filter` and `find`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Object\n     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = where({\n     *        a: equals('foo'),\n     *        b: complement(equals('bar')),\n     *        x: gt(__, 10),\n     *        y: lt(__, 20)\n     *      });\n     *\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n     */\n    var where = _curry2(function where(spec, testObj) {\n        for (var prop in spec) {\n            if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n                return false;\n            }\n        }\n        return true;\n    });\n\n    /**\n     * Wrap a function inside another to allow you to make adjustments to the\n     * parameters, or do other processing either before the internal function is\n     * called or with its results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n     * @param {Function} fn The function to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @return {Function} The wrapped function.\n     * @deprecated since v0.22.0\n     * @example\n     *\n     *      var greet = name => 'Hello ' + name;\n     *\n     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n     *\n     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n     *\n     *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n     *        return gr(name.substring(0, 3));\n     *      });\n     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n     */\n    var wrap = _curry2(function wrap(fn, wrapper) {\n        return curryN(fn.length, function () {\n            return wrapper.apply(this, _concat([fn], arguments));\n        });\n    });\n\n    /**\n     * Creates a new list out of the two supplied by creating each possible pair\n     * from the lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The list made by combining each possible pair from\n     *         `as` and `bs` into pairs (`[a, b]`).\n     * @example\n     *\n     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n     */\n    // = xprodWith(prepend); (takes about 3 times as long...)\n    var xprod = _curry2(function xprod(a, b) {\n        // = xprodWith(prepend); (takes about 3 times as long...)\n        var idx = 0;\n        var ilen = a.length;\n        var j;\n        var jlen = b.length;\n        var result = [];\n        while (idx < ilen) {\n            j = 0;\n            while (j < jlen) {\n                result[result.length] = [\n                    a[idx],\n                    b[j]\n                ];\n                j += 1;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by pairing up equally-positioned\n     * items from both lists. The returned list is truncated to the length of the\n     * shorter of the two input lists.\n     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n     * @example\n     *\n     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    var zip = _curry2(function zip(a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = [\n                a[idx],\n                b[idx]\n            ];\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * Creates a new object out of a list of keys and a list of values.\n     * Key/value pairing is truncated to the length of the shorter of the two lists.\n     * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [String] -> [*] -> {String: *}\n     * @param {Array} keys The array that will be properties on the output object.\n     * @param {Array} values The list of values on the output object.\n     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n     * @example\n     *\n     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n     */\n    var zipObj = _curry2(function zipObj(keys, values) {\n        var idx = 0;\n        var len = Math.min(keys.length, values.length);\n        var out = {};\n        while (idx < len) {\n            out[keys[idx]] = values[idx];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by applying the function to each\n     * equally-positioned pair in the lists. The returned list is truncated to the\n     * length of the shorter of the two input lists.\n     *\n     * @function\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> c) -> [a] -> [b] -> [c]\n     * @param {Function} fn The function used to combine the two elements into one value.\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n     *         using `fn`.\n     * @example\n     *\n     *      var f = (x, y) => {\n     *        // ...\n     *      };\n     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n     */\n    var zipWith = _curry3(function zipWith(fn, a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = fn(a[idx], b[idx]);\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * A function that always returns `false`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.T\n     * @example\n     *\n     *      R.F(); //=> false\n     */\n    var F = always(false);\n\n    /**\n     * A function that always returns `true`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.F\n     * @example\n     *\n     *      R.T(); //=> true\n     */\n    var T = always(true);\n\n    /**\n     * Copies an object.\n     *\n     * @private\n     * @param {*} value The value to be copied\n     * @param {Array} refFrom Array containing the source references\n     * @param {Array} refTo Array containing the copied source references\n     * @param {Boolean} deep Whether or not to perform deep cloning.\n     * @return {*} The copied value.\n     */\n    var _clone = function _clone(value, refFrom, refTo, deep) {\n        var copy = function copy(copiedValue) {\n            var len = refFrom.length;\n            var idx = 0;\n            while (idx < len) {\n                if (value === refFrom[idx]) {\n                    return refTo[idx];\n                }\n                idx += 1;\n            }\n            refFrom[idx + 1] = value;\n            refTo[idx + 1] = copiedValue;\n            for (var key in value) {\n                copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n            }\n            return copiedValue;\n        };\n        switch (type(value)) {\n        case 'Object':\n            return copy({});\n        case 'Array':\n            return copy([]);\n        case 'Date':\n            return new Date(value.valueOf());\n        case 'RegExp':\n            return _cloneRegExp(value);\n        default:\n            return value;\n        }\n    };\n\n    var _createPartialApplicator = function _createPartialApplicator(concat) {\n        return _curry2(function (fn, args) {\n            return _arity(Math.max(0, fn.length - args.length), function () {\n                return fn.apply(this, concat(args, arguments));\n            });\n        });\n    };\n\n    var _dropLast = function dropLast(n, xs) {\n        return take(n < xs.length ? xs.length - n : 0, xs);\n    };\n\n    // Values of other types are only equal if identical.\n    var _equals = function _equals(a, b, stackA, stackB) {\n        if (identical(a, b)) {\n            return true;\n        }\n        if (type(a) !== type(b)) {\n            return false;\n        }\n        if (a == null || b == null) {\n            return false;\n        }\n        if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n        }\n        switch (type(a)) {\n        case 'Arguments':\n        case 'Array':\n        case 'Object':\n            if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n                return a === b;\n            }\n            break;\n        case 'Boolean':\n        case 'Number':\n        case 'String':\n            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n                return false;\n            }\n            break;\n        case 'Date':\n            if (!identical(a.valueOf(), b.valueOf())) {\n                return false;\n            }\n            break;\n        case 'Error':\n            return a.name === b.name && a.message === b.message;\n        case 'RegExp':\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n                return false;\n            }\n            break;\n        case 'Map':\n        case 'Set':\n            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n                return false;\n            }\n            break;\n        case 'Int8Array':\n        case 'Uint8Array':\n        case 'Uint8ClampedArray':\n        case 'Int16Array':\n        case 'Uint16Array':\n        case 'Int32Array':\n        case 'Uint32Array':\n        case 'Float32Array':\n        case 'Float64Array':\n            break;\n        case 'ArrayBuffer':\n            break;\n        default:\n            // Values of other types are only equal if identical.\n            return false;\n        }\n        var keysA = keys(a);\n        if (keysA.length !== keys(b).length) {\n            return false;\n        }\n        var idx = stackA.length - 1;\n        while (idx >= 0) {\n            if (stackA[idx] === a) {\n                return stackB[idx] === b;\n            }\n            idx -= 1;\n        }\n        stackA.push(a);\n        stackB.push(b);\n        idx = keysA.length - 1;\n        while (idx >= 0) {\n            var key = keysA[idx];\n            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n                return false;\n            }\n            idx -= 1;\n        }\n        stackA.pop();\n        stackB.pop();\n        return true;\n    };\n\n    /**\n     * `_makeFlat` is a helper function that returns a one-level or fully recursive\n     * function based on the flag passed in.\n     *\n     * @private\n     */\n    var _makeFlat = function _makeFlat(recursive) {\n        return function flatt(list) {\n            var value, jlen, j;\n            var result = [];\n            var idx = 0;\n            var ilen = list.length;\n            while (idx < ilen) {\n                if (isArrayLike(list[idx])) {\n                    value = recursive ? flatt(list[idx]) : list[idx];\n                    j = 0;\n                    jlen = value.length;\n                    while (j < jlen) {\n                        result[result.length] = value[j];\n                        j += 1;\n                    }\n                } else {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n            return result;\n        };\n    };\n\n    var _reduce = function () {\n        function _arrayReduce(xf, acc, list) {\n            var idx = 0;\n            var len = list.length;\n            while (idx < len) {\n                acc = xf['@@transducer/step'](acc, list[idx]);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                idx += 1;\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _iterableReduce(xf, acc, iter) {\n            var step = iter.next();\n            while (!step.done) {\n                acc = xf['@@transducer/step'](acc, step.value);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                step = iter.next();\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _methodReduce(xf, acc, obj) {\n            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n        }\n        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n        return function _reduce(fn, acc, list) {\n            if (typeof fn === 'function') {\n                fn = _xwrap(fn);\n            }\n            if (isArrayLike(list)) {\n                return _arrayReduce(fn, acc, list);\n            }\n            if (typeof list.reduce === 'function') {\n                return _methodReduce(fn, acc, list);\n            }\n            if (list[symIterator] != null) {\n                return _iterableReduce(fn, acc, list[symIterator]());\n            }\n            if (typeof list.next === 'function') {\n                return _iterableReduce(fn, acc, list);\n            }\n            throw new TypeError('reduce: list must be array or iterable');\n        };\n    }();\n\n    var _stepCat = function () {\n        var _stepCatArray = {\n            '@@transducer/init': Array,\n            '@@transducer/step': function (xs, x) {\n                xs.push(x);\n                return xs;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatString = {\n            '@@transducer/init': String,\n            '@@transducer/step': function (a, b) {\n                return a + b;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatObject = {\n            '@@transducer/init': Object,\n            '@@transducer/step': function (result, input) {\n                return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);\n            },\n            '@@transducer/result': _identity\n        };\n        return function _stepCat(obj) {\n            if (_isTransformer(obj)) {\n                return obj;\n            }\n            if (isArrayLike(obj)) {\n                return _stepCatArray;\n            }\n            if (typeof obj === 'string') {\n                return _stepCatString;\n            }\n            if (typeof obj === 'object') {\n                return _stepCatObject;\n            }\n            throw new Error('Cannot create transformer for ' + obj);\n        };\n    }();\n\n    var _xdropLastWhile = function () {\n        function XDropLastWhile(fn, xf) {\n            this.f = fn;\n            this.retained = [];\n            this.xf = xf;\n        }\n        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n            this.retained = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n        };\n        XDropLastWhile.prototype.flush = function (result, input) {\n            result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n            this.retained = [];\n            return this.xf['@@transducer/step'](result, input);\n        };\n        XDropLastWhile.prototype.retain = function (result, input) {\n            this.retained.push(input);\n            return result;\n        };\n        return _curry2(function _xdropLastWhile(fn, xf) {\n            return new XDropLastWhile(fn, xf);\n        });\n    }();\n\n    /**\n     * Creates a new list iteration function from an existing one by adding two new\n     * parameters to its callback function: the current index, and the entire list.\n     *\n     * This would turn, for instance, Ramda's simple `map` function into one that\n     * more closely resembles `Array.prototype.map`. Note that this will only work\n     * for functions in which the iteration callback function is the first\n     * parameter, and where the list is the last parameter. (This latter might be\n     * unimportant if the list parameter is not used.)\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Function\n     * @category List\n     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n     * @param {Function} fn A list iteration function that does not pass index or list to its callback\n     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n     * @example\n     *\n     *      var mapIndexed = R.addIndex(R.map);\n     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n     */\n    var addIndex = _curry1(function addIndex(fn) {\n        return curryN(fn.length, function () {\n            var idx = 0;\n            var origFn = arguments[0];\n            var list = arguments[arguments.length - 1];\n            var args = _slice(arguments);\n            args[0] = function () {\n                var result = origFn.apply(this, _concat(arguments, [\n                    idx,\n                    list\n                ]));\n                idx += 1;\n                return result;\n            };\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 2 parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> c) -> (a, b -> c)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 2.\n     * @example\n     *\n     *      var takesThreeArgs = function(a, b, c) {\n     *        return [a, b, c];\n     *      };\n     *      takesThreeArgs.length; //=> 3\n     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      var takesTwoArgs = R.binary(takesThreeArgs);\n     *      takesTwoArgs.length; //=> 2\n     *      // Only 2 arguments are passed to the wrapped function\n     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n     */\n    var binary = _curry1(function binary(fn) {\n        return nAry(2, fn);\n    });\n\n    /**\n     * Creates a deep copy of the value which may contain (nested) `Array`s and\n     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n     * copied, but assigned by their reference.\n     *\n     * Dispatches to a `clone` method if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {*} -> {*}\n     * @param {*} value The object or array to clone\n     * @return {*} A new object or array.\n     * @example\n     *\n     *      var objects = [{}, {}, {}];\n     *      var objectsClone = R.clone(objects);\n     *      objects[0] === objectsClone[0]; //=> false\n     */\n    var clone = _curry1(function clone(value) {\n        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function. The curried function\n     * has two unusual capabilities. First, its arguments needn't be provided one\n     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> a) -> (* -> a)\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curryN\n     * @example\n     *\n     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n     *\n     *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curry = _curry1(function curry(fn) {\n        return curryN(fn.length, fn);\n    });\n\n    /**\n     * Returns all but the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `drop` method).\n     *\n     * Dispatches to the `drop` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.take, R.transduce\n     * @example\n     *\n     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(3, 'ramda');               //=> 'da'\n     */\n    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n        return slice(Math.max(0, n), Infinity, xs);\n    }));\n\n    /**\n     * Returns a list containing all but the last `n` elements of the given `list`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements of `xs` to skip.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.takeLast\n     * @example\n     *\n     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(3, 'ramda');               //=> 'ra'\n     */\n    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));\n\n    /**\n     * Returns a new list excluding all the tailing elements of a given list which\n     * satisfy the supplied predicate function. It passes each value from the right\n     * to the supplied predicate function, skipping elements while the predicate\n     * function returns `true`. The predicate function is applied to one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeLastWhile, R.addIndex\n     * @example\n     *\n     *      var lteThree = x => x <= 3;\n     *\n     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n     */\n    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));\n\n    /**\n     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n     * cyclical data structures.\n     *\n     * Dispatches symmetrically to the `equals` methods of both arguments, if\n     * present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> b -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      R.equals(1, 1); //=> true\n     *      R.equals(1, '1'); //=> false\n     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n     *\n     *      var a = {}; a.v = a;\n     *      var b = {}; b.v = b;\n     *      R.equals(a, b); //=> true\n     */\n    var equals = _curry2(function equals(a, b) {\n        return _equals(a, b, [], []);\n    });\n\n    /**\n     * Takes a predicate and a \"filterable\", and returns a new filterable of the\n     * same type containing the members of the given filterable which satisfy the\n     * given predicate.\n     *\n     * Dispatches to the `filter` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.reject, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    // else\n    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {\n        return _isObject(filterable) ? _reduce(function (acc, key) {\n            if (pred(filterable[key])) {\n                acc[key] = filterable[key];\n            }\n            return acc;\n        }, {}, keys(filterable)) : // else\n        _filter(pred, filterable);\n    }));\n\n    /**\n     * Returns a new list by pulling every item out of it (and all its sub-arrays)\n     * and putting them in a new array, depth-first.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b]\n     * @param {Array} list The array to consider.\n     * @return {Array} The flattened list.\n     * @see R.unnest\n     * @example\n     *\n     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n     */\n    var flatten = _curry1(_makeFlat(true));\n\n    /**\n     * Returns a new function much like the supplied one, except that the first two\n     * arguments' order is reversed.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n     * @param {Function} fn The function to invoke with its first two parameters reversed.\n     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n     * @example\n     *\n     *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n     *\n     *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n     */\n    var flip = _curry1(function flip(fn) {\n        return curry(function (a, b) {\n            var args = _slice(arguments);\n            args[0] = b;\n            args[1] = a;\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Returns the first element of the given list or string. In some libraries\n     * this function is named `first`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {*}\n     * @see R.tail, R.init, R.last\n     * @example\n     *\n     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n     *      R.head([]); //=> undefined\n     *\n     *      R.head('abc'); //=> 'a'\n     *      R.head(''); //=> ''\n     */\n    var head = nth(0);\n\n    /**\n     * Returns all but the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.last, R.head, R.tail\n     * @example\n     *\n     *      R.init([1, 2, 3]);  //=> [1, 2]\n     *      R.init([1, 2]);     //=> [1]\n     *      R.init([1]);        //=> []\n     *      R.init([]);         //=> []\n     *\n     *      R.init('abc');  //=> 'ab'\n     *      R.init('ab');   //=> 'a'\n     *      R.init('a');    //=> ''\n     *      R.init('');     //=> ''\n     */\n    var init = slice(0, -1);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate function that determines whether\n     *        the two supplied elements are equal.\n     * @param {Array} list1 One list of items to compare\n     * @param {Array} list2 A second list of items to compare\n     * @return {Array} A new list containing those elements common to both lists.\n     * @see R.intersection\n     * @example\n     *\n     *      var buffaloSpringfield = [\n     *        {id: 824, name: 'Richie Furay'},\n     *        {id: 956, name: 'Dewey Martin'},\n     *        {id: 313, name: 'Bruce Palmer'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *      var csny = [\n     *        {id: 204, name: 'David Crosby'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 539, name: 'Graham Nash'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *\n     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n     */\n    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        var results = [];\n        var idx = 0;\n        while (idx < filteredList.length) {\n            if (_containsWith(pred, filteredList[idx], lookupList)) {\n                results[results.length] = filteredList[idx];\n            }\n            idx += 1;\n        }\n        return uniqWith(pred, results);\n    });\n\n    /**\n     * Transforms the items of the list with the transducer and appends the\n     * transformed items to the accumulator using an appropriate iterator function\n     * based on the accumulator type.\n     *\n     * The accumulator can be an array, string, object or a transformer. Iterated\n     * items will be appended to arrays and concatenated to strings. Objects will\n     * be merged directly or 2-item arrays will be merged as key, value pairs.\n     *\n     * The accumulator can also be a transformer object that provides a 2-arity\n     * reducing iterator function, step, 0-arity initial value function, init, and\n     * 1-arity result extraction function result. The step function is used as the\n     * iterator function in reduce. The result function is used to convert the\n     * final accumulator into the return type and in most cases is R.identity. The\n     * init function is used to provide the initial accumulator.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig a -> (b -> b) -> [c] -> a\n     * @param {*} acc The initial accumulator value.\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.into([], transducer, numbers); //=> [2, 3]\n     *\n     *      var intoArray = R.into([]);\n     *      intoArray(transducer, numbers); //=> [2, 3]\n     */\n    var into = _curry3(function into(acc, xf, list) {\n        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n    });\n\n    /**\n     * Same as R.invertObj, however this accounts for objects with duplicate values\n     * by putting the values into an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: [ s, ... ]}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object with keys\n     * in an array.\n     * @example\n     *\n     *      var raceResultsByFirstName = {\n     *        first: 'alice',\n     *        second: 'jake',\n     *        third: 'alice',\n     *      };\n     *      R.invert(raceResultsByFirstName);\n     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n     */\n    var invert = _curry1(function invert(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            var val = obj[key];\n            var list = _has(val, out) ? out[val] : out[val] = [];\n            list[list.length] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object with the keys of the given object as values, and the\n     * values of the given object, which are coerced to strings, as keys. Note\n     * that the last key found is preferred when handling the same value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: s}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object\n     * @example\n     *\n     *      var raceResults = {\n     *        first: 'alice',\n     *        second: 'jake'\n     *      };\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': 'first', 'jake':'second' }\n     *\n     *      // Alternatively:\n     *      var raceResults = ['alice', 'jake'];\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': '0', 'jake':'1' }\n     */\n    var invertObj = _curry1(function invertObj(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            out[obj[key]] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the given value is its type's empty value; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig a -> Boolean\n     * @param {*} x\n     * @return {Boolean}\n     * @see R.empty\n     * @example\n     *\n     *      R.isEmpty([1, 2, 3]);   //=> false\n     *      R.isEmpty([]);          //=> true\n     *      R.isEmpty('');          //=> true\n     *      R.isEmpty(null);        //=> false\n     *      R.isEmpty({});          //=> true\n     *      R.isEmpty({length: 0}); //=> false\n     */\n    var isEmpty = _curry1(function isEmpty(x) {\n        return x != null && equals(x, empty(x));\n    });\n\n    /**\n     * Returns the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.init, R.head, R.tail\n     * @example\n     *\n     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n     *      R.last([]); //=> undefined\n     *\n     *      R.last('abc'); //=> 'c'\n     *      R.last(''); //=> ''\n     */\n    var last = nth(-1);\n\n    /**\n     * Returns the position of the last occurrence of an item in an array, or -1 if\n     * the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.indexOf\n     * @example\n     *\n     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n     */\n    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n            return xs.lastIndexOf(target);\n        } else {\n            var idx = xs.length - 1;\n            while (idx >= 0) {\n                if (equals(xs[idx], target)) {\n                    return idx;\n                }\n                idx -= 1;\n            }\n            return -1;\n        }\n    });\n\n    /**\n     * Takes a function and\n     * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n     * applies the function to each of the functor's values, and returns\n     * a functor of the same shape.\n     *\n     * Ramda provides suitable `map` implementations for `Array` and `Object`,\n     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n     *\n     * Dispatches to the `map` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * Also treats functions as functors and will compose them together.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Functor f => (a -> b) -> f a -> f b\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {Array} list The list to be iterated over.\n     * @return {Array} The new list.\n     * @see R.transduce, R.addIndex\n     * @example\n     *\n     *      var double = x => x * 2;\n     *\n     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n     *\n     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n     */\n    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n        switch (Object.prototype.toString.call(functor)) {\n        case '[object Function]':\n            return curryN(functor.length, function () {\n                return fn.call(this, functor.apply(this, arguments));\n            });\n        case '[object Object]':\n            return _reduce(function (acc, key) {\n                acc[key] = fn(functor[key]);\n                return acc;\n            }, {}, keys(functor));\n        default:\n            return _map(fn, functor);\n        }\n    }));\n\n    /**\n     * An Object-specific version of `map`. The function is applied to three\n     * arguments: *(value, key, obj)*. If only the value is significant, use\n     * `map` instead.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig ((*, String, Object) -> *) -> Object -> Object\n     * @param {Function} fn\n     * @param {Object} obj\n     * @return {Object}\n     * @see R.map\n     * @example\n     *\n     *      var values = { x: 1, y: 2, z: 3 };\n     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n     *\n     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n     */\n    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n        return _reduce(function (acc, key) {\n            acc[key] = fn(obj[key], key, obj);\n            return acc;\n        }, {}, keys(obj));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the values\n     * associated with the key in each object, with the result being used as the\n     * value associated with the key in the returned object. The key will be\n     * excluded from the returned object if the resulting value is `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWithKey\n     * @example\n     *\n     *      R.mergeWith(R.concat,\n     *                  { a: true, values: [10, 20] },\n     *                  { b: true, values: [15, 35] });\n     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n     */\n    var mergeWith = _curry3(function mergeWith(fn, l, r) {\n        return mergeWithKey(function (_, _l, _r) {\n            return fn(_l, _r);\n        }, l, r);\n    });\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided initially followed by the arguments provided to `g`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partialRight\n     * @example\n     *\n     *      var multiply = (a, b) => a * b;\n     *      var double = R.partial(multiply, [2]);\n     *      double(2); //=> 4\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var sayHello = R.partial(greet, ['Hello']);\n     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partial = _createPartialApplicator(_concat);\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided to `g` followed by the arguments provided initially.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partial\n     * @example\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n     *\n     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partialRight = _createPartialApplicator(flip(_concat));\n\n    /**\n     * Determines whether a nested path on an object has a specific value, in\n     * `R.equals` terms. Most likely used to filter a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Relation\n     * @sig [String] -> * -> {String: *} -> Boolean\n     * @param {Array} path The path of the nested property to use\n     * @param {*} val The value to compare the nested property with\n     * @param {Object} obj The object to check the nested property in\n     * @return {Boolean} `true` if the value equals the nested object property,\n     *         `false` otherwise.\n     * @example\n     *\n     *      var user1 = { address: { zipCode: 90210 } };\n     *      var user2 = { address: { zipCode: 55555 } };\n     *      var user3 = { name: 'Bob' };\n     *      var users = [ user1, user2, user3 ];\n     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n     *      R.filter(isFamous, users); //=> [ user1 ]\n     */\n    var pathEq = _curry3(function pathEq(_path, val, obj) {\n        return equals(path(_path, obj), val);\n    });\n\n    /**\n     * Returns a new list by plucking the same named property off all objects in\n     * the list supplied.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig k -> [{k: v}] -> [v]\n     * @param {Number|String} key The key name to pluck off of each object.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of values for the given key.\n     * @see R.props\n     * @example\n     *\n     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n     */\n    var pluck = _curry2(function pluck(p, list) {\n        return map(prop(p), list);\n    });\n\n    /**\n     * Reasonable analog to SQL `select` statement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @category Relation\n     * @sig [k] -> [{k: v}] -> [{k: v}]\n     * @param {Array} props The property names to project\n     * @param {Array} objs The objects to query\n     * @return {Array} An array of objects with just the `props` properties.\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n     *      var kids = [abby, fred];\n     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n     */\n    // passing `identity` gives correct arity\n    var project = useWith(_map, [\n        pickAll,\n        identity\n    ]);\n\n    /**\n     * Returns `true` if the specified object property is equal, in `R.equals`\n     * terms, to the given value; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig String -> a -> Object -> Boolean\n     * @param {String} name\n     * @param {*} val\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.equals, R.propSatisfies\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     *      var kids = [abby, fred, rusty, alois];\n     *      var hasBrownHair = R.propEq('hair', 'brown');\n     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n     */\n    var propEq = _curry3(function propEq(name, val, obj) {\n        return equals(val, obj[name]);\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It may use\n     * `R.reduced` to shortcut the iteration.\n     *\n     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n     *\n     * Dispatches to the `reduce` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduced, R.addIndex\n     * @example\n     *\n     *      var numbers = [1, 2, 3];\n     *      var plus = (a, b) => a + b;\n     *\n     *      R.reduce(plus, 10, numbers); //=> 16\n     */\n    var reduce = _curry3(_reduce);\n\n    /**\n     * Groups the elements of the list according to the result of calling\n     * the String-returning function `keyFn` on each element and reduces the elements\n     * of each group to a single value via the reducer function `valueFn`.\n     *\n     * This function is basically a more general `groupBy` function.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n     * @param {Function} valueFn The function that reduces the elements of each group to a single\n     *        value. Receives two values, accumulator for a particular group and the current element.\n     * @param {*} acc The (initial) accumulator value for each group.\n     * @param {Function} keyFn The function that maps the list's element into a key.\n     * @param {Array} list The array to group.\n     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n     *         `valueFn` for elements which produced that key when passed to `keyFn`.\n     * @see R.groupBy, R.reduce\n     * @example\n     *\n     *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n     *      var namesByGrade = reduceToNamesBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Lucy', score: 92},\n     *                      {name: 'Drew', score: 85},\n     *                      // ...\n     *                      {name: 'Bart', score: 62}];\n     *      namesByGrade(students);\n     *      // {\n     *      //   'A': ['Lucy'],\n     *      //   'B': ['Drew']\n     *      //   // ...,\n     *      //   'F': ['Bart']\n     *      // }\n     */\n    var reduceBy = _curryN(4, [], _dispatchable('reduceBy', _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n        return _reduce(function (acc, elt) {\n            var key = keyFn(elt);\n            acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n            return acc;\n        }, {}, list);\n    }));\n\n    /**\n     * Like `reduce`, `reduceWhile` returns a single item by iterating through\n     * the list, successively calling the iterator function. `reduceWhile` also\n     * takes a predicate that is evaluated before each step. If the predicate returns\n     * `false`, it \"short-circuits\" the iteration and returns the current value\n     * of the accumulator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.22.0\n     * @category List\n     * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} pred The predicate. It is passed the accumulator and the\n     *        current element.\n     * @param {Function} fn The iterator function. Receives two values, the\n     *        accumulator and the current element.\n     * @param {*} a The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced\n     * @example\n     *\n     *      var isOdd = (acc, x) => x % 2 === 1;\n     *      var xs = [1, 3, 5, 60, 777, 800];\n     *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n     *\n     *      var ys = [2, 4, 6]\n     *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n     */\n    var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n        return _reduce(function (acc, x) {\n            return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n        }, a, list);\n    });\n\n    /**\n     * The complement of `filter`.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.filter, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isOdd = (n) => n % 2 === 1;\n     *\n     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    var reject = _curry2(function reject(pred, filterable) {\n        return filter(_complement(pred), filterable);\n    });\n\n    /**\n     * Returns a fixed list of size `n` containing a specified identical value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig a -> n -> [a]\n     * @param {*} value The value to repeat.\n     * @param {Number} n The desired size of the output list.\n     * @return {Array} A new array containing `n` `value`s.\n     * @example\n     *\n     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n     *\n     *      var obj = {};\n     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n     *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n     */\n    var repeat = _curry2(function repeat(value, n) {\n        return times(always(value), n);\n    });\n\n    /**\n     * Adds together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The sum of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.sum([2,4,6,8,100,1]); //=> 121\n     */\n    var sum = reduce(add, 0);\n\n    /**\n     * Returns a new list containing the last `n` elements of the given list.\n     * If `n > list.length`, returns a list of `list.length` elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements to return.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.dropLast\n     * @example\n     *\n     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(3, 'ramda');               //=> 'mda'\n     */\n    var takeLast = _curry2(function takeLast(n, xs) {\n        return drop(n >= 0 ? xs.length - n : 0, xs);\n    });\n\n    /**\n     * Initializes a transducer using supplied iterator function. Returns a single\n     * item by iterating through the list, successively calling the transformed\n     * iterator function and passing it an accumulator value and the current value\n     * from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It will be\n     * wrapped as a transformer to initialize the transducer. A transformer can be\n     * passed directly in place of an iterator function. In both cases, iteration\n     * may be stopped early with the `R.reduced` function.\n     *\n     * A transducer is a function that accepts a transformer and returns a\n     * transformer and can be composed directly.\n     *\n     * A transformer is an an object that provides a 2-arity reducing iterator\n     * function, step, 0-arity initial value function, init, and 1-arity result\n     * extraction function, result. The step function is used as the iterator\n     * function in reduce. The result function is used to convert the final\n     * accumulator into the return type and in most cases is R.identity. The init\n     * function can be used to provide an initial accumulator, but is ignored by\n     * transduce.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array. Wrapped as transformer, if necessary, and used to\n     *        initialize the transducer\n     * @param {*} acc The initial accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced, R.into\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n     */\n    var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list. Duplication is determined according to the value returned by\n     * applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @see R.union\n     * @example\n     *\n     *      var l1 = [{a: 1}, {a: 2}];\n     *      var l2 = [{a: 1}, {a: 4}];\n     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n     */\n    var unionWith = _curry3(function unionWith(pred, list1, list2) {\n        return uniqWith(pred, _concat(list1, list2));\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec, false otherwise. An object satisfies the spec if, for each of the\n     * spec's own properties, accessing that property of the object gives the same\n     * value (in `R.equals` terms) as accessing that property of the spec.\n     *\n     * `whereEq` is a specialization of [`where`](#where).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @sig {String: *} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @see R.where\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.whereEq({a: 1, b: 2});\n     *\n     *      pred({a: 1});              //=> false\n     *      pred({a: 1, b: 2});        //=> true\n     *      pred({a: 1, b: 2, c: 3});  //=> true\n     *      pred({a: 1, b: 1});        //=> false\n     */\n    var whereEq = _curry2(function whereEq(spec, testObj) {\n        return where(map(equals, spec), testObj);\n    });\n\n    var _flatCat = function () {\n        var preservingReduced = function (xf) {\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return xf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    var ret = xf['@@transducer/step'](result, input);\n                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n                }\n            };\n        };\n        return function _xcat(xf) {\n            var rxf = preservingReduced(xf);\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return rxf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n                }\n            };\n        };\n    }();\n\n    // Array.prototype.indexOf doesn't exist below IE9\n    // manually crawl the list to distinguish between +0 and -0\n    // NaN\n    // non-zero numbers can utilise Set\n    // all these types can utilise Set\n    // null can utilise Set\n    // anything else not covered above, defer to R.equals\n    var _indexOf = function _indexOf(list, a, idx) {\n        var inf, item;\n        // Array.prototype.indexOf doesn't exist below IE9\n        if (typeof list.indexOf === 'function') {\n            switch (typeof a) {\n            case 'number':\n                if (a === 0) {\n                    // manually crawl the list to distinguish between +0 and -0\n                    inf = 1 / a;\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (item === 0 && 1 / item === inf) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                } else if (a !== a) {\n                    // NaN\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (typeof item === 'number' && item !== item) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                }\n                // non-zero numbers can utilise Set\n                return list.indexOf(a, idx);\n            // all these types can utilise Set\n            case 'string':\n            case 'boolean':\n            case 'function':\n            case 'undefined':\n                return list.indexOf(a, idx);\n            case 'object':\n                if (a === null) {\n                    // null can utilise Set\n                    return list.indexOf(a, idx);\n                }\n            }\n        }\n        // anything else not covered above, defer to R.equals\n        while (idx < list.length) {\n            if (equals(list[idx], a)) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    };\n\n    var _xchain = _curry2(function _xchain(f, xf) {\n        return map(f, _flatCat(xf));\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if every one of the provided predicates is satisfied\n     * by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.anyPass\n     * @example\n     *\n     *      var isQueen = R.propEq('rank', 'Q');\n     *      var isSpade = R.propEq('suit', '♠︎');\n     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n     *\n     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n     */\n    var allPass = _curry1(function allPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (!preds[idx].apply(this, arguments)) {\n                    return false;\n                }\n                idx += 1;\n            }\n            return true;\n        });\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if at least one of the provided predicates is\n     * satisfied by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.allPass\n     * @example\n     *\n     *      var gte = R.anyPass([R.gt, R.equals]);\n     *\n     *      gte(3, 2); //=> true\n     *      gte(2, 2); //=> true\n     *      gte(2, 3); //=> false\n     */\n    var anyPass = _curry1(function anyPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (preds[idx].apply(this, arguments)) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        });\n    });\n\n    /**\n     * ap applies a list of functions to a list of values.\n     *\n     * Dispatches to the `ap` method of the second argument, if present. Also\n     * treats curried functions as applicatives.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig [a -> b] -> [a] -> [b]\n     * @sig Apply f => f (a -> b) -> f a -> f b\n     * @param {Array} fns An array of functions\n     * @param {Array} vs An array of values\n     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n     * @example\n     *\n     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n     */\n    // else\n    var ap = _curry2(function ap(applicative, fn) {\n        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {\n            return applicative(x)(fn(x));\n        } : // else\n        _reduce(function (acc, f) {\n            return _concat(acc, map(f, fn));\n        }, [], applicative);\n    });\n\n    /**\n     * Given a spec object recursively mapping properties to functions, creates a\n     * function producing an object of the same structure, by mapping each property\n     * to the result of calling its associated function with the supplied arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n     * @param {Object} spec an object recursively mapping properties to functions for\n     *        producing the values for these properties.\n     * @return {Function} A function that returns an object of the same structure\n     * as `spec', with each property set to the value returned by calling its\n     * associated function with the supplied arguments.\n     * @see R.converge, R.juxt\n     * @example\n     *\n     *      var getMetrics = R.applySpec({\n     *                                      sum: R.add,\n     *                                      nested: { mul: R.multiply }\n     *                                   });\n     *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n     */\n    var applySpec = _curry1(function applySpec(spec) {\n        spec = map(function (v) {\n            return typeof v == 'function' ? v : applySpec(v);\n        }, spec);\n        return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n            var args = arguments;\n            return map(function (f) {\n                return apply(f, args);\n            }, spec);\n        });\n    });\n\n    /**\n     * Returns the result of calling its first argument with the remaining\n     * arguments. This is occasionally useful as a converging function for\n     * `R.converge`: the left branch can produce a function while the right branch\n     * produces a value to be passed to that function as an argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig (*... -> a),*... -> a\n     * @param {Function} fn The function to apply to the remaining arguments.\n     * @param {...*} args Any number of positional arguments.\n     * @return {*}\n     * @see R.apply\n     * @example\n     *\n     *      var indentN = R.pipe(R.times(R.always(' ')),\n     *                           R.join(''),\n     *                           R.replace(/^(?!$)/gm));\n     *\n     *      var format = R.converge(R.call, [\n     *                                  R.pipe(R.prop('indent'), indentN),\n     *                                  R.prop('value')\n     *                              ]);\n     *\n     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n     */\n    var call = curry(function call(fn) {\n        return fn.apply(this, _slice(arguments, 1));\n    });\n\n    /**\n     * `chain` maps a function over a list and concatenates the results. `chain`\n     * is also known as `flatMap` in some libraries\n     *\n     * Dispatches to the `chain` method of the second argument, if present,\n     * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain m => (a -> m b) -> m a -> m b\n     * @param {Function} fn\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      var duplicate = n => [n, n];\n     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n     */\n    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n        if (typeof monad === 'function') {\n            return function () {\n                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n            };\n        }\n        return _makeFlat(false)(map(fn, monad));\n    }));\n\n    /**\n     * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments\n     * to `fn` are applied to each of the predicates in turn until one returns a\n     * \"truthy\" value, at which point `fn` returns the result of applying its\n     * arguments to the corresponding transformer. If none of the predicates\n     * matches, `fn` returns undefined.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Logic\n     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n     * @param {Array} pairs\n     * @return {Function}\n     * @example\n     *\n     *      var fn = R.cond([\n     *        [R.equals(0),   R.always('water freezes at 0°C')],\n     *        [R.equals(100), R.always('water boils at 100°C')],\n     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n     *      ]);\n     *      fn(0); //=> 'water freezes at 0°C'\n     *      fn(50); //=> 'nothing special happens at 50°C'\n     *      fn(100); //=> 'water boils at 100°C'\n     */\n    var cond = _curry1(function cond(pairs) {\n        var arity = reduce(max, 0, map(function (pair) {\n            return pair[0].length;\n        }, pairs));\n        return _arity(arity, function () {\n            var idx = 0;\n            while (idx < pairs.length) {\n                if (pairs[idx][0].apply(this, arguments)) {\n                    return pairs[idx][1].apply(this, arguments);\n                }\n                idx += 1;\n            }\n        });\n    });\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type. The arity of the function\n     * returned is specified to allow using variadic constructor functions.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Function\n     * @sig Number -> (* -> {*}) -> (* -> {*})\n     * @param {Number} n The arity of the constructor function.\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Variadic constructor function\n     *      var Widget = () => {\n     *        this.children = Array.prototype.slice.call(arguments);\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n     */\n    var constructN = _curry2(function constructN(n, Fn) {\n        if (n > 10) {\n            throw new Error('Constructor with greater than ten arguments');\n        }\n        if (n === 0) {\n            return function () {\n                return new Fn();\n            };\n        }\n        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n            switch (arguments.length) {\n            case 1:\n                return new Fn($0);\n            case 2:\n                return new Fn($0, $1);\n            case 3:\n                return new Fn($0, $1, $2);\n            case 4:\n                return new Fn($0, $1, $2, $3);\n            case 5:\n                return new Fn($0, $1, $2, $3, $4);\n            case 6:\n                return new Fn($0, $1, $2, $3, $4, $5);\n            case 7:\n                return new Fn($0, $1, $2, $3, $4, $5, $6);\n            case 8:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n            case 9:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n            case 10:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n            }\n        }));\n    });\n\n    /**\n     * Accepts a converging function and a list of branching functions and returns\n     * a new function. When invoked, this new function is applied to some\n     * arguments, each branching function is applied to those same arguments. The\n     * results of each branching function are passed as arguments to the converging\n     * function to produce the return value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.2\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} after A function. `after` will be invoked with the return values of\n     *        `fn1` and `fn2` as its arguments.\n     * @param {Array} functions A list of functions.\n     * @return {Function} A new function.\n     * @example\n     *\n     *      var add = (a, b) => a + b;\n     *      var multiply = (a, b) => a * b;\n     *      var subtract = (a, b) => a - b;\n     *\n     *      //≅ multiply( add(1, 2), subtract(1, 2) );\n     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n     *\n     *      var add3 = (a, b, c) => a + b + c;\n     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n     */\n    var converge = _curry2(function converge(after, fns) {\n        return curryN(reduce(max, 0, pluck('length', fns)), function () {\n            var args = arguments;\n            var context = this;\n            return after.apply(context, _map(function (fn) {\n                return fn.apply(context, args);\n            }, fns));\n        });\n    });\n\n    /**\n     * Counts the elements of a list according to how many match each value of a\n     * key generated by the supplied function. Returns an object mapping the keys\n     * produced by `fn` to the number of occurrences in the list. Note that all\n     * keys are coerced to strings because of how JavaScript objects work.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> String) -> [a] -> {*}\n     * @param {Function} fn The function used to map values to keys.\n     * @param {Array} list The list to count elements from.\n     * @return {Object} An object mapping keys to number of occurrences in the list.\n     * @example\n     *\n     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n     *      var letters = R.split('', 'abcABCaaaBBc');\n     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n     */\n    var countBy = reduceBy(function (acc, elem) {\n        return acc + 1;\n    }, 0);\n\n    /**\n     * Returns a new list without any consecutively repeating elements. Equality is\n     * determined by applying the supplied predicate two consecutive elements. The\n     * first element in a series of equal element is the one being preserved.\n     *\n     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n     */\n    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n        var result = [];\n        var idx = 1;\n        var len = list.length;\n        if (len !== 0) {\n            result[0] = list[0];\n            while (idx < len) {\n                if (!pred(last(result), list[idx])) {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n        }\n        return result;\n    }));\n\n    /**\n     * Takes a function and two values in its domain and returns `true` if the\n     * values map to the same value in the codomain; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Relation\n     * @sig (a -> b) -> a -> a -> Boolean\n     * @param {Function} f\n     * @param {*} x\n     * @param {*} y\n     * @return {Boolean}\n     * @example\n     *\n     *      R.eqBy(Math.abs, 5, -5); //=> true\n     */\n    var eqBy = _curry3(function eqBy(f, x, y) {\n        return equals(f(x), f(y));\n    });\n\n    /**\n     * Reports whether two objects have the same value, in `R.equals` terms, for\n     * the specified property. Useful as a curried predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig k -> {k: v} -> {k: v} -> Boolean\n     * @param {String} prop The name of the property to compare\n     * @param {Object} obj1\n     * @param {Object} obj2\n     * @return {Boolean}\n     *\n     * @example\n     *\n     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n     *      R.eqProps('a', o1, o2); //=> false\n     *      R.eqProps('c', o1, o2); //=> true\n     */\n    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n        return equals(obj1[prop], obj2[prop]);\n    });\n\n    /**\n     * Splits a list into sub-lists stored in an object, based on the result of\n     * calling a String-returning function on each element, and grouping the\n     * results according to values returned.\n     *\n     * Dispatches to the `groupBy` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> String) -> [a] -> {String: [a]}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} list The array to group\n     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n     *         that produced that key when passed to `fn`.\n     * @see R.transduce\n     * @example\n     *\n     *      var byGrade = R.groupBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Abby', score: 84},\n     *                      {name: 'Eddy', score: 58},\n     *                      // ...\n     *                      {name: 'Jack', score: 69}];\n     *      byGrade(students);\n     *      // {\n     *      //   'A': [{name: 'Dianne', score: 99}],\n     *      //   'B': [{name: 'Abby', score: 84}]\n     *      //   // ...,\n     *      //   'F': [{name: 'Eddy', score: 58}]\n     *      // }\n     */\n    var groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function (acc, item) {\n        if (acc == null) {\n            acc = [];\n        }\n        acc.push(item);\n        return acc;\n    }, null)));\n\n    /**\n     * Given a function that generates a key, turns a list of objects into an\n     * object indexing the objects by the given key. Note that if multiple\n     * objects generate the same value for the indexing key only the last value\n     * will be included in the generated object.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} array The array of objects to index\n     * @return {Object} An object indexing each array element by the given property.\n     * @example\n     *\n     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n     *      R.indexBy(R.prop('id'), list);\n     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n     */\n    var indexBy = reduceBy(function (acc, elem) {\n        return elem;\n    }, null);\n\n    /**\n     * Returns the position of the first occurrence of an item in an array, or -1\n     * if the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.lastIndexOf\n     * @example\n     *\n     *      R.indexOf(3, [1,2,3,4]); //=> 2\n     *      R.indexOf(10, [1,2,3,4]); //=> -1\n     */\n    var indexOf = _curry2(function indexOf(target, xs) {\n        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n    });\n\n    /**\n     * juxt applies a list of functions to a list of values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Function\n     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n     * @param {Array} fns An array of functions\n     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n     * @see R.applySpec\n     * @example\n     *\n     *      var getRange = R.juxt([Math.min, Math.max]);\n     *      getRange(3, 4, 9, -3); //=> [-3, 9]\n     */\n    var juxt = _curry1(function juxt(fns) {\n        return converge(_arrayOf, fns);\n    });\n\n    /**\n     * Returns a lens for the given getter and setter functions. The getter \"gets\"\n     * the value of the focus; the setter \"sets\" the value of the focus. The setter\n     * should not mutate the data structure.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n     * @param {Function} getter\n     * @param {Function} setter\n     * @return {Lens}\n     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lens = _curry2(function lens(getter, setter) {\n        return function (toFunctorFn) {\n            return function (target) {\n                return map(function (focus) {\n                    return setter(focus, target);\n                }, toFunctorFn(getter(target)));\n            };\n        };\n    });\n\n    /**\n     * Returns a lens whose focus is the specified index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Number -> Lens s a\n     * @param {Number} n\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n     */\n    var lensIndex = _curry1(function lensIndex(n) {\n        return lens(nth(n), update(n));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig [String] -> Lens s a\n     * @param {Array} path The path to use.\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xyLens = R.lensPath(['x', 'y']);\n     *\n     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2\n     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}\n     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}\n     */\n    var lensPath = _curry1(function lensPath(p) {\n        return lens(path(p), assocPath(p));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig String -> Lens s a\n     * @param {String} k\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lensProp = _curry1(function lensProp(k) {\n        return lens(prop(k), assoc(k));\n    });\n\n    /**\n     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig Number -> (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.lift, R.ap\n     * @example\n     *\n     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     */\n    var liftN = _curry2(function liftN(arity, fn) {\n        var lifted = curryN(arity, fn);\n        return curryN(arity, function () {\n            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n        });\n    });\n\n    /**\n     * Returns the mean of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.mean([2, 7, 9]); //=> 6\n     *      R.mean([]); //=> NaN\n     */\n    var mean = _curry1(function mean(list) {\n        return sum(list) / list.length;\n    });\n\n    /**\n     * Returns the median of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.median([2, 9, 7]); //=> 7\n     *      R.median([7, 2, 10, 9]); //=> 8\n     *      R.median([]); //=> NaN\n     */\n    var median = _curry1(function median(list) {\n        var len = list.length;\n        if (len === 0) {\n            return NaN;\n        }\n        var width = 2 - len % 2;\n        var idx = (len - width) / 2;\n        return mean(_slice(list).sort(function (a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }).slice(idx, idx + width));\n    });\n\n    /**\n     * Takes a predicate and a list or other \"filterable\" object and returns the\n     * pair of filterable objects of the same type of elements which do and do not\n     * satisfy, the predicate, respectively.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n     * @param {Function} pred A predicate to determine which side the element belongs to.\n     * @param {Array} filterable the list (or other filterable) to partition.\n     * @return {Array} An array, containing first the subset of elements that satisfy the\n     *         predicate, and second the subset of elements that do not satisfy.\n     * @see R.filter, R.reject\n     * @example\n     *\n     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n     *\n     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n     */\n    var partition = juxt([\n        filter,\n        reject\n    ]);\n\n    /**\n     * Performs left-to-right function composition. The leftmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * In some libraries this function is named `sequence`.\n     *\n     * **Note:** The result of pipe is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.compose\n     * @example\n     *\n     *      var f = R.pipe(Math.pow, R.negate, R.inc);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var pipe = function pipe() {\n        if (arguments.length === 0) {\n            throw new Error('pipe requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Performs left-to-right composition of one or more Promise-returning\n     * functions. The leftmost function may have any arity; the remaining functions\n     * must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.composeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n     */\n    var pipeP = function pipeP() {\n        if (arguments.length === 0) {\n            throw new Error('pipeP requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Multiplies together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The product of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.product([2,4,6,8,100,1]); //=> 38400\n     */\n    var product = reduce(multiply, 1);\n\n    /**\n     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n     * Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n     * @param {Function} of\n     * @param {*} traversable\n     * @return {*}\n     * @see R.traverse\n     * @example\n     *\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n     *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n     */\n    var sequence = _curry2(function sequence(of, traversable) {\n        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n            return ap(map(prepend, x), acc);\n        }, of([]), traversable);\n    });\n\n    /**\n     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n     * into an Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n     * @param {Function} of\n     * @param {Function} f\n     * @param {*} traversable\n     * @return {*}\n     * @see R.sequence\n     * @example\n     *\n     *      // Returns `Nothing` if the given divisor is `0`\n     *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n     *\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n     */\n    var traverse = _curry3(function traverse(of, f, traversable) {\n        return sequence(of, map(f, traversable));\n    });\n\n    /**\n     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain c => c (c a) -> c a\n     * @param {*} list\n     * @return {*}\n     * @see R.flatten, R.chain\n     * @example\n     *\n     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n     */\n    var unnest = chain(_identity);\n\n    var _contains = function _contains(a, list) {\n        return _indexOf(list, a, 0) >= 0;\n    };\n\n    //  mapPairs :: (Object, [String]) -> [String]\n    var _toString = function _toString(x, seen) {\n        var recur = function recur(y) {\n            var xs = seen.concat([x]);\n            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n        };\n        //  mapPairs :: (Object, [String]) -> [String]\n        var mapPairs = function (obj, keys) {\n            return _map(function (k) {\n                return _quote(k) + ': ' + recur(obj[k]);\n            }, keys.slice().sort());\n        };\n        switch (Object.prototype.toString.call(x)) {\n        case '[object Arguments]':\n            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n        case '[object Array]':\n            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n                return /^\\d+$/.test(k);\n            }, keys(x)))).join(', ') + ']';\n        case '[object Boolean]':\n            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n        case '[object Date]':\n            return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n        case '[object Null]':\n            return 'null';\n        case '[object Number]':\n            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n        case '[object String]':\n            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n        case '[object Undefined]':\n            return 'undefined';\n        default:\n            if (typeof x.toString === 'function') {\n                var repr = x.toString();\n                if (repr !== '[object Object]') {\n                    return repr;\n                }\n            }\n            return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n        }\n    };\n\n    /**\n     * Performs right-to-left function composition. The rightmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * **Note:** The result of compose is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipe\n     * @example\n     *\n     *      var f = R.compose(R.inc, R.negate, Math.pow);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var compose = function compose() {\n        if (arguments.length === 0) {\n            throw new Error('compose requires at least one argument');\n        }\n        return pipe.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the right-to-left Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.pipeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.composeK(\n     *        R.compose(Maybe.of, R.toUpper),\n     *        get('state'),\n     *        get('address'),\n     *        get('user'),\n     *        parseJson\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var composeK = function composeK() {\n        return compose.apply(this, prepend(identity, map(chain, arguments)));\n    };\n\n    /**\n     * Performs right-to-left composition of one or more Promise-returning\n     * functions. The rightmost function may have any arity; the remaining\n     * functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n     */\n    var composeP = function composeP() {\n        if (arguments.length === 0) {\n            throw new Error('composeP requires at least one argument');\n        }\n        return pipeP.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> {*}) -> (* -> {*})\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Constructor function\n     *      var Widget = config => {\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n     */\n    var construct = _curry1(function construct(Fn) {\n        return constructN(Fn.length, Fn);\n    });\n\n    /**\n     * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n     * least one element of the given list; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Boolean\n     * @param {Object} a The item to compare against.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n     * @see R.any\n     * @example\n     *\n     *      R.contains(3, [1, 2, 3]); //=> true\n     *      R.contains(4, [1, 2, 3]); //=> false\n     *      R.contains([42], [[42]]); //=> true\n     */\n    var contains = _curry2(_contains);\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith\n     * @example\n     *\n     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n     */\n    var difference = _curry2(function difference(first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n                out[out.length] = first[idx];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. `R.equals`\n     * is used to determine equality.\n     *\n     * Dispatches to the `dropRepeats` method of the first argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n     */\n    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n    /**\n     * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.liftN\n     * @example\n     *\n     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n     *\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     *\n     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n     *\n     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n     */\n    var lift = _curry1(function lift(fn) {\n        return liftN(fn.length, fn);\n    });\n\n    /**\n     * Returns a partial copy of an object omitting the keys specified.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [String] -> {String: *} -> {String: *}\n     * @param {Array} names an array of String property names to omit from the new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with properties from `names` not on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n     */\n    var omit = _curry2(function omit(names, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (!_contains(prop, names)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the left-to-right Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.composeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.pipeK(\n     *        parseJson,\n     *        get('user'),\n     *        get('address'),\n     *        get('state'),\n     *        R.compose(Maybe.of, R.toUpper)\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var pipeK = function pipeK() {\n        return composeK.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the string representation of the given value. `eval`'ing the output\n     * should result in a value equivalent to the input value. Many of the built-in\n     * `toString` methods do not satisfy this requirement.\n     *\n     * If the given value is an `[object Object]` with a `toString` method other\n     * than `Object.prototype.toString`, this method is invoked with no arguments\n     * to produce the return value. This means user-defined constructor functions\n     * can provide a suitable `toString` method. For example:\n     *\n     *     function Point(x, y) {\n     *       this.x = x;\n     *       this.y = y;\n     *     }\n     *\n     *     Point.prototype.toString = function() {\n     *       return 'new Point(' + this.x + ', ' + this.y + ')';\n     *     };\n     *\n     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category String\n     * @sig * -> String\n     * @param {*} val\n     * @return {String}\n     * @example\n     *\n     *      R.toString(42); //=> '42'\n     *      R.toString('abc'); //=> '\"abc\"'\n     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n     */\n    var toString = _curry1(function toString(val) {\n        return _toString(val, []);\n    });\n\n    /**\n     * Returns a new list without values in the first argument.\n     * `R.equals` is used to determine equality.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} list1 The values to be removed from `list2`.\n     * @param {Array} list2 The array to remove values from.\n     * @return {Array} The new array without values in `list1`.\n     * @see R.transduce\n     * @example\n     *\n     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n     */\n    var without = _curry2(function (xs, list) {\n        return reject(flip(_contains)(xs), list);\n    });\n\n    // A simple Set type that honours R.equals semantics\n    /* globals Set */\n    // until we figure out why jsdoc chokes on this\n    // @param item The item to add to the Set\n    // @returns {boolean} true if the item did not exist prior, otherwise false\n    //\n    //\n    // @param item The item to check for existence in the Set\n    // @returns {boolean} true if the item exists in the Set, otherwise false\n    //\n    //\n    // Combines the logic for checking whether an item is a member of the set and\n    // for adding a new item to the set.\n    //\n    // @param item       The item to check or add to the Set instance.\n    // @param shouldAdd  If true, the item will be added to the set if it doesn't\n    //                   already exist.\n    // @param set        The set instance to check or add to.\n    // @return {boolean} true if the item already existed, otherwise false.\n    //\n    // distinguish between +0 and -0\n    // these types can all utilise the native Set\n    // set._items['boolean'] holds a two element array\n    // representing [ falseExists, trueExists ]\n    // compare functions for reference equality\n    /* falls through */\n    // reduce the search size of heterogeneous sets by creating buckets\n    // for each type.\n    // scan through all previously applied items\n    var _Set = function () {\n        function _Set() {\n            /* globals Set */\n            this._nativeSet = typeof Set === 'function' ? new Set() : null;\n            this._items = {};\n        }\n        // until we figure out why jsdoc chokes on this\n        // @param item The item to add to the Set\n        // @returns {boolean} true if the item did not exist prior, otherwise false\n        //\n        _Set.prototype.add = function (item) {\n            return !hasOrAdd(item, true, this);\n        };\n        //\n        // @param item The item to check for existence in the Set\n        // @returns {boolean} true if the item exists in the Set, otherwise false\n        //\n        _Set.prototype.has = function (item) {\n            return hasOrAdd(item, false, this);\n        };\n        //\n        // Combines the logic for checking whether an item is a member of the set and\n        // for adding a new item to the set.\n        //\n        // @param item       The item to check or add to the Set instance.\n        // @param shouldAdd  If true, the item will be added to the set if it doesn't\n        //                   already exist.\n        // @param set        The set instance to check or add to.\n        // @return {boolean} true if the item already existed, otherwise false.\n        //\n        function hasOrAdd(item, shouldAdd, set) {\n            var type = typeof item;\n            var prevSize, newSize;\n            switch (type) {\n            case 'string':\n            case 'number':\n                // distinguish between +0 and -0\n                if (item === 0 && 1 / item === -Infinity) {\n                    if (set._items['-0']) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items['-0'] = true;\n                        }\n                        return false;\n                    }\n                }\n                // these types can all utilise the native Set\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize === prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = {};\n                            set._items[type][item] = true;\n                        }\n                        return false;\n                    } else if (item in set._items[type]) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][item] = true;\n                        }\n                        return false;\n                    }\n                }\n            case 'boolean':\n                // set._items['boolean'] holds a two element array\n                // representing [ falseExists, trueExists ]\n                if (type in set._items) {\n                    var bIdx = item ? 1 : 0;\n                    if (set._items[type][bIdx]) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][bIdx] = true;\n                        }\n                        return false;\n                    }\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = item ? [\n                            false,\n                            true\n                        ] : [\n                            true,\n                            false\n                        ];\n                    }\n                    return false;\n                }\n            case 'function':\n                // compare functions for reference equality\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize > prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = [item];\n                        }\n                        return false;\n                    }\n                    if (!_contains(item, set._items[type])) {\n                        if (shouldAdd) {\n                            set._items[type].push(item);\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n            case 'undefined':\n                if (set._items[type]) {\n                    return true;\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = true;\n                    }\n                    return false;\n                }\n            case 'object':\n                if (item === null) {\n                    if (!set._items['null']) {\n                        if (shouldAdd) {\n                            set._items['null'] = true;\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n            /* falls through */\n            default:\n                // reduce the search size of heterogeneous sets by creating buckets\n                // for each type.\n                type = Object.prototype.toString.call(item);\n                if (!(type in set._items)) {\n                    if (shouldAdd) {\n                        set._items[type] = [item];\n                    }\n                    return false;\n                }\n                // scan through all previously applied items\n                if (!_contains(item, set._items[type])) {\n                    if (shouldAdd) {\n                        set._items[type].push(item);\n                    }\n                    return false;\n                }\n                return true;\n            }\n        }\n        return _Set;\n    }();\n\n    /**\n     * A function wrapping calls to the two functions in an `&&` operation,\n     * returning the result of the first function if it is false-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * false-y value.\n     *\n     * In addition to functions, `R.both` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n     * @see R.and\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.both(gt10, even);\n     *      f(100); //=> true\n     *      f(101); //=> false\n     */\n    var both = _curry2(function both(f, g) {\n        return _isFunction(f) ? function _both() {\n            return f.apply(this, arguments) && g.apply(this, arguments);\n        } : lift(and)(f, g);\n    });\n\n    /**\n     * Takes a function `f` and returns a function `g` such that:\n     *\n     *   - applying `g` to zero or more arguments will give __true__ if applying\n     *     the same arguments to `f` gives a logical __false__ value; and\n     *\n     *   - applying `g` to zero or more arguments will give __false__ if applying\n     *     the same arguments to `f` gives a logical __true__ value.\n     *\n     * `R.complement` will work on all other functors as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> *) -> (*... -> Boolean)\n     * @param {Function} f\n     * @return {Function}\n     * @see R.not\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *      var isOdd = R.complement(isEven);\n     *      isOdd(21); //=> true\n     *      isOdd(42); //=> false\n     */\n    var complement = lift(not);\n\n    /**\n     * Returns the result of concatenating the given lists or strings.\n     *\n     * Note: `R.concat` expects both arguments to be of the same type,\n     * unlike the native `Array.prototype.concat` method. It will throw\n     * an error if you `concat` an Array with a non-Array value.\n     *\n     * Dispatches to the `concat` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @sig String -> String -> String\n     * @param {Array|String} a\n     * @param {Array|String} b\n     * @return {Array|String}\n     *\n     * @example\n     *\n     *      R.concat([], []); //=> []\n     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n     */\n    var concat = _curry2(function concat(a, b) {\n        if (a == null || !_isFunction(a.concat)) {\n            throw new TypeError(toString(a) + ' does not have a method named \"concat\"');\n        }\n        if (_isArray(a) && !_isArray(b)) {\n            throw new TypeError(toString(b) + ' is not an array');\n        }\n        return a.concat(b);\n    });\n\n    /**\n     * A function wrapping calls to the two functions in an `||` operation,\n     * returning the result of the first function if it is truth-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * truth-y value.\n     *\n     * In addition to functions, `R.either` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n     * @see R.or\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.either(gt10, even);\n     *      f(101); //=> true\n     *      f(8); //=> true\n     */\n    var either = _curry2(function either(f, g) {\n        return _isFunction(f) ? function _either() {\n            return f.apply(this, arguments) || g.apply(this, arguments);\n        } : lift(or)(f, g);\n    });\n\n    /**\n     * Turns a named method with a specified arity into a function that can be\n     * called directly supplied with arguments and a target object.\n     *\n     * The returned function is curried and accepts `arity + 1` parameters where\n     * the final parameter is the target object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n     * @param {Number} arity Number of arguments the returned function should take\n     *        before the target object.\n     * @param {String} method Name of the method to call.\n     * @return {Function} A new curried function.\n     * @example\n     *\n     *      var sliceFrom = R.invoker(1, 'slice');\n     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n     *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n     */\n    var invoker = _curry2(function invoker(arity, method) {\n        return curryN(arity + 1, function () {\n            var target = arguments[arity];\n            if (target != null && _isFunction(target[method])) {\n                return target[method].apply(target, _slice(arguments, 0, arity));\n            }\n            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n        });\n    });\n\n    /**\n     * Returns a string made by inserting the `separator` between each element and\n     * concatenating all the elements into a single string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig String -> [a] -> String\n     * @param {Number|String} separator The string used to separate the elements.\n     * @param {Array} xs The elements to join into a string.\n     * @return {String} str The string made by concatenating `xs` with `separator`.\n     * @see R.split\n     * @example\n     *\n     *      var spacer = R.join(' ');\n     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n     */\n    var join = invoker(1, 'join');\n\n    /**\n     * Creates a new function that, when invoked, caches the result of calling `fn`\n     * for a given argument set and returns the result. Subsequent calls to the\n     * memoized `fn` with the same argument set will not result in an additional\n     * call to `fn`; instead, the cached result for that set of arguments will be\n     * returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (*... -> a) -> (*... -> a)\n     * @param {Function} fn The function to memoize.\n     * @return {Function} Memoized version of `fn`.\n     * @example\n     *\n     *      var count = 0;\n     *      var factorial = R.memoize(n => {\n     *        count += 1;\n     *        return R.product(R.range(1, n + 1));\n     *      });\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      count; //=> 1\n     */\n    var memoize = _curry1(function memoize(fn) {\n        var cache = {};\n        return _arity(fn.length, function () {\n            var key = toString(arguments);\n            if (!_has(key, cache)) {\n                cache[key] = fn.apply(this, arguments);\n            }\n            return cache[key];\n        });\n    });\n\n    /**\n     * Splits a string into an array of strings based on the given\n     * separator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig (String | RegExp) -> String -> [String]\n     * @param {String|RegExp} sep The pattern.\n     * @param {String} str The string to separate into an array.\n     * @return {Array} The array of strings from `str` separated by `str`.\n     * @see R.join\n     * @example\n     *\n     *      var pathComponents = R.split('/');\n     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n     *\n     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n     */\n    var split = invoker(1, 'split');\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n     * @example\n     *\n     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n     */\n    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n        return concat(difference(list1, list2), difference(list2, list1));\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both. Duplication is determined according to the value\n     * returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifference, R.difference, R.differenceWith\n     * @example\n     *\n     *      var eqA = R.eqBy(R.prop('a'));\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n     */\n    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n    });\n\n    /**\n     * Determines whether a given string matches a given regular expression.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category String\n     * @sig RegExp -> String -> Boolean\n     * @param {RegExp} pattern\n     * @param {String} str\n     * @return {Boolean}\n     * @see R.match\n     * @example\n     *\n     *      R.test(/^x/, 'xyz'); //=> true\n     *      R.test(/^y/, 'xyz'); //=> false\n     */\n    var test = _curry2(function test(pattern, str) {\n        if (!_isRegExp(pattern)) {\n            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n        }\n        return _cloneRegExp(pattern).test(str);\n    });\n\n    /**\n     * The lower case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to lower case.\n     * @return {String} The lower case version of `str`.\n     * @see R.toUpper\n     * @example\n     *\n     *      R.toLower('XYZ'); //=> 'xyz'\n     */\n    var toLower = invoker(0, 'toLowerCase');\n\n    /**\n     * The upper case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to upper case.\n     * @return {String} The upper case version of `str`.\n     * @see R.toLower\n     * @example\n     *\n     *      R.toUpper('abc'); //=> 'ABC'\n     */\n    var toUpper = invoker(0, 'toUpperCase');\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied function to\n     * each list element. Prefers the first item if the supplied function produces\n     * the same value on two items. `R.equals` is used for comparison.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> b) -> [a] -> [a]\n     * @param {Function} fn A function used to produce a value to use during comparisons.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n     */\n    var uniqBy = _curry2(function uniqBy(fn, list) {\n        var set = new _Set();\n        var result = [];\n        var idx = 0;\n        var appliedItem, item;\n        while (idx < list.length) {\n            item = list[idx];\n            appliedItem = fn(item);\n            if (set.add(appliedItem)) {\n                result.push(item);\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list. `R.equals` is used to determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n     *      R.uniq([1, '1']);     //=> [1, '1']\n     *      R.uniq([[42], [42]]); //=> [[42]]\n     */\n    var uniq = uniqBy(identity);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The list of elements found in both `list1` and `list2`.\n     * @see R.intersectionWith\n     * @example\n     *\n     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n     */\n    var intersection = _curry2(function intersection(list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        return uniq(_filter(flip(_contains)(lookupList), filteredList));\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @example\n     *\n     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n     */\n    var union = _curry2(compose(uniq, _concat));\n\n    var R = {\n        F: F,\n        T: T,\n        __: __,\n        add: add,\n        addIndex: addIndex,\n        adjust: adjust,\n        all: all,\n        allPass: allPass,\n        always: always,\n        and: and,\n        any: any,\n        anyPass: anyPass,\n        ap: ap,\n        aperture: aperture,\n        append: append,\n        apply: apply,\n        applySpec: applySpec,\n        assoc: assoc,\n        assocPath: assocPath,\n        binary: binary,\n        bind: bind,\n        both: both,\n        call: call,\n        chain: chain,\n        clamp: clamp,\n        clone: clone,\n        comparator: comparator,\n        complement: complement,\n        compose: compose,\n        composeK: composeK,\n        composeP: composeP,\n        concat: concat,\n        cond: cond,\n        construct: construct,\n        constructN: constructN,\n        contains: contains,\n        converge: converge,\n        countBy: countBy,\n        curry: curry,\n        curryN: curryN,\n        dec: dec,\n        defaultTo: defaultTo,\n        difference: difference,\n        differenceWith: differenceWith,\n        dissoc: dissoc,\n        dissocPath: dissocPath,\n        divide: divide,\n        drop: drop,\n        dropLast: dropLast,\n        dropLastWhile: dropLastWhile,\n        dropRepeats: dropRepeats,\n        dropRepeatsWith: dropRepeatsWith,\n        dropWhile: dropWhile,\n        either: either,\n        empty: empty,\n        eqBy: eqBy,\n        eqProps: eqProps,\n        equals: equals,\n        evolve: evolve,\n        filter: filter,\n        find: find,\n        findIndex: findIndex,\n        findLast: findLast,\n        findLastIndex: findLastIndex,\n        flatten: flatten,\n        flip: flip,\n        forEach: forEach,\n        fromPairs: fromPairs,\n        groupBy: groupBy,\n        groupWith: groupWith,\n        gt: gt,\n        gte: gte,\n        has: has,\n        hasIn: hasIn,\n        head: head,\n        identical: identical,\n        identity: identity,\n        ifElse: ifElse,\n        inc: inc,\n        indexBy: indexBy,\n        indexOf: indexOf,\n        init: init,\n        insert: insert,\n        insertAll: insertAll,\n        intersection: intersection,\n        intersectionWith: intersectionWith,\n        intersperse: intersperse,\n        into: into,\n        invert: invert,\n        invertObj: invertObj,\n        invoker: invoker,\n        is: is,\n        isArrayLike: isArrayLike,\n        isEmpty: isEmpty,\n        isNil: isNil,\n        join: join,\n        juxt: juxt,\n        keys: keys,\n        keysIn: keysIn,\n        last: last,\n        lastIndexOf: lastIndexOf,\n        length: length,\n        lens: lens,\n        lensIndex: lensIndex,\n        lensPath: lensPath,\n        lensProp: lensProp,\n        lift: lift,\n        liftN: liftN,\n        lt: lt,\n        lte: lte,\n        map: map,\n        mapAccum: mapAccum,\n        mapAccumRight: mapAccumRight,\n        mapObjIndexed: mapObjIndexed,\n        match: match,\n        mathMod: mathMod,\n        max: max,\n        maxBy: maxBy,\n        mean: mean,\n        median: median,\n        memoize: memoize,\n        merge: merge,\n        mergeAll: mergeAll,\n        mergeWith: mergeWith,\n        mergeWithKey: mergeWithKey,\n        min: min,\n        minBy: minBy,\n        modulo: modulo,\n        multiply: multiply,\n        nAry: nAry,\n        negate: negate,\n        none: none,\n        not: not,\n        nth: nth,\n        nthArg: nthArg,\n        objOf: objOf,\n        of: of,\n        omit: omit,\n        once: once,\n        or: or,\n        over: over,\n        pair: pair,\n        partial: partial,\n        partialRight: partialRight,\n        partition: partition,\n        path: path,\n        pathEq: pathEq,\n        pathOr: pathOr,\n        pathSatisfies: pathSatisfies,\n        pick: pick,\n        pickAll: pickAll,\n        pickBy: pickBy,\n        pipe: pipe,\n        pipeK: pipeK,\n        pipeP: pipeP,\n        pluck: pluck,\n        prepend: prepend,\n        product: product,\n        project: project,\n        prop: prop,\n        propEq: propEq,\n        propIs: propIs,\n        propOr: propOr,\n        propSatisfies: propSatisfies,\n        props: props,\n        range: range,\n        reduce: reduce,\n        reduceBy: reduceBy,\n        reduceRight: reduceRight,\n        reduceWhile: reduceWhile,\n        reduced: reduced,\n        reject: reject,\n        remove: remove,\n        repeat: repeat,\n        replace: replace,\n        reverse: reverse,\n        scan: scan,\n        sequence: sequence,\n        set: set,\n        slice: slice,\n        sort: sort,\n        sortBy: sortBy,\n        split: split,\n        splitAt: splitAt,\n        splitEvery: splitEvery,\n        splitWhen: splitWhen,\n        subtract: subtract,\n        sum: sum,\n        symmetricDifference: symmetricDifference,\n        symmetricDifferenceWith: symmetricDifferenceWith,\n        tail: tail,\n        take: take,\n        takeLast: takeLast,\n        takeLastWhile: takeLastWhile,\n        takeWhile: takeWhile,\n        tap: tap,\n        test: test,\n        times: times,\n        toLower: toLower,\n        toPairs: toPairs,\n        toPairsIn: toPairsIn,\n        toString: toString,\n        toUpper: toUpper,\n        transduce: transduce,\n        transpose: transpose,\n        traverse: traverse,\n        trim: trim,\n        tryCatch: tryCatch,\n        type: type,\n        unapply: unapply,\n        unary: unary,\n        uncurryN: uncurryN,\n        unfold: unfold,\n        union: union,\n        unionWith: unionWith,\n        uniq: uniq,\n        uniqBy: uniqBy,\n        uniqWith: uniqWith,\n        unless: unless,\n        unnest: unnest,\n        until: until,\n        update: update,\n        useWith: useWith,\n        values: values,\n        valuesIn: valuesIn,\n        view: view,\n        when: when,\n        where: where,\n        whereEq: whereEq,\n        without: without,\n        wrap: wrap,\n        xprod: xprod,\n        zip: zip,\n        zipObj: zipObj,\n        zipWith: zipWith\n    };\n  /* eslint-env amd */\n\n  /* TEST_ENTRY_POINT */\n\n  if (typeof exports === 'object') {\n    module.exports = R;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() { return R; });\n  } else {\n    this.R = R;\n  }\n\n}.call(this));\n"],"mappings":"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ACH,CAFe,CAAhB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIyH,GAAG,GAAG3H,OAAO,CAAC,SAAS2H,GAAT,CAAanL,CAAb,EAAgB0D,CAAhB,EAAmB;IACjC,OAAO1D,CAAC,IAAI0D,CAAZ;EACH,CAFgB,CAAjB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI0H,GAAG,GAAG5H,OAAO,CAAC1E,IAAD,CAAjB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIuM,KAAK,GAAG7H,OAAO,CAAC,SAAS6H,KAAT,CAAetM,IAAf,EAAqBC,GAArB,EAA0B;IAC1C,OAAOD,IAAI,IAAIC,GAAf;EACH,CAFkB,CAAnB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;EACA;;;EACA,IAAIsM,SAAS,GAAG9H,OAAO,CAAC,SAAS8H,SAAT,CAAmBtL,CAAnB,EAAsB0D,CAAtB,EAAyB;IAC7C;IACA,IAAI1D,CAAC,KAAK0D,CAAV,EAAa;MACT;MACA;MACA,OAAO1D,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAU,IAAI0D,CAAhC;IACH,CAJD,MAIO;MACH;MACA,OAAO1D,CAAC,KAAKA,CAAN,IAAW0D,CAAC,KAAKA,CAAxB;IACH;EACJ,CAVsB,CAAvB;EAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI6H,QAAQ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P;EACH,CAXkB,CAAnB;EAaA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI6S,WAAW,GAAGpN,OAAO,CAAC,SAASoN,WAAT,CAAqBzV,EAArB,EAAyBuH,GAAzB,EAA8BvG,IAA9B,EAAoC;IAC1D,IAAIwB,GAAG,GAAGxB,IAAI,CAAC0B,MAAL,GAAc,CAAxB;;IACA,OAAOF,GAAG,IAAI,CAAd,EAAiB;MACb+E,GAAG,GAAGvH,EAAE,CAACuH,GAAD,EAAMvG,IAAI,CAACwB,GAAD,CAAV,CAAR;MACAA,GAAG,IAAI,CAAP;IACH;;IACD,OAAO+E,GAAP;EACH,CAPwB,CAAzB;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAImO,OAAO,GAAG5N,OAAO,CAACjC,QAAD,CAArB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI8P,MAAM,GAAGtN,OAAO,CAAC,SAASsN,MAAT,CAAgBjJ,KAAhB,EAAuBkJ,KAAvB,EAA8B5U,IAA9B,EAAoC;IACrD,OAAOqB,OAAO,CAACyD,MAAM,CAAC9E,IAAD,EAAO,CAAP,EAAUkF,IAAI,CAACE,GAAL,CAASsG,KAAT,EAAgB1L,IAAI,CAAC0B,MAArB,CAAV,CAAP,EAAgDoD,MAAM,CAAC9E,IAAD,EAAOkF,IAAI,CAACE,GAAL,CAASpF,IAAI,CAAC0B,MAAd,EAAsBgK,KAAK,GAAGkJ,KAA9B,CAAP,CAAtD,CAAd;EACH,CAFmB,CAApB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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IAAa,CAACF,IAAI,CAAC9B,IAAI,CAACwB,GAAD,CAAL,CAAzB,EAAsC;MAClCuU,MAAM,CAAC5V,IAAP,CAAYH,IAAI,CAACwB,GAAD,CAAhB;MACAA,GAAG,IAAI,CAAP;IACH;;IACD,OAAO,CACHuU,MADG,EAEHjR,MAAM,CAAC9E,IAAD,EAAOwB,GAAP,CAFH,CAAP;EAIH,CAZsB,CAAvB;EAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIwU,QAAQ,GAAGhP,OAAO,CAAC,SAASgP,QAAT,CAAkBxS,CAAlB,EAAqB0D,CAArB,EAAwB;IAC3C,OAAO/D,MAAM,CAACK,CAAD,CAAN,GAAYL,MAAM,CAAC+D,CAAD,CAAzB;EACH,CAFqB,CAAtB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIoG,IAAI,GAAG1G,eAAe,CAAC,MAAD,EAASpG,KAAK,CAAC,CAAD,EAAIyV,QAAJ,CAAd,CAA1B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIC,IAAI,GAAGlP,OAAO,CAACe,aAAa,CAAC,MAAD,EAASmD,MAAT,EAAiB,SAASgL,IAAT,CAAcnX,CAAd,EAAiBoX,EAAjB,EAAqB;IAClE,OAAO3V,KAAK,CAAC,CAAD,EAAIzB,CAAC,GAAG,CAAJ,GAAQkX,QAAR,GAAmBlX,CAAvB,EAA0BoX,EAA1B,CAAZ;EACH,CAF+B,CAAd,CAAlB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIC,OAAO,GAAGjW,OAAO,CAACoU,SAAS,CAAC,IAAD,CAAV,CAArB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI8B,IAAI,GAAGlW,OAAO,CAAC,SAASkW,IAAT,CAAche,EAAd,EAAkB;IACjC,OAAO2d,KAAK,CAAC,UAAUnZ,CAAV,EAAa0D,CAAb,EAAgB;MACzB,IAAInC,IAAI,GAAGD,MAAM,CAAC5F,SAAD,CAAjB;;MACA6F,IAAI,CAAC,CAAD,CAAJ,GAAUmC,CAAV;MACAnC,IAAI,CAAC,CAAD,CAAJ,GAAUvB,CAAV;MACA,OAAOxE,EAAE,CAACC,KAAH,CAAS,IAAT,EAAe8F,IAAf,CAAP;IACH,CALW,CAAZ;EAMH,CAPiB,CAAlB;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIsI,IAAI,GAAGiF,GAAG,CAAC,CAAD,CAAd;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,IAAInM,IAAI,GAAG3F,KAAK,CAAC,CAAD,EAAI,CAAC,CAAL,CAAhB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,IAAIyc,gBAAgB,GAAG5V,OAAO,CAAC,SAAS4V,gBAAT,CAA0Bnb,IAA1B,EAAgCob,KAAhC,EAAuCC,KAAvC,EAA8C;IACzE,IAAIC,UAAJ,EAAgBC,YAAhB;;IACA,IAAIH,KAAK,CAACxb,MAAN,GAAeyb,KAA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EAAjB,EAAqB;MACrC,OAAOhf,EAAE,CAAC+e,EAAD,EAAKC,EAAL,CAAT;IACH,CAFkB,EAEhBvM,CAFgB,EAEbC,CAFa,CAAnB;EAGH,CAJsB,CAAvB;EAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIuM,OAAO,GAAG1D,wBAAwB,CAAClZ,OAAD,CAAtC;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI6c,YAAY,GAAG3D,wBAAwB,CAACyC,IAAI,CAAC3b,OAAD,CAAL,CAA3C;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI8c,MAAM,GAAG9W,OAAO,CAAC,SAAS8W,MAAT,CAAgBC,KAAhB,EAAuBpb,GAAvB,EAA4BR,GAA5B,EAAiC;IAClD,OAAOqY,MAAM,CAACxO,IAAI,CAAC+R,KAAD,EAAQ5b,GAAR,CAAL,EAAmBQ,GAAnB,CAAb;EACH,CAFmB,CAApB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIqb,KAAK,GAAGrX,OAAO,CAAC,SAASqX,KAAT,CAAelS,CAAf,EAAkBnM,IAAlB,EAAwB;IACxC,OAAOkT,GAAG,CAAC3Q,IAAI,CAAC4J,CAAD,CAAL,EAAUnM,IAAV,CAAV;EACH,CAFkB,CAAnB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;;;EACA,IAAIse,OAAO,GAAG9F,OAAO,CAAC5U,IAAD,EAAO,CACxBkQ,OADwB,EAExB/E,QAFwB,CAAP,CAArB;EAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,IAAIwP,MAAM,GAAGlX,OAAO,CAAC,SAASkX,MAAT,CAAgBxK,IAAhB,EAAsB/Q,GAAtB,EAA2BR,GAA3B,EAAgC;IACjD,OAAOqY,MAAM,CAAC7X,GAAD,EAAMR,GAAG,CAACuR,IAAD,CAAT,CAAb;EACH,CAFmB,CAApB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI2H,MAAM,GAAGrU,OAAO,CAACgU,OAAD,CAApB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAImD,QAAQ,GAAG/W,OAAO,CAAC,CAAD,EAAI,EAAJ,EAAQM,aAAa,CAAC,UAAD,EAAa4C,UAAb,EAAyB,SAAS6T,QAAT,CAAkB3T,OAAlB,EAA2BC,QAA3B,EAAqCC,KAArC,EAA4C/K,IAA5C,EAAkD;IAClH,OAAOqb,OAAO,CAAC,UAAU9U,GAAV,EAAegJ,GAAf,EAAoB;MAC/B,IAAItE,GAAG,GAAGF,KAAK,CAACwE,GAAD,CAAf;MACAhJ,GAAG,CAAC0E,GAAD,CAAH,GAAWJ,OAAO,CAACvI,IAAI,CAAC2I,GAAD,EAAM1E,GAAN,CAAJ,GAAiBA,GAAG,CAAC0E,GAAD,CAApB,GAA4BH,QAA7B,EAAuCyE,GAAvC,CAAlB;MACA,OAAOhJ,GAAP;IACH,CAJa,EAIX,EAJW,EAIPvG,IAJO,CAAd;EAKH,CAN0C,CAArB,CAAtB;EAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIye,WAAW,GAAGhX,OAAO,CAAC,CAAD,EAAI,EAAJ,EAAQ,SAASiX,YAAT,CAAsB5c,IAAtB,EAA4B9C,EAA5B,EAAgCwE,CAAhC,EAAmCxD,IAAnC,EAAyC;IACtE,OAAOqb,OAAO,CAAC,UAAU9U,GAAV,EAAexE,CAAf,EAAkB;MAC7B,OAAOD,IAAI,CAACyE,GAAD,EAAMxE,CAAN,CAAJ,GAAe/C,EAAE,CAACuH,GAAD,EAAMxE,CAAN,CAAjB,GAA4B8C,QAAQ,CAAC0B,GAAD,CAA3C;IACH,CAFa,EAEX/C,CAFW,EAERxD,IAFQ,CAAd;EAGH,CAJwB,CAAzB;EAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI2e,MAAM,GAAG3X,OAAO,CAAC,SAAS2X,MAAT,CAAgB7c,IAAhB,EAAsBgb,UAAtB,EAAkC;IACnD,OAAOD,MAAM,CAAC1b,WAAW,CAACW,IAAD,CAAZ,EAAoBgb,UAApB,CAAb;EACH,CAFmB,CAApB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI8B,MAAM,GAAG5X,OAAO,CAAC,SAAS4X,MAAT,CAAgBxe,KAAhB,EAAuBrB,CAAvB,EAA0B;IAC3C,OAAOwX,KAAK,CAAC1K,MAAM,CAACzL,KAAD,CAAP,EAAgBrB,CAAhB,CAAZ;EACH,CAFmB,CAApB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI8f,GAAG,GAAGnD,MAAM,CAAClQ,GAAD,EAAM,CAAN,CAAhB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,IAAIsT,QAAQ,GAAG9X,OAAO,CAAC,SAAS8X,QAAT,CAAkB/f,CAAlB,EAAqBoX,EAArB,EAAyB;IAC5C,OAAOyG,IAAI,CAAC7d,CAAC,IAAI,CAAL,GAASoX,EAAE,CAACzU,MAAH,GAAY3C,CAArB,GAAyB,CAA1B,EAA6BoX,EAA7B,CAAX;EACH,CAFqB,CAAtB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI4I,SAAS,GAAGrS,MAAM,CAAC,CAAD,EAAI,SAASqS,SAAT,CAAmB3Y,EAAnB,EAAuBpH,EAAvB,EAA2BuH,GAA3B,EAAgCvG,IAAhC,EAAsC;IAC5D,OAAOqb,OAAO,CAACjV,EAAE,CAAC,OAAOpH,EAAP,KAAc,UAAd,GAA2BqH,MAAM,CAACrH,EAAD,CAAjC,GAAwCA,EAAzC,CAAH,EAAiDuH,GAAjD,EAAsDvG,IAAtD,CAAd;EACH,CAFqB,CAAtB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,IAAIgf,SAAS,GAAG3X,OAAO,CAAC,SAAS2X,SAAT,CAAmBld,IAAnB,EAAyBob,KAAzB,EAAgCC,KAAhC,EAAuC;IAC3D,OAAOhF,QAAQ,CAACrW,IAAD,EAAOT,OAAO,CAAC6b,KAAD,EAAQC,KAAR,CAAd,CAAf;EACH,CAFsB,CAAvB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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Cd,IAAI,CAACF,IAAI,CAACuI,IAAI,CAACzI,MAAD,CAAL,EAAe5B,IAAI,CAACwB,GAAD,CAAnB,CAAT,EAAoC;UAChCI,MAAM,CAACA,MAAM,CAACF,MAAR,CAAN,GAAwB1B,IAAI,CAACwB,GAAD,CAA5B;QACH;;QACDA,GAAG,IAAI,CAAP;MACH;IACJ;;IACD,OAAOI,MAAP;EACH,CAd0C,CAAd,CAA7B;EAgBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI0f,IAAI,GAAGja,OAAO,CAAC,SAASia,IAAT,CAAclgB,CAAd,EAAiBW,CAAjB,EAAoBqR,CAApB,EAAuB;IACtC,OAAOyH,MAAM,CAACzZ,CAAC,CAACW,CAAD,CAAF,EAAOX,CAAC,CAACgS,CAAD,CAAR,CAAb;EACH,CAFiB,CAAlB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAImO,OAAO,GAAGla,OAAO,CAAC,SAASka,OAAT,CAAiBhf,IAAjB,EAAuBif,IAAvB,EAA6BC,IAA7B,EAAmC;IACrD,OAAO5G,MAAM,CAAC2G,IAAI,CAACjf,IAAD,CAAL,EAAakf,IAAI,CAAClf,IAAD,CAAjB,CAAb;EACH,CAFoB,CAArB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAImf,OAAO,GAAG1a,OAAO,CAACJ,eAAe,CAAC,SAAD,EAAY4X,QAAQ,CAAC,UAAUjY,GAAV,EAAeiK,IAAf,EAAqB;IAC3E,IAAIjK,GAAG,IAAI,IAAX,EAAiB;MACbA,GAAG,GAAG,EAAN;IACH;;IACDA,GAAG,CAACpG,IAAJ,CAASqQ,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A;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI2W,WAAW,GAAG9c,OAAO,CAACiB,aAAa,CAAC,aAAD,EAAgBqB,iBAAiB,CAACyR,MAAD,CAAjC,EAA2CwG,eAAe,CAACxG,MAAD,CAA1D,CAAd,CAAzB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAIgJ,IAAI,GAAG/c,OAAO,CAAC,SAAS+c,IAAT,CAAc7kB,EAAd,EAAkB;IACjC,OAAOojB,KAAK,CAACpjB,EAAE,CAAC0C,MAAJ,EAAY1C,EAAZ,CAAZ;EACH,CAFiB,CAAlB;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI8kB,IAAI,GAAG9c,OAAO,CAAC,SAAS8c,IAAT,CAAcjQ,KAAd,EAAqBrR,GAArB,EAA0B;IACzC,IAAIZ,MAAM,GAAG,EAAb;;IACA,KAAK,IAAIW,IAAT,IAAiBC,GAAjB,EAAsB;MAClB,IAAI,CAACygB,SAAS,CAAC1gB,IAAD,EAAOsR,KAAP,CAAd,EAA6B;QACzBjS,MAAM,CAACW,IAAD,CAAN,GAAeC,GAAG,CAACD,IAAD,CAAlB;MACH;IACJ;;IACD,OAAOX,MAAP;EACH,CARiB,CAAlB;EAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAImiB,KAAK,GAAG,SAASA,KAAT,GAAiB;IACzB,OAAOP,QAAQ,CAACvkB,KAAT,CAAe,IAAf,EAAqB8V,OAAO,CAAC7V,SAAD,CAA5B,CAAP;EACH,CAFD;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"script"}