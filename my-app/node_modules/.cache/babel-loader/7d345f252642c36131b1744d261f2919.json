{"ast":null,"code":"var _jsxFileName = \"/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapContainer, TileLayer, useMap, Marker, Popup } from 'react-leaflet';\nimport axios from \"axios\";\nimport { Alert, Spinner } from \"react-bootstrap\";\nimport useSWR from \"swr\";\nimport { Icon } from \"leaflet/dist/leaflet-src.esm\";\nimport { GeoJSON } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar url = \"http://127.0.0.1:8000/api/world/Turkey/\";\nvar url_1 = url;\n\nif (input === null) {\n  url_1 = url;\n} else {\n  url_1 = url + input + \"/\";\n}\n\nconst MyData = () => {\n  _s();\n\n  // create state variable to hold data when it is fetched\n  const [country, setCountry] = React.useState(\"\");\n\n  const updateCountry = event => {\n    setCountry(event.target.value);\n  };\n\n  const [data, setData] = React.useState(); // useEffect to fetch data on mount\n\n  useEffect(() => {\n    // async function!\n    const getData = async () => {\n      // 'await' the data\n      const response = await axios.get(url); // save data to state\n\n      setData(response.data);\n    };\n\n    getData();\n  }, []); // render react-leaflet GeoJSON when the data is ready\n\n  if (data) {\n    return /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(MyData, \"e5yTg/hlvPedcGBoP/tuiJy5LrA=\");\n\n_c = MyData;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [51.505, -0.09],\n    zoom: 2,\n    scrollWheelZoom: true,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(MyData, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyData\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","MapContainer","TileLayer","useMap","Marker","Popup","axios","Alert","Spinner","useSWR","Icon","GeoJSON","url","url_1","input","MyData","country","setCountry","updateCountry","event","target","value","data","setData","getData","response","get","App"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapContainer, TileLayer, useMap, Marker, Popup } from 'react-leaflet' ;\nimport axios from \"axios\";\nimport {Alert, Spinner} from \"react-bootstrap\";\nimport useSWR from \"swr\";\nimport {Icon} from \"leaflet/dist/leaflet-src.esm\";\nimport { GeoJSON } from 'react-leaflet';\n\n\n\n\nvar url = \"http://127.0.0.1:8000/api/world/Turkey/\"\n\nvar url_1 = url\n\nif (input === null) {\n  url_1 = url\n} else {\n  url_1 = url + input + \"/\"\n}\n\n\nconst MyData = () => {\n  // create state variable to hold data when it is fetched\n  const [country, setCountry] = React.useState(\"\");\n  const updateCountry = (event) => {\n    setCountry(event.target.value);\n  };\n\n  const [data, setData] = React.useState();\n\n    // useEffect to fetch data on mount\n  useEffect(() => {\n    // async function!\n    const getData = async () => {\n      // 'await' the data\n      const response = await axios.get(url);\n      // save data to state\n      setData(response.data);\n    };\n    getData();\n  }, []);\n\n  // render react-leaflet GeoJSON when the data is ready\n  if (data) {\n    return <GeoJSON data={data} />;\n  } else {\n    return null;\n  }\n};\n\n\nfunction App() {\n\n\n\n\n\n\n  return (\n    <MapContainer center={[51.505, -0.09]} zoom={2} scrollWheelZoom={true}>\n  <TileLayer\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n  />\n      \n      <MyData/>\n\n</MapContainer>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAkDC,KAAlD,QAA+D,eAA/D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,OAAf,QAA6B,iBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAAQC,IAAR,QAAmB,8BAAnB;AACA,SAASC,OAAT,QAAwB,eAAxB;;AAKA,IAAIC,GAAG,GAAG,yCAAV;AAEA,IAAIC,KAAK,GAAGD,GAAZ;;AAEA,IAAIE,KAAK,KAAK,IAAd,EAAoB;EAClBD,KAAK,GAAGD,GAAR;AACD,CAFD,MAEO;EACLC,KAAK,GAAGD,GAAG,GAAGE,KAAN,GAAc,GAAtB;AACD;;AAGD,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACnB;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpB,KAAK,CAACC,QAAN,CAAe,EAAf,CAA9B;;EACA,MAAMoB,aAAa,GAAIC,KAAD,IAAW;IAC/BF,UAAU,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;EACD,CAFD;;EAIA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB1B,KAAK,CAACC,QAAN,EAAxB,CAPmB,CASjB;;EACFC,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,OAAO,GAAG,YAAY;MAC1B;MACA,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAUd,GAAV,CAAvB,CAF0B,CAG1B;;MACAW,OAAO,CAACE,QAAQ,CAACH,IAAV,CAAP;IACD,CALD;;IAMAE,OAAO;EACR,CATQ,EASN,EATM,CAAT,CAVmB,CAqBnB;;EACA,IAAIF,IAAJ,EAAU;IACR,oBAAO,QAAC,OAAD;MAAS,IAAI,EAAEA;IAAf;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAFD,MAEO;IACL,OAAO,IAAP;EACD;AACF,CA3BD;;GAAMP,M;;KAAAA,M;;AA8BN,SAASY,GAAT,GAAe;EAOb,oBACE,QAAC,YAAD;IAAc,MAAM,EAAE,CAAC,MAAD,EAAS,CAAC,IAAV,CAAtB;IAAuC,IAAI,EAAE,CAA7C;IAAgD,eAAe,EAAE,IAAjE;IAAA,wBACF,QAAC,SAAD;MACE,WAAW,EAAC,yFADd;MAEE,GAAG,EAAC;IAFN;MAAA;MAAA;MAAA;IAAA,QADE,eAME,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;MAlBQA,G;AAoBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}