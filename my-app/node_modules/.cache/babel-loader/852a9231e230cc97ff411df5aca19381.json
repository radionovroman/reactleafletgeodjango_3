{"ast":null,"code":"/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K; // spheric latitude\n\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4); // spheric longitude\n\n  var I = this.alpha * (p.x - this.lambda0); // psoeudo equatorial rotation\n\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n  var lambda = this.lambda0 + I / this.alpha;\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    } //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n\n\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"names":["init","phy0","lat0","lambda0","long0","sinPhy0","Math","sin","semiMajorAxis","a","invF","rf","flattening","e2","pow","e","sqrt","R","k0","alpha","cos","b0","asin","k1","log","tan","PI","k2","k3","K","forward","p","Sa1","y","Sa2","S","b","atan","exp","I","x","rotI","rotB","y0","x0","inverse","Y","X","lambda","phy","prevPhy","iteration","abs","names"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/proj4/lib/projections/somerc.js"],"sourcesContent":["/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}