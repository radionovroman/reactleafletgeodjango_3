{"ast":null,"code":"import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\n\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  } else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + p.x / this.a / Math.cos(this.lat_ts));\n    lat = Math.asin(p.y / this.a * Math.cos(this.lat_ts));\n  } else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"names":["adjust_lon","qsfnz","msfnz","iqsfnz","init","sphere","k0","e","Math","sin","lat_ts","cos","forward","p","lon","x","lat","y","dlon","long0","x0","a","y0","qs","inverse","asin","names"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/proj4/lib/projections/cea.js"],"sourcesContent":["import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,sBAAvB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,GAAgB;EACrB;EACA,IAAI,CAAC,KAAKC,MAAV,EAAkB;IAChB,KAAKC,EAAL,GAAUJ,KAAK,CAAC,KAAKK,CAAN,EAASC,IAAI,CAACC,GAAL,CAAS,KAAKC,MAAd,CAAT,EAAgCF,IAAI,CAACG,GAAL,CAAS,KAAKD,MAAd,CAAhC,CAAf;EACD;AACF;AAED;AACA;;AACA,OAAO,SAASE,OAAT,CAAiBC,CAAjB,EAAoB;EACzB,IAAIC,GAAG,GAAGD,CAAC,CAACE,CAAZ;EACA,IAAIC,GAAG,GAAGH,CAAC,CAACI,CAAZ;EACA,IAAIF,CAAJ,EAAOE,CAAP;EACA;AACF;;EACE,IAAIC,IAAI,GAAGlB,UAAU,CAACc,GAAG,GAAG,KAAKK,KAAZ,CAArB;;EACA,IAAI,KAAKd,MAAT,EAAiB;IACfU,CAAC,GAAG,KAAKK,EAAL,GAAU,KAAKC,CAAL,GAASH,IAAT,GAAgBV,IAAI,CAACG,GAAL,CAAS,KAAKD,MAAd,CAA9B;IACAO,CAAC,GAAG,KAAKK,EAAL,GAAU,KAAKD,CAAL,GAASb,IAAI,CAACC,GAAL,CAASO,GAAT,CAAT,GAAyBR,IAAI,CAACG,GAAL,CAAS,KAAKD,MAAd,CAAvC;EACD,CAHD,MAIK;IACH,IAAIa,EAAE,GAAGtB,KAAK,CAAC,KAAKM,CAAN,EAASC,IAAI,CAACC,GAAL,CAASO,GAAT,CAAT,CAAd;IACAD,CAAC,GAAG,KAAKK,EAAL,GAAU,KAAKC,CAAL,GAAS,KAAKf,EAAd,GAAmBY,IAAjC;IACAD,CAAC,GAAG,KAAKK,EAAL,GAAU,KAAKD,CAAL,GAASE,EAAT,GAAc,GAAd,GAAoB,KAAKjB,EAAvC;EACD;;EAEDO,CAAC,CAACE,CAAF,GAAMA,CAAN;EACAF,CAAC,CAACI,CAAF,GAAMA,CAAN;EACA,OAAOJ,CAAP;AACD;AAED;AACA;;AACA,OAAO,SAASW,OAAT,CAAiBX,CAAjB,EAAoB;EACzBA,CAAC,CAACE,CAAF,IAAO,KAAKK,EAAZ;EACAP,CAAC,CAACI,CAAF,IAAO,KAAKK,EAAZ;EACA,IAAIR,GAAJ,EAASE,GAAT;;EAEA,IAAI,KAAKX,MAAT,EAAiB;IACfS,GAAG,GAAGd,UAAU,CAAC,KAAKmB,KAAL,GAAcN,CAAC,CAACE,CAAF,GAAM,KAAKM,CAAZ,GAAiBb,IAAI,CAACG,GAAL,CAAS,KAAKD,MAAd,CAA/B,CAAhB;IACAM,GAAG,GAAGR,IAAI,CAACiB,IAAL,CAAWZ,CAAC,CAACI,CAAF,GAAM,KAAKI,CAAZ,GAAiBb,IAAI,CAACG,GAAL,CAAS,KAAKD,MAAd,CAA3B,CAAN;EACD,CAHD,MAIK;IACHM,GAAG,GAAGb,MAAM,CAAC,KAAKI,CAAN,EAAS,IAAIM,CAAC,CAACI,CAAN,GAAU,KAAKX,EAAf,GAAoB,KAAKe,CAAlC,CAAZ;IACAP,GAAG,GAAGd,UAAU,CAAC,KAAKmB,KAAL,GAAaN,CAAC,CAACE,CAAF,IAAO,KAAKM,CAAL,GAAS,KAAKf,EAArB,CAAd,CAAhB;EACD;;EAEDO,CAAC,CAACE,CAAF,GAAMD,GAAN;EACAD,CAAC,CAACI,CAAF,GAAMD,GAAN;EACA,OAAOH,CAAP;AACD;AAED,OAAO,IAAIa,KAAK,GAAG,CAAC,KAAD,CAAZ;AACP,eAAe;EACbtB,IAAI,EAAEA,IADO;EAEbQ,OAAO,EAAEA,OAFI;EAGbY,OAAO,EAAEA,OAHI;EAIbE,KAAK,EAAEA;AAJM,CAAf"},"metadata":{},"sourceType":"module"}