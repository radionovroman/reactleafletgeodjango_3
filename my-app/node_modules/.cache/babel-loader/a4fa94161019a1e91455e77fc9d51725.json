{"ast":null,"code":"var _jsxFileName = \"/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapContainer, TileLayer, useMap, Marker, Popup } from 'react-leaflet';\nimport axios from \"axios\";\nimport { Alert, Spinner } from \"react-bootstrap\";\nimport useSWR from \"swr\";\nimport { Icon } from \"leaflet/dist/leaflet-src.esm\";\nimport { GeoJSON } from 'react-leaflet';\nimport { preventDefault } from \"leaflet/src/dom/DomEvent\";\nimport { clear } from \"@testing-library/user-event/dist/clear\";\nimport { cleanup } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyData = (props, event) => {\n  _s();\n\n  // create state variable to hold data when it is fetched\n  let [data, setData] = useState(); // useEffect to fetch data on mount\n\n  useEffect(() => {\n    // async function!\n    let getData = async () => {\n      // 'await' the data\n      let response = await axios.get(props.name); // save data to state\n\n      setData(response.data);\n    };\n\n    getData();\n  }, [props.name]); // render react-leaflet GeoJSON when the data is ready\n\n  if (data) {\n    //return <input type={\"text\"} value={name} onChange={updateName}/>;\n    return /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this);\n  } else {\n    //return <input type={\"text\"} value={name} onChange={updateName}/>;\n    return null;\n  }\n};\n\n_s(MyData, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n\n_c = MyData;\n\nfunction App(event) {\n  _s2();\n\n  let [name, setName] = useState(\"http://127.0.0.1:8000/api/world/\");\n\n  let updateName = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      setName(\"http://127.0.0.1:8000/api/world/\" + event.target.value);\n    }\n\n    ; //else {setName(\"\")}\n    //return <MyData name={name + \"/\"}/>\n  };\n\n  useEffect(() => {\n    console.log(\"value of 'name' changed to\", name);\n  }, [name]);\n\n  let NewData = event => {\n    if (event.key === \"Enter\" && name.slice(-4) != \"1914\") {}\n\n    return /*#__PURE__*/_jsxDEV(MyData, {\n      name: name + \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 14\n    }, this);\n  };\n\n  if (event.key === \"Enter\" && name.slice(-4) === \"1914\") {\n    return /*#__PURE__*/_jsxDEV(MyData, {\n      name: \"http://127.0.0.1:8000/api/world/\" + event.target.value + \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"stylesheet\",\n        href: \"style.css\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country\",\n        children: \"Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"country\",\n        type: \"text\",\n        placeholder: \"type a country here\",\n        onKeyDown: updateName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [51.505, -0.09],\n      zoom: 2,\n      scrollWheelZoom: true,\n      onKeyDown: updateName,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(NewData, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(App, \"Yci+tFODau20UvdntRpZ0ZrlYS4=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyData\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","MapContainer","TileLayer","useMap","Marker","Popup","axios","Alert","Spinner","useSWR","Icon","GeoJSON","preventDefault","clear","cleanup","MyData","props","event","data","setData","getData","response","get","name","App","setName","updateName","key","target","value","console","log","NewData","slice"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapContainer, TileLayer, useMap, Marker, Popup } from 'react-leaflet' ;\nimport axios from \"axios\";\nimport {Alert, Spinner} from \"react-bootstrap\";\nimport useSWR from \"swr\";\nimport {Icon} from \"leaflet/dist/leaflet-src.esm\";\nimport { GeoJSON } from 'react-leaflet';\nimport {preventDefault} from \"leaflet/src/dom/DomEvent\";\nimport {clear} from \"@testing-library/user-event/dist/clear\";\nimport {cleanup} from \"@testing-library/react\";\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst MyData = (props, event) => {\n  // create state variable to hold data when it is fetched\n\n\n\n\n  let [data, setData] = useState();\n\n    // useEffect to fetch data on mount\n\n    useEffect(() => {\n      // async function!\n\n      let getData = async () => {\n        // 'await' the data\n        let response = await axios.get(props.name);\n        // save data to state\n        setData(response.data);\n      };\n\n      getData();\n\n\n    }, [props.name]);\n\n\n\n  // render react-leaflet GeoJSON when the data is ready\n  if (data) {\n    //return <input type={\"text\"} value={name} onChange={updateName}/>;\n\n   return <GeoJSON data={data} />\n\n\n  } else {\n    //return <input type={\"text\"} value={name} onChange={updateName}/>;\n    return null;\n\n\n  }\n\n};\n\n\nfunction App(event) {\n\n\n\n  let [name, setName] = useState(\"http://127.0.0.1:8000/api/world/\");\n\n\n\n\n\n  let updateName = (event) => {\n\n    if (event.key === 'Enter'){\n      event.preventDefault();\n    setName(\"http://127.0.0.1:8000/api/world/\" + event.target.value)\n\n\n\n  };\n\n  //else {setName(\"\")}\n  //return <MyData name={name + \"/\"}/>\n};\n\nuseEffect(() => {\n    console.log(\"value of 'name' changed to\", name);\n\n  }, [name]);\n\n  let NewData = (event) => {\n\n    if (event.key === \"Enter\" && name.slice(-4) != \"1914\"){\n\n    }\n\n      return <MyData name={name + \"/\"}/>\n  }\n\n  if (event.key === \"Enter\" && name.slice(-4) === \"1914\") {\n    return <MyData name={\"http://127.0.0.1:8000/api/world/\" + event.target.value + \"/\"}/>\n  }\n\n  return (\n  <div>\n\n\n  <form>\n  <link rel=\"stylesheet\" href=\"style.css\"/>\n    <label  htmlFor=\"country\">Country:</label>\n  <input  id=\"country\" type={\"text\"} placeholder={\"type a country here\"} onKeyDown={updateName}/>\n  </form>\n\n\n\n    <MapContainer center={[51.505, -0.09]} zoom={2} scrollWheelZoom={true} onKeyDown={updateName}>\n  <TileLayer\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n  />\n\n      <NewData/>\n\n  </MapContainer>\n\n\n</div>\n\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}