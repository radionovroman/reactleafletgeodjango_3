{"ast":null,"code":"import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport { HALF_PI, EPSLN } from '../constants/values';\nexport function init() {\n  //double lat0;                    /* the reference latitude               */\n  //double long0;                   /* the reference longitude              */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n  //the above value can be set with proj4.defs\n  //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n\n\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0; // Standard Parallels cannot be equal and on opposite sides of the equator\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  } else {\n    this.ns = sin1;\n  }\n\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n} // Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y; // singular cases :\n\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  } else {\n    con = lat * this.ns;\n\n    if (con <= 0) {\n      return null;\n    }\n\n    rh1 = 0;\n  }\n\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n  return p;\n} // Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\n\nexport function inverse(p) {\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = this.rh - (p.y - this.y0) / this.k0;\n\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  } else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n\n  var theta = 0;\n\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * x, con * y);\n  }\n\n  if (rh1 !== 0 || this.ns > 0) {\n    con = 1 / this.ns;\n    ts = Math.pow(rh1 / (this.a * this.f0), con);\n    lat = phi2z(this.e, ts);\n\n    if (lat === -9999) {\n      return null;\n    }\n  } else {\n    lat = -HALF_PI;\n  }\n\n  lon = adjust_lon(theta / this.ns + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\nexport var names = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_1SP\", \"Lambert_Conformal_Conic_2SP\", \"lcc\", \"Lambert Conic Conformal (1SP)\", \"Lambert Conic Conformal (2SP)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};","map":{"version":3,"names":["msfnz","tsfnz","sign","adjust_lon","phi2z","HALF_PI","EPSLN","init","lat2","lat1","k0","x0","y0","Math","abs","temp","b","a","e","sqrt","sin1","sin","cos1","cos","ms1","ts1","sin2","cos2","ms2","ts2","ts0","lat0","ns","log","isNaN","f0","pow","rh","title","forward","p","lon","x","lat","y","PI","con","ts","rh1","theta","long0","inverse","atan2","names"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/proj4/lib/projections/lcc.js"],"sourcesContent":["import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n  \n  //double lat0;                    /* the reference latitude               */\n  //double long0;                   /* the reference longitude              */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n  \n  //the above value can be set with proj4.defs\n  //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\n  \"Lambert Tangential Conformal Conic Projection\",\n  \"Lambert_Conformal_Conic\",\n  \"Lambert_Conformal_Conic_1SP\",\n  \"Lambert_Conformal_Conic_2SP\",\n  \"lcc\",\n  \"Lambert Conic Conformal (1SP)\",\n  \"Lambert Conic Conformal (2SP)\"\n];\n\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}