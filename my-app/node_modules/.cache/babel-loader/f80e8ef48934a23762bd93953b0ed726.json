{"ast":null,"code":"import { DomUtil } from 'leaflet';\nimport { edgesKey, modesKey, instanceKey, notifyDeferredKey, polygons } from '../FreeDraw';\nimport { classesFor } from './Layer';\n/**\n * @constant NONE\n * @type {Number}\n */\n\nexport const NONE = 0;\n/**\n * @constant CREATE\n * @type {Number}\n */\n\nexport const CREATE = 1;\n/**\n * @constant EDIT\n * @type {Number}\n */\n\nexport const EDIT = 2;\n/**\n * @constant DELETE\n * @type {Number}\n */\n\nexport const DELETE = 4;\n/**\n * @constant APPEND\n * @type {Number}\n */\n\nexport const APPEND = 8;\n/**\n * @constant EDIT_APPEND\n * @type {Number}\n */\n\nexport const EDIT_APPEND = EDIT | APPEND;\n/**\n * @constant ALL\n * @type {number}\n */\n\nexport const ALL = CREATE | EDIT | DELETE | APPEND;\n/**\n * @method modeFor\n * @param {Object} map\n * @param {Number} mode\n * @param {Object} options\n * @return {Number}\n */\n\nexport const modeFor = (map, mode, options) => {\n  // Update the mode.\n  map[modesKey] = mode; // Fire the updated mode.\n\n  map[instanceKey].fire('mode', {\n    mode\n  }); // Disable the map if the `CREATE` mode is a default flag.\n\n  mode & CREATE ? map.dragging.disable() : map.dragging.enable();\n  Array.from(polygons.get(map)).forEach(polygon => {\n    polygon[edgesKey].forEach(edge => {\n      // Modify the edge class names based on whether edit mode is enabled.\n      mode & EDIT ? DomUtil.removeClass(edge._icon, 'disabled') : DomUtil.addClass(edge._icon, 'disabled');\n    });\n  }); // Apply the conditional class names to the map container.\n\n  classesFor(map, mode); // Fire the event for having manipulated the polygons if the `hasManipulated` is `true` and the\n  // `notifyAfterEditExit` option is equal to `true`, and then reset the `notifyDeferredKey`.\n\n  options.notifyAfterEditExit && map[notifyDeferredKey]();\n\n  map[notifyDeferredKey] = () => {};\n\n  return mode;\n};","map":{"version":3,"names":["DomUtil","edgesKey","modesKey","instanceKey","notifyDeferredKey","polygons","classesFor","NONE","CREATE","EDIT","DELETE","APPEND","EDIT_APPEND","ALL","modeFor","map","mode","options","fire","dragging","disable","enable","Array","from","get","forEach","polygon","edge","removeClass","_icon","addClass","notifyAfterEditExit"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/leaflet-freedraw/src/helpers/Flags.js"],"sourcesContent":["import { DomUtil } from 'leaflet';\nimport { edgesKey, modesKey, instanceKey, notifyDeferredKey, polygons } from '../FreeDraw';\nimport { classesFor } from './Layer';\n\n/**\n * @constant NONE\n * @type {Number}\n */\nexport const NONE = 0;\n\n/**\n * @constant CREATE\n * @type {Number}\n */\nexport const CREATE = 1;\n\n/**\n * @constant EDIT\n * @type {Number}\n */\nexport const EDIT = 2;\n\n/**\n * @constant DELETE\n * @type {Number}\n */\nexport const DELETE = 4;\n\n/**\n * @constant APPEND\n * @type {Number}\n */\nexport const APPEND = 8;\n\n/**\n * @constant EDIT_APPEND\n * @type {Number}\n */\nexport const EDIT_APPEND = EDIT | APPEND;\n\n/**\n * @constant ALL\n * @type {number}\n */\nexport const ALL = CREATE | EDIT | DELETE | APPEND;\n\n/**\n * @method modeFor\n * @param {Object} map\n * @param {Number} mode\n * @param {Object} options\n * @return {Number}\n */\nexport const modeFor = (map, mode, options) => {\n\n    // Update the mode.\n    map[modesKey] = mode;\n\n    // Fire the updated mode.\n    map[instanceKey].fire('mode', { mode });\n\n    // Disable the map if the `CREATE` mode is a default flag.\n    mode & CREATE ? map.dragging.disable() : map.dragging.enable();\n\n    Array.from(polygons.get(map)).forEach(polygon => {\n\n        polygon[edgesKey].forEach(edge => {\n\n            // Modify the edge class names based on whether edit mode is enabled.\n            mode & EDIT ? DomUtil.removeClass(edge._icon, 'disabled') : DomUtil.addClass(edge._icon, 'disabled');\n\n        });\n\n    });\n\n    // Apply the conditional class names to the map container.\n    classesFor(map, mode);\n\n    // Fire the event for having manipulated the polygons if the `hasManipulated` is `true` and the\n    // `notifyAfterEditExit` option is equal to `true`, and then reset the `notifyDeferredKey`.\n    options.notifyAfterEditExit && map[notifyDeferredKey]();\n    map[notifyDeferredKey] = () => {};\n\n    return mode;\n\n};\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,SAAxB;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,WAA7B,EAA0CC,iBAA1C,EAA6DC,QAA7D,QAA6E,aAA7E;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,IAAI,GAAG,CAAb;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,CAAf;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,IAAI,GAAG,CAAb;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,CAAf;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG,CAAf;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGH,IAAI,GAAGE,MAA3B;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAME,GAAG,GAAGL,MAAM,GAAGC,IAAT,GAAgBC,MAAhB,GAAyBC,MAArC;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,OAAO,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,KAAwB;EAE3C;EACAF,GAAG,CAACb,QAAD,CAAH,GAAgBc,IAAhB,CAH2C,CAK3C;;EACAD,GAAG,CAACZ,WAAD,CAAH,CAAiBe,IAAjB,CAAsB,MAAtB,EAA8B;IAAEF;EAAF,CAA9B,EAN2C,CAQ3C;;EACAA,IAAI,GAAGR,MAAP,GAAgBO,GAAG,CAACI,QAAJ,CAAaC,OAAb,EAAhB,GAAyCL,GAAG,CAACI,QAAJ,CAAaE,MAAb,EAAzC;EAEAC,KAAK,CAACC,IAAN,CAAWlB,QAAQ,CAACmB,GAAT,CAAaT,GAAb,CAAX,EAA8BU,OAA9B,CAAsCC,OAAO,IAAI;IAE7CA,OAAO,CAACzB,QAAD,CAAP,CAAkBwB,OAAlB,CAA0BE,IAAI,IAAI;MAE9B;MACAX,IAAI,GAAGP,IAAP,GAAcT,OAAO,CAAC4B,WAAR,CAAoBD,IAAI,CAACE,KAAzB,EAAgC,UAAhC,CAAd,GAA4D7B,OAAO,CAAC8B,QAAR,CAAiBH,IAAI,CAACE,KAAtB,EAA6B,UAA7B,CAA5D;IAEH,CALD;EAOH,CATD,EAX2C,CAsB3C;;EACAvB,UAAU,CAACS,GAAD,EAAMC,IAAN,CAAV,CAvB2C,CAyB3C;EACA;;EACAC,OAAO,CAACc,mBAAR,IAA+BhB,GAAG,CAACX,iBAAD,CAAH,EAA/B;;EACAW,GAAG,CAACX,iBAAD,CAAH,GAAyB,MAAM,CAAE,CAAjC;;EAEA,OAAOY,IAAP;AAEH,CAhCM"},"metadata":{},"sourceType":"module"}