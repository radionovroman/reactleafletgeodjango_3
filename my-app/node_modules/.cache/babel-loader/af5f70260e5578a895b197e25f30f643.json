{"ast":null,"code":"var _jsxFileName = \"/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapContainer, TileLayer, useMap, Marker, Popup } from 'react-leaflet';\nimport axios from \"axios\";\nimport { Alert, Spinner } from \"react-bootstrap\";\nimport useSWR from \"swr\";\nimport { Icon } from \"leaflet/dist/leaflet-src.esm\";\nimport { GeoJSON } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar url = \"http://127.0.0.1:8000/api/world/Russia/\";\n\nconst MyData = props => {\n  _s();\n\n  // create state variable to hold data when it is fetched\n  let url_1 = \"\";\n  const [name, setName] = useState(\"\");\n\n  const updateName = event => {\n    if (event.key === 'Enter') {\n      setName(event.target.value);\n    } else {\n      setName(event.target.value);\n    }\n\n    ;\n  };\n\n  if (name === \"\") {\n    url_1 = url;\n  } else {\n    url_1 = url.concat(name);\n  }\n\n  ;\n  const [data, setData] = React.useState(); // useEffect to fetch data on mount\n\n  useEffect(() => {\n    // async function!\n    const getData = async () => {\n      // 'await' the data\n      const response = await axios.get(\"http://127.0.0.1:8000/api/world/Russia/\"); // save data to state\n\n      setData(response.data);\n    };\n\n    getData();\n  }, []);\n  console.log(url_1); // render react-leaflet GeoJSON when the data is ready\n\n  if (data) {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: name,\n      onChange: updateName,\n      onKeyDown: updateName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n    return /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: name,\n      onChange: updateName,\n      onKeyDown: updateName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n    return null;\n  }\n};\n\n_s(MyData, \"Lq7K0cdNA9exOlZQOx3f2LJTGeU=\");\n\n_c = MyData;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [51.505, -0.09],\n    zoom: 2,\n    scrollWheelZoom: true,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(MyData, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyData\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","MapContainer","TileLayer","useMap","Marker","Popup","axios","Alert","Spinner","useSWR","Icon","GeoJSON","url","MyData","props","url_1","name","setName","updateName","event","key","target","value","concat","data","setData","getData","response","get","console","log","App"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapContainer, TileLayer, useMap, Marker, Popup } from 'react-leaflet' ;\nimport axios from \"axios\";\nimport {Alert, Spinner} from \"react-bootstrap\";\nimport useSWR from \"swr\";\nimport {Icon} from \"leaflet/dist/leaflet-src.esm\";\nimport { GeoJSON } from 'react-leaflet';\n\n\n\n\nvar url = \"http://127.0.0.1:8000/api/world/Russia/\"\n\n\n\n\n\n\n\n\nconst MyData = (props) => {\n  // create state variable to hold data when it is fetched\n  let url_1 = \"\"\n\n\n\n\n\n  const [name, setName] = useState(\"\");\n\n  const updateName = (event) => {\n\n    if (event.key === 'Enter'){\n    setName(event.target.value)}\n    else {setName(event.target.value)};\n\n\n\n  };\n\n  if (name === \"\") {\n    url_1 = url\n  } else {\n    url_1 = url.concat(name)\n  };\n\n\n\n  const [data, setData] = React.useState();\n\n    // useEffect to fetch data on mount\n  useEffect(() => {\n    // async function!\n    const getData = async () => {\n      // 'await' the data\n      const response = await axios.get(\"http://127.0.0.1:8000/api/world/Russia/\");\n      // save data to state\n      setData(response.data);\n    };\n    getData();\n  }, []);\n\n  console.log(url_1)\n\n  // render react-leaflet GeoJSON when the data is ready\n  if (data) {\n    return <input type={\"text\"} value={name} onChange={updateName} onKeyDown={updateName}/>;\n    return <GeoJSON data={data} />;\n\n  } else {\n    return <input type={\"text\"} value={name} onChange={updateName} onKeyDown={updateName}/>;\n    return null;\n\n  }\n};\n\n\nfunction App() {\n\n\n\n\n\n\n\n  return (\n    <MapContainer center={[51.505, -0.09]} zoom={2} scrollWheelZoom={true}>\n  <TileLayer\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n  />\n\n      <MyData/>\n\n</MapContainer>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAkDC,KAAlD,QAA+D,eAA/D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,OAAf,QAA6B,iBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAAQC,IAAR,QAAmB,8BAAnB;AACA,SAASC,OAAT,QAAwB,eAAxB;;AAKA,IAAIC,GAAG,GAAG,yCAAV;;AASA,MAAMC,MAAM,GAAIC,KAAD,IAAW;EAAA;;EACxB;EACA,IAAIC,KAAK,GAAG,EAAZ;EAMA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,EAAD,CAAhC;;EAEA,MAAMoB,UAAU,GAAIC,KAAD,IAAW;IAE5B,IAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA0B;MAC1BH,OAAO,CAACE,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAP;IAA4B,CAD5B,MAEK;MAACL,OAAO,CAACE,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAP;IAA4B;;IAAA;EAInC,CARD;;EAUA,IAAIN,IAAI,KAAK,EAAb,EAAiB;IACfD,KAAK,GAAGH,GAAR;EACD,CAFD,MAEO;IACLG,KAAK,GAAGH,GAAG,CAACW,MAAJ,CAAWP,IAAX,CAAR;EACD;;EAAA;EAID,MAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkB5B,KAAK,CAACC,QAAN,EAAxB,CA5BwB,CA8BtB;;EACFC,SAAS,CAAC,MAAM;IACd;IACA,MAAM2B,OAAO,GAAG,YAAY;MAC1B;MACA,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAU,yCAAV,CAAvB,CAF0B,CAG1B;;MACAH,OAAO,CAACE,QAAQ,CAACH,IAAV,CAAP;IACD,CALD;;IAMAE,OAAO;EACR,CATQ,EASN,EATM,CAAT;EAWAG,OAAO,CAACC,GAAR,CAAYf,KAAZ,EA1CwB,CA4CxB;;EACA,IAAIS,IAAJ,EAAU;IACR,oBAAO;MAAO,IAAI,EAAE,MAAb;MAAqB,KAAK,EAAER,IAA5B;MAAkC,QAAQ,EAAEE,UAA5C;MAAwD,SAAS,EAAEA;IAAnE;MAAA;MAAA;MAAA;IAAA,QAAP;IACA,oBAAO,QAAC,OAAD;MAAS,IAAI,EAAEM;IAAf;MAAA;MAAA;MAAA;IAAA,QAAP;EAED,CAJD,MAIO;IACL,oBAAO;MAAO,IAAI,EAAE,MAAb;MAAqB,KAAK,EAAER,IAA5B;MAAkC,QAAQ,EAAEE,UAA5C;MAAwD,SAAS,EAAEA;IAAnE;MAAA;MAAA;MAAA;IAAA,QAAP;IACA,OAAO,IAAP;EAED;AACF,CAtDD;;GAAML,M;;KAAAA,M;;AAyDN,SAASkB,GAAT,GAAe;EAQb,oBACE,QAAC,YAAD;IAAc,MAAM,EAAE,CAAC,MAAD,EAAS,CAAC,IAAV,CAAtB;IAAuC,IAAI,EAAE,CAA7C;IAAgD,eAAe,EAAE,IAAjE;IAAA,wBACF,QAAC,SAAD;MACE,WAAW,EAAC,yFADd;MAEE,GAAG,EAAC;IAFN;MAAA;MAAA;MAAA;IAAA,QADE,eAME,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;MAnBQA,G;AAqBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}