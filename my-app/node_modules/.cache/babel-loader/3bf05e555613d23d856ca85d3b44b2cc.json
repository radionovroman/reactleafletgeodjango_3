{"ast":null,"code":"import { SIXTH, RA4, RA6, EPSLN } from './constants/values';\nimport { default as Ellipsoid, WGS84 } from './constants/Ellipsoid';\nimport match from './match';\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n\n  var b2 = b * b; // used in geocentric\n\n  var es = (a2 - b2) / a2; // e ^ 2\n\n  var e = 0;\n\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) {\n    // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}","map":{"version":3,"names":["SIXTH","RA4","RA6","EPSLN","default","Ellipsoid","WGS84","match","eccentricity","a","b","rf","R_A","a2","b2","es","e","Math","sqrt","ep2","sphere","ellps","ellipse","abs"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/proj4/lib/deriveConstants.js"],"sourcesContent":["import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,KAAzB,QAAqC,oBAArC;AACA,SAAQC,OAAO,IAAIC,SAAnB,EAA8BC,KAA9B,QAA0C,uBAA1C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAO,SAASC,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BC,EAA5B,EAAgCC,GAAhC,EAAqC;EAC1C,IAAIC,EAAE,GAAGJ,CAAC,GAAGA,CAAb,CAD0C,CAC1B;;EAChB,IAAIK,EAAE,GAAGJ,CAAC,GAAGA,CAAb,CAF0C,CAE1B;;EAChB,IAAIK,EAAE,GAAG,CAACF,EAAE,GAAGC,EAAN,IAAYD,EAArB,CAH0C,CAGjB;;EACzB,IAAIG,CAAC,GAAG,CAAR;;EACA,IAAIJ,GAAJ,EAAS;IACPH,CAAC,IAAI,IAAIM,EAAE,IAAIf,KAAK,GAAGe,EAAE,IAAId,GAAG,GAAGc,EAAE,GAAGb,GAAf,CAAd,CAAX;IACAW,EAAE,GAAGJ,CAAC,GAAGA,CAAT;IACAM,EAAE,GAAG,CAAL;EACD,CAJD,MAIO;IACLC,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUH,EAAV,CAAJ,CADK,CACc;EACpB;;EACD,IAAII,GAAG,GAAG,CAACN,EAAE,GAAGC,EAAN,IAAYA,EAAtB,CAZ0C,CAYhB;;EAC1B,OAAO;IACLC,EAAE,EAAEA,EADC;IAELC,CAAC,EAAEA,CAFE;IAGLG,GAAG,EAAEA;EAHA,CAAP;AAKD;AACD,OAAO,SAASC,MAAT,CAAgBX,CAAhB,EAAmBC,CAAnB,EAAsBC,EAAtB,EAA0BU,KAA1B,EAAiCD,MAAjC,EAAyC;EAC9C,IAAI,CAACX,CAAL,EAAQ;IAAE;IACR,IAAIa,OAAO,GAAGf,KAAK,CAACF,SAAD,EAAYgB,KAAZ,CAAnB;;IACA,IAAI,CAACC,OAAL,EAAc;MACZA,OAAO,GAAGhB,KAAV;IACD;;IACDG,CAAC,GAAGa,OAAO,CAACb,CAAZ;IACAC,CAAC,GAAGY,OAAO,CAACZ,CAAZ;IACAC,EAAE,GAAGW,OAAO,CAACX,EAAb;EACD;;EAED,IAAIA,EAAE,IAAI,CAACD,CAAX,EAAc;IACZA,CAAC,GAAG,CAAC,MAAM,MAAMC,EAAb,IAAmBF,CAAvB;EACD;;EACD,IAAIE,EAAE,KAAK,CAAP,IAAYM,IAAI,CAACM,GAAL,CAASd,CAAC,GAAGC,CAAb,IAAkBP,KAAlC,EAAyC;IACvCiB,MAAM,GAAG,IAAT;IACAV,CAAC,GAAGD,CAAJ;EACD;;EACD,OAAO;IACLA,CAAC,EAAEA,CADE;IAELC,CAAC,EAAEA,CAFE;IAGLC,EAAE,EAAEA,EAHC;IAILS,MAAM,EAAEA;EAJH,CAAP;AAMD"},"metadata":{},"sourceType":"module"}