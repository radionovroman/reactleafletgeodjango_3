{"ast":null,"code":"import { Point } from 'leaflet';\nimport { Clipper, PolyFillType } from 'clipper-lib';\n/**\n * @method latLngsToClipperPoints\n * @param {Object} map\n * @param {LatLng[]} latLngs\n * @return {Array}\n */\n\nexport const latLngsToClipperPoints = (map, latLngs) => {\n  return latLngs.map(latLng => {\n    const point = map.latLngToLayerPoint(latLng);\n    return {\n      X: point.x,\n      Y: point.y\n    };\n  });\n};\n/**\n * @method clipperPolygonsToLatLngs\n * @param {Object} map\n * @param {Array} polygons\n * @return {Array}\n */\n\nconst clipperPolygonsToLatLngs = (map, polygons) => {\n  return polygons.map(polygon => {\n    return polygon.map(point => {\n      const updatedPoint = new Point(point.X, point.Y);\n      return map.layerPointToLatLng(updatedPoint);\n    });\n  });\n};\n/**\n * @param {Object} map\n * @param {LatLng[]} latLngs\n * @param {Object} options\n * @return {LatLng[]}\n */\n\n\nexport default ((map, latLngs, options) => {\n  const points = Clipper.CleanPolygon(latLngsToClipperPoints(map, latLngs), options.simplifyFactor);\n  const polygons = Clipper.SimplifyPolygon(points, PolyFillType.pftNonZero);\n  return clipperPolygonsToLatLngs(map, polygons);\n});","map":{"version":3,"names":["Point","Clipper","PolyFillType","latLngsToClipperPoints","map","latLngs","latLng","point","latLngToLayerPoint","X","x","Y","y","clipperPolygonsToLatLngs","polygons","polygon","updatedPoint","layerPointToLatLng","options","points","CleanPolygon","simplifyFactor","SimplifyPolygon","pftNonZero"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/leaflet-freedraw/src/helpers/Simplify.js"],"sourcesContent":["import { Point } from 'leaflet';\nimport { Clipper, PolyFillType } from 'clipper-lib';\n\n/**\n * @method latLngsToClipperPoints\n * @param {Object} map\n * @param {LatLng[]} latLngs\n * @return {Array}\n */\nexport const latLngsToClipperPoints = (map, latLngs) => {\n\n    return latLngs.map(latLng => {\n        const point = map.latLngToLayerPoint(latLng);\n        return { X: point.x, Y: point.y };\n    });\n\n};\n\n/**\n * @method clipperPolygonsToLatLngs\n * @param {Object} map\n * @param {Array} polygons\n * @return {Array}\n */\nconst clipperPolygonsToLatLngs = (map, polygons) => {\n\n    return polygons.map(polygon => {\n\n        return polygon.map(point => {\n            const updatedPoint = new Point(point.X, point.Y);\n            return map.layerPointToLatLng(updatedPoint);\n        });\n\n    });\n\n};\n\n/**\n * @param {Object} map\n * @param {LatLng[]} latLngs\n * @param {Object} options\n * @return {LatLng[]}\n */\nexport default (map, latLngs, options) => {\n\n    const points = Clipper.CleanPolygon(latLngsToClipperPoints(map, latLngs), options.simplifyFactor);\n    const polygons = Clipper.SimplifyPolygon(points, PolyFillType.pftNonZero);\n\n    return clipperPolygonsToLatLngs(map, polygons);\n\n};\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,aAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;EAEpD,OAAOA,OAAO,CAACD,GAAR,CAAYE,MAAM,IAAI;IACzB,MAAMC,KAAK,GAAGH,GAAG,CAACI,kBAAJ,CAAuBF,MAAvB,CAAd;IACA,OAAO;MAAEG,CAAC,EAAEF,KAAK,CAACG,CAAX;MAAcC,CAAC,EAAEJ,KAAK,CAACK;IAAvB,CAAP;EACH,CAHM,CAAP;AAKH,CAPM;AASP;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAG,CAACT,GAAD,EAAMU,QAAN,KAAmB;EAEhD,OAAOA,QAAQ,CAACV,GAAT,CAAaW,OAAO,IAAI;IAE3B,OAAOA,OAAO,CAACX,GAAR,CAAYG,KAAK,IAAI;MACxB,MAAMS,YAAY,GAAG,IAAIhB,KAAJ,CAAUO,KAAK,CAACE,CAAhB,EAAmBF,KAAK,CAACI,CAAzB,CAArB;MACA,OAAOP,GAAG,CAACa,kBAAJ,CAAuBD,YAAvB,CAAP;IACH,CAHM,CAAP;EAKH,CAPM,CAAP;AASH,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAe,CAACZ,GAAD,EAAMC,OAAN,EAAea,OAAf,KAA2B;EAEtC,MAAMC,MAAM,GAAGlB,OAAO,CAACmB,YAAR,CAAqBjB,sBAAsB,CAACC,GAAD,EAAMC,OAAN,CAA3C,EAA2Da,OAAO,CAACG,cAAnE,CAAf;EACA,MAAMP,QAAQ,GAAGb,OAAO,CAACqB,eAAR,CAAwBH,MAAxB,EAAgCjB,YAAY,CAACqB,UAA7C,CAAjB;EAEA,OAAOV,wBAAwB,CAACT,GAAD,EAAMU,QAAN,CAA/B;AAEH,CAPD"},"metadata":{},"sourceType":"module"}