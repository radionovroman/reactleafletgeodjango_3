{"ast":null,"code":"import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport { EPSLN } from '../constants/values';\nexport function init() {\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  } else {\n    this.ns0 = this.con;\n  }\n\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n  p.x = x;\n  p.y = y;\n  return p;\n}\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  } else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n\n  theta = 0;\n\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  con = rh1 * this.ns0 / this.a;\n\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  } else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\n\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n\n  return null;\n}\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};","map":{"version":3,"names":["msfnz","qsfnz","adjust_lon","asinz","EPSLN","init","Math","abs","lat1","lat2","temp","b","a","es","pow","e3","sqrt","sin_po","sin","cos_po","cos","t1","con","ms1","qs1","t2","ms2","qs2","lat0","t3","qs0","ns0","c","rh","forward","p","lon","x","lat","y","sin_phi","cos_phi","qs","rh1","theta","long0","x0","y0","inverse","atan2","sphere","asin","phi1z","eccent","sinphi","cosphi","com","dphi","phi","eccnts","i","log","names"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/proj4/lib/projections/aea.js"],"sourcesContent":["import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}