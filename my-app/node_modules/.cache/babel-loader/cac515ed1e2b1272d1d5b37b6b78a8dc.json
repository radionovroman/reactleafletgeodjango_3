{"ast":null,"code":"var _jsxFileName = \"/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapContainer, TileLayer, useMap, Marker, Popup } from 'react-leaflet';\nimport axios from \"axios\";\nimport { Alert, Spinner } from \"react-bootstrap\";\nimport useSWR from \"swr\";\nimport { Icon } from \"leaflet/dist/leaflet-src.esm\";\nimport { GeoJSON } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar url = \"http://127.0.0.1:8000/api/world/Turkey/\";\n\nconst MyInput = () => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n\n  const updateName = event => {\n    setName(event.target.value);\n  };\n\n  return;\n  input = /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: name,\n    onChange: updateName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 11\n  }, this);\n};\n\n_s(MyInput, \"gFPpQ6rgfiGkmgRsh4q2nIO1W+Q=\");\n\n_c = MyInput;\n\nconst MyData = () => {\n  _s2();\n\n  // create state variable to hold data when it is fetched\n  const [data, setData] = React.useState(); // useEffect to fetch data on mount\n\n  useEffect(() => {\n    // async function!\n    const getData = async () => {\n      // 'await' the data\n      const response = await axios.get(url); // save data to state\n\n      setData(response.data);\n    };\n\n    getData();\n  }, []); // render react-leaflet GeoJSON when the data is ready\n\n  if (data) {\n    return /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s2(MyData, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n\n_c2 = MyData;\n\nfunction App() {\n  if (name === null) {\n    url = url;\n  } else {\n    url = url + name + \"/\";\n  }\n\n  console.log(name);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [51.505, -0.09],\n    zoom: 2,\n    scrollWheelZoom: true,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(MyData, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MyInput\");\n$RefreshReg$(_c2, \"MyData\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","MapContainer","TileLayer","useMap","Marker","Popup","axios","Alert","Spinner","useSWR","Icon","GeoJSON","url","MyInput","name","setName","updateName","event","target","value","input","MyData","data","setData","getData","response","get","App","console","log"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapContainer, TileLayer, useMap, Marker, Popup } from 'react-leaflet' ;\nimport axios from \"axios\";\nimport {Alert, Spinner} from \"react-bootstrap\";\nimport useSWR from \"swr\";\nimport {Icon} from \"leaflet/dist/leaflet-src.esm\";\nimport { GeoJSON } from 'react-leaflet';\n\n\n\n\nvar url = \"http://127.0.0.1:8000/api/world/Turkey/\"\n\nconst MyInput = () => {\n\n  const [name, setName] = useState(\"\");\n\n  const updateName = (event) => {\n    setName(event.target.value);\n  };\n\nreturn\n  input = <input type={\"text\"} value={name} onChange={updateName}/>\n}\n\n\n\n\nconst MyData = () => {\n  // create state variable to hold data when it is fetched\n\n\n\n  const [data, setData] = React.useState();\n\n    // useEffect to fetch data on mount\n  useEffect(() => {\n    // async function!\n    const getData = async () => {\n      // 'await' the data\n      const response = await axios.get(url);\n      // save data to state\n      setData(response.data);\n    };\n    getData();\n  }, []);\n\n  // render react-leaflet GeoJSON when the data is ready\n  if (data) {\n    return <GeoJSON data={data} />;\n  } else {\n    return null;\n  }\n};\n\n\nfunction App() {\n\n\n\n  if (name === null) {\n  url = url\n} else {\n  url = url + name + \"/\"\n}\n\nconsole.log(name)\n\n\n\n  return (\n    <MapContainer center={[51.505, -0.09]} zoom={2} scrollWheelZoom={true}>\n  <TileLayer\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n  />\n\n      <MyData/>\n\n</MapContainer>\n  );\n}\n\nexport default App;\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAkDC,KAAlD,QAA+D,eAA/D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,OAAf,QAA6B,iBAA7B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAAQC,IAAR,QAAmB,8BAAnB;AACA,SAASC,OAAT,QAAwB,eAAxB;;AAKA,IAAIC,GAAG,GAAG,yCAAV;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAEpB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;;EAEA,MAAMkB,UAAU,GAAIC,KAAD,IAAW;IAC5BF,OAAO,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;EACD,CAFD;;EAIF;EACEC,KAAK,gBAAG;IAAO,IAAI,EAAE,MAAb;IAAqB,KAAK,EAAEN,IAA5B;IAAkC,QAAQ,EAAEE;EAA5C;IAAA;IAAA;IAAA;EAAA,QAAR;AACD,CAVD;;GAAMH,O;;KAAAA,O;;AAeN,MAAMQ,MAAM,GAAG,MAAM;EAAA;;EACnB;EAIA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB1B,KAAK,CAACC,QAAN,EAAxB,CALmB,CAOjB;;EACFC,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,OAAO,GAAG,YAAY;MAC1B;MACA,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAUd,GAAV,CAAvB,CAF0B,CAG1B;;MACAW,OAAO,CAACE,QAAQ,CAACH,IAAV,CAAP;IACD,CALD;;IAMAE,OAAO;EACR,CATQ,EASN,EATM,CAAT,CARmB,CAmBnB;;EACA,IAAIF,IAAJ,EAAU;IACR,oBAAO,QAAC,OAAD;MAAS,IAAI,EAAEA;IAAf;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAFD,MAEO;IACL,OAAO,IAAP;EACD;AACF,CAzBD;;IAAMD,M;;MAAAA,M;;AA4BN,SAASM,GAAT,GAAe;EAIb,IAAIb,IAAI,KAAK,IAAb,EAAmB;IACnBF,GAAG,GAAGA,GAAN;EACD,CAFC,MAEK;IACLA,GAAG,GAAGA,GAAG,GAAGE,IAAN,GAAa,GAAnB;EACD;;EAEDc,OAAO,CAACC,GAAR,CAAYf,IAAZ;EAIE,oBACE,QAAC,YAAD;IAAc,MAAM,EAAE,CAAC,MAAD,EAAS,CAAC,IAAV,CAAtB;IAAuC,IAAI,EAAE,CAA7C;IAAgD,eAAe,EAAE,IAAjE;IAAA,wBACF,QAAC,SAAD;MACE,WAAW,EAAC,yFADd;MAEE,GAAG,EAAC;IAFN;MAAA;MAAA;MAAA;IAAA,QADE,eAME,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;MAzBQa,G;AA2BT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}