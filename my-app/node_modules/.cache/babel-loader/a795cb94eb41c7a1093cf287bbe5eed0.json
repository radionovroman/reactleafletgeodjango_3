{"ast":null,"code":"import * as DomEvent from './DomEvent';\n/*\r\n * Extends the event handling code with double tap support for mobile browsers.\r\n *\r\n * Note: currently most browsers fire native dblclick, with only a few exceptions\r\n * (see https://github.com/Leaflet/Leaflet/issues/7012#issuecomment-595087386)\r\n */\n\nfunction makeDblclick(event) {\n  // in modern browsers `type` cannot be just overridden:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only\n  var newEvent = {},\n      prop,\n      i;\n\n  for (i in event) {\n    prop = event[i];\n    newEvent[i] = prop && prop.bind ? prop.bind(event) : prop;\n  }\n\n  event = newEvent;\n  newEvent.type = 'dblclick';\n  newEvent.detail = 2;\n  newEvent.isTrusted = false;\n  newEvent._simulated = true; // for debug purposes\n\n  return newEvent;\n}\n\nvar delay = 200;\nexport function addDoubleTapListener(obj, handler) {\n  // Most browsers handle double tap natively\n  obj.addEventListener('dblclick', handler); // On some platforms the browser doesn't fire native dblclicks for touch events.\n  // It seems that in all such cases `detail` property of `click` event is always `1`.\n  // So here we rely on that fact to avoid excessive 'dblclick' simulation when not needed.\n\n  var last = 0,\n      detail;\n\n  function simDblclick(e) {\n    if (e.detail !== 1) {\n      detail = e.detail; // keep in sync to avoid false dblclick in some cases\n\n      return;\n    }\n\n    if (e.pointerType === 'mouse' || e.sourceCapabilities && !e.sourceCapabilities.firesTouchEvents) {\n      return;\n    } // When clicking on an <input>, the browser generates a click on its\n    // <label> (and vice versa) triggering two clicks in quick succession.\n    // This ignores clicks on elements which are a label with a 'for'\n    // attribute (or children of such a label), but not children of\n    // a <input>.\n\n\n    var path = DomEvent.getPropagationPath(e);\n\n    if (path.some(function (el) {\n      return el instanceof HTMLLabelElement && el.attributes.for;\n    }) && !path.some(function (el) {\n      return el instanceof HTMLInputElement || el instanceof HTMLSelectElement;\n    })) {\n      return;\n    }\n\n    var now = Date.now();\n\n    if (now - last <= delay) {\n      detail++;\n\n      if (detail === 2) {\n        handler(makeDblclick(e));\n      }\n    } else {\n      detail = 1;\n    }\n\n    last = now;\n  }\n\n  obj.addEventListener('click', simDblclick);\n  return {\n    dblclick: handler,\n    simDblclick: simDblclick\n  };\n}\nexport function removeDoubleTapListener(obj, handlers) {\n  obj.removeEventListener('dblclick', handlers.dblclick);\n  obj.removeEventListener('click', handlers.simDblclick);\n}","map":{"version":3,"names":["DomEvent","makeDblclick","event","newEvent","prop","i","bind","type","detail","isTrusted","_simulated","delay","addDoubleTapListener","obj","handler","addEventListener","last","simDblclick","e","pointerType","sourceCapabilities","firesTouchEvents","path","getPropagationPath","some","el","HTMLLabelElement","attributes","for","HTMLInputElement","HTMLSelectElement","now","Date","dblclick","removeDoubleTapListener","handlers","removeEventListener"],"sources":["/Users/romanradionov/PycharmProjects/reactleafletgeodjango/my-app/node_modules/leaflet/src/dom/DomEvent.DoubleTap.js"],"sourcesContent":["import * as DomEvent from './DomEvent';\r\n\r\n/*\r\n * Extends the event handling code with double tap support for mobile browsers.\r\n *\r\n * Note: currently most browsers fire native dblclick, with only a few exceptions\r\n * (see https://github.com/Leaflet/Leaflet/issues/7012#issuecomment-595087386)\r\n */\r\n\r\nfunction makeDblclick(event) {\r\n\t// in modern browsers `type` cannot be just overridden:\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only\r\n\tvar newEvent = {},\r\n\t    prop, i;\r\n\tfor (i in event) {\r\n\t\tprop = event[i];\r\n\t\tnewEvent[i] = prop && prop.bind ? prop.bind(event) : prop;\r\n\t}\r\n\tevent = newEvent;\r\n\tnewEvent.type = 'dblclick';\r\n\tnewEvent.detail = 2;\r\n\tnewEvent.isTrusted = false;\r\n\tnewEvent._simulated = true; // for debug purposes\r\n\treturn newEvent;\r\n}\r\n\r\nvar delay = 200;\r\nexport function addDoubleTapListener(obj, handler) {\r\n\t// Most browsers handle double tap natively\r\n\tobj.addEventListener('dblclick', handler);\r\n\r\n\t// On some platforms the browser doesn't fire native dblclicks for touch events.\r\n\t// It seems that in all such cases `detail` property of `click` event is always `1`.\r\n\t// So here we rely on that fact to avoid excessive 'dblclick' simulation when not needed.\r\n\tvar last = 0,\r\n\t    detail;\r\n\tfunction simDblclick(e) {\r\n\t\tif (e.detail !== 1) {\r\n\t\t\tdetail = e.detail; // keep in sync to avoid false dblclick in some cases\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (e.pointerType === 'mouse' ||\r\n\t\t\t(e.sourceCapabilities && !e.sourceCapabilities.firesTouchEvents)) {\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// When clicking on an <input>, the browser generates a click on its\r\n\t\t// <label> (and vice versa) triggering two clicks in quick succession.\r\n\t\t// This ignores clicks on elements which are a label with a 'for'\r\n\t\t// attribute (or children of such a label), but not children of\r\n\t\t// a <input>.\r\n\t\tvar path = DomEvent.getPropagationPath(e);\r\n\t\tif (path.some(function (el) {\r\n\t\t\treturn el instanceof HTMLLabelElement && el.attributes.for;\r\n\t\t}) &&\r\n\t\t\t!path.some(function (el) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\tel instanceof HTMLInputElement ||\r\n\t\t\t\t\tel instanceof HTMLSelectElement\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar now = Date.now();\r\n\t\tif (now - last <= delay) {\r\n\t\t\tdetail++;\r\n\t\t\tif (detail === 2) {\r\n\t\t\t\thandler(makeDblclick(e));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdetail = 1;\r\n\t\t}\r\n\t\tlast = now;\r\n\t}\r\n\r\n\tobj.addEventListener('click', simDblclick);\r\n\r\n\treturn {\r\n\t\tdblclick: handler,\r\n\t\tsimDblclick: simDblclick\r\n\t};\r\n}\r\n\r\nexport function removeDoubleTapListener(obj, handlers) {\r\n\tobj.removeEventListener('dblclick', handlers.dblclick);\r\n\tobj.removeEventListener('click', handlers.simDblclick);\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,YAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;EAC5B;EACA;EACA,IAAIC,QAAQ,GAAG,EAAf;EAAA,IACIC,IADJ;EAAA,IACUC,CADV;;EAEA,KAAKA,CAAL,IAAUH,KAAV,EAAiB;IAChBE,IAAI,GAAGF,KAAK,CAACG,CAAD,CAAZ;IACAF,QAAQ,CAACE,CAAD,CAAR,GAAcD,IAAI,IAAIA,IAAI,CAACE,IAAb,GAAoBF,IAAI,CAACE,IAAL,CAAUJ,KAAV,CAApB,GAAuCE,IAArD;EACA;;EACDF,KAAK,GAAGC,QAAR;EACAA,QAAQ,CAACI,IAAT,GAAgB,UAAhB;EACAJ,QAAQ,CAACK,MAAT,GAAkB,CAAlB;EACAL,QAAQ,CAACM,SAAT,GAAqB,KAArB;EACAN,QAAQ,CAACO,UAAT,GAAsB,IAAtB,CAb4B,CAaA;;EAC5B,OAAOP,QAAP;AACA;;AAED,IAAIQ,KAAK,GAAG,GAAZ;AACA,OAAO,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,OAAnC,EAA4C;EAClD;EACAD,GAAG,CAACE,gBAAJ,CAAqB,UAArB,EAAiCD,OAAjC,EAFkD,CAIlD;EACA;EACA;;EACA,IAAIE,IAAI,GAAG,CAAX;EAAA,IACIR,MADJ;;EAEA,SAASS,WAAT,CAAqBC,CAArB,EAAwB;IACvB,IAAIA,CAAC,CAACV,MAAF,KAAa,CAAjB,EAAoB;MACnBA,MAAM,GAAGU,CAAC,CAACV,MAAX,CADmB,CACA;;MACnB;IACA;;IAED,IAAIU,CAAC,CAACC,WAAF,KAAkB,OAAlB,IACFD,CAAC,CAACE,kBAAF,IAAwB,CAACF,CAAC,CAACE,kBAAF,CAAqBC,gBADhD,EACmE;MAElE;IACA,CAVsB,CAYvB;IACA;IACA;IACA;IACA;;;IACA,IAAIC,IAAI,GAAGtB,QAAQ,CAACuB,kBAAT,CAA4BL,CAA5B,CAAX;;IACA,IAAII,IAAI,CAACE,IAAL,CAAU,UAAUC,EAAV,EAAc;MAC3B,OAAOA,EAAE,YAAYC,gBAAd,IAAkCD,EAAE,CAACE,UAAH,CAAcC,GAAvD;IACA,CAFG,KAGH,CAACN,IAAI,CAACE,IAAL,CAAU,UAAUC,EAAV,EAAc;MACxB,OACCA,EAAE,YAAYI,gBAAd,IACAJ,EAAE,YAAYK,iBAFf;IAIA,CALA,CAHF,EASE;MACD;IACA;;IAED,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAV;;IACA,IAAIA,GAAG,GAAGf,IAAN,IAAcL,KAAlB,EAAyB;MACxBH,MAAM;;MACN,IAAIA,MAAM,KAAK,CAAf,EAAkB;QACjBM,OAAO,CAACb,YAAY,CAACiB,CAAD,CAAb,CAAP;MACA;IACD,CALD,MAKO;MACNV,MAAM,GAAG,CAAT;IACA;;IACDQ,IAAI,GAAGe,GAAP;EACA;;EAEDlB,GAAG,CAACE,gBAAJ,CAAqB,OAArB,EAA8BE,WAA9B;EAEA,OAAO;IACNgB,QAAQ,EAAEnB,OADJ;IAENG,WAAW,EAAEA;EAFP,CAAP;AAIA;AAED,OAAO,SAASiB,uBAAT,CAAiCrB,GAAjC,EAAsCsB,QAAtC,EAAgD;EACtDtB,GAAG,CAACuB,mBAAJ,CAAwB,UAAxB,EAAoCD,QAAQ,CAACF,QAA7C;EACApB,GAAG,CAACuB,mBAAJ,CAAwB,OAAxB,EAAiCD,QAAQ,CAAClB,WAA1C;AACA"},"metadata":{},"sourceType":"module"}