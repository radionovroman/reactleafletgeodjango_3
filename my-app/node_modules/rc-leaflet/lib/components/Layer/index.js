"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var prop_types_1 = __importDefault(require("prop-types"));
var leaflet_1 = __importDefault(require("leaflet"));
var Context_1 = __importDefault(require("../RCMap/Context"));
var Evented_1 = __importDefault(require("../Evented"));
var Layer = /** @class */ (function (_super) {
    __extends(Layer, _super);
    function Layer(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onAdd = function (e) { return _this.props.onAdd && _this.props.onAdd(e, _this.instance); };
        _this.onRemove = function (e) { return _this.props.onRemove && _this.props.onRemove(e, _this.instance); };
        var group = props.group, onCreate = props.onCreate, onAdd = props.onAdd, onRemove = props.onRemove, children = props.children, restProps = __rest(props, ["group", "onCreate", "onAdd", "onRemove", "children"]);
        _this.instance = _this.createInstance(__assign({}, _this.getTheme(), restProps), context);
        onCreate && onCreate(_this.instance);
        _super.prototype.bindEvents.call(_this);
        _this.instance.on({ add: _this.onAdd, remove: _this.onRemove });
        group ? group.addLayer(_this.instance) : _this.instance.addTo(context.map);
        return _this;
    }
    Layer.prototype.componentDidUpdate = function (prevProps) {
        var prevGroup = prevProps.group;
        var group = this.props.group;
        var map = this.context.map;
        if (group && group !== prevGroup) {
            prevGroup ? prevGroup.removeLayer(this.instance) : map.removeLayer(this.instance);
            group.addLayer(this.instance);
        }
        else if (!group && prevGroup) {
            prevGroup.removeLayer(this.instance);
            this.instance.addTo(map);
        }
        this.props.onUpdate && this.props.onUpdate(this.instance);
    };
    Layer.prototype.componentWillUnmount = function () {
        this.props.onBeforeRemove && this.props.onBeforeRemove(this.instance);
        this.instance.remove();
    };
    Layer.prototype.getTheme = function () {
        return {};
    };
    Layer.prototype.render = function () {
        var children = this.props.children;
        var layer = this.instance;
        return children ? react_1.Children.map(children, function (child) { return (react_1.isValidElement(child) ? react_1.cloneElement(child, { layer: layer }) : child); }) : null;
    };
    Layer.propTypes = __assign({}, Evented_1.default.propTypes, { group: prop_types_1.default.instanceOf(leaflet_1.default.LayerGroup), pane: prop_types_1.default.string, attribution: prop_types_1.default.string, onCreate: prop_types_1.default.func, onAdd: prop_types_1.default.func, onUpdate: prop_types_1.default.func, onBeforeRemove: prop_types_1.default.func, onRemove: prop_types_1.default.func, children: prop_types_1.default.node });
    Layer.contextType = Context_1.default;
    return Layer;
}(Evented_1.default));
exports.default = Layer;
