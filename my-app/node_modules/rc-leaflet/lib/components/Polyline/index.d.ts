import PropTypes from 'prop-types';
import L from 'leaflet';
import Path from '../Path';
interface RequiredProps {
    points: L.LatLngExpression[] | L.LatLngExpression[][];
}
export declare type Props = Readonly<RequiredProps>;
export declare const PolylinePropTypes: {
    smoothFactor: PropTypes.Requireable<number>;
    noClip: PropTypes.Requireable<boolean>;
    stroke: PropTypes.Requireable<boolean>;
    color: PropTypes.Requireable<string>;
    weight: PropTypes.Requireable<number>;
    opacity: PropTypes.Requireable<number>;
    lineCap: PropTypes.Requireable<L.LineCapShape>;
    lineJoin: PropTypes.Requireable<L.LineJoinShape>;
    dashArray: PropTypes.Requireable<string | number[]>;
    dashOffset: PropTypes.Requireable<string>;
    fill: PropTypes.Requireable<boolean>;
    fillColor: PropTypes.Requireable<string>;
    fillOpacity: PropTypes.Requireable<number>;
    fillRule: PropTypes.Requireable<L.FillRule>;
    renderer: PropTypes.Requireable<L.Renderer>;
    className: PropTypes.Requireable<string>;
    interactive: PropTypes.Requireable<boolean>;
    bubblingMouseEvents: PropTypes.Requireable<boolean>;
    group: PropTypes.Requireable<L.LayerGroup<unknown>>;
    pane: PropTypes.Requireable<string>;
    attribution: PropTypes.Requireable<string>;
    onCreate: PropTypes.Requireable<(...args: any[]) => any>;
    onAdd: PropTypes.Requireable<(...args: any[]) => any>;
    onUpdate: PropTypes.Requireable<(...args: any[]) => any>;
    onBeforeRemove: PropTypes.Requireable<(...args: any[]) => any>;
    onRemove: PropTypes.Requireable<(...args: any[]) => any>;
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
};
export default class Polyline<P extends L.PolylineOptions = L.PolylineOptions> extends Path<L.Polyline, Props & P> {
    static propTypes: {
        points: PropTypes.Validator<(number[] | L.LatLng | PropTypes.InferProps<{
            lat: PropTypes.Validator<number>;
            lng: PropTypes.Validator<number>;
        }>)[] | (number[] | L.LatLng | PropTypes.InferProps<{
            lat: PropTypes.Validator<number>;
            lng: PropTypes.Validator<number>;
        }>)[][]>;
        smoothFactor: PropTypes.Requireable<number>;
        noClip: PropTypes.Requireable<boolean>;
        stroke: PropTypes.Requireable<boolean>;
        color: PropTypes.Requireable<string>;
        weight: PropTypes.Requireable<number>;
        opacity: PropTypes.Requireable<number>;
        lineCap: PropTypes.Requireable<L.LineCapShape>;
        lineJoin: PropTypes.Requireable<L.LineJoinShape>;
        dashArray: PropTypes.Requireable<string | number[]>;
        dashOffset: PropTypes.Requireable<string>;
        fill: PropTypes.Requireable<boolean>;
        fillColor: PropTypes.Requireable<string>;
        fillOpacity: PropTypes.Requireable<number>;
        fillRule: PropTypes.Requireable<L.FillRule>;
        renderer: PropTypes.Requireable<L.Renderer>;
        className: PropTypes.Requireable<string>;
        interactive: PropTypes.Requireable<boolean>;
        bubblingMouseEvents: PropTypes.Requireable<boolean>;
        group: PropTypes.Requireable<L.LayerGroup<unknown>>;
        pane: PropTypes.Requireable<string>;
        attribution: PropTypes.Requireable<string>;
        onCreate: PropTypes.Requireable<(...args: any[]) => any>;
        onAdd: PropTypes.Requireable<(...args: any[]) => any>;
        onUpdate: PropTypes.Requireable<(...args: any[]) => any>;
        onBeforeRemove: PropTypes.Requireable<(...args: any[]) => any>;
        onRemove: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
    };
    protected createInstance(props: Props & P): L.Polyline;
    componentDidUpdate(prevProps: Props & P): void;
}
export {};
