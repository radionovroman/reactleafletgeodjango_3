/// <reference types="react" />
import PropTypes from 'prop-types';
import L from 'leaflet';
import Layer from '../Layer';
interface PartialProps {
    zIndex: number;
}
export interface ChildProps extends PartialProps {
    group: L.LayerGroup;
    layer: L.LayerGroup;
    zIndexOffset: number;
}
export declare type Props = Readonly<Partial<PartialProps>>;
export default class LayerGroup<T extends L.LayerGroup = L.LayerGroup, P extends L.LayerOptions = L.LayerOptions> extends Layer<T, Props & P> {
    static propTypes: {
        zIndex: PropTypes.Requireable<number>;
        group: PropTypes.Requireable<L.LayerGroup<unknown>>;
        pane: PropTypes.Requireable<string>;
        attribution: PropTypes.Requireable<string>;
        onCreate: PropTypes.Requireable<(...args: any[]) => any>;
        onAdd: PropTypes.Requireable<(...args: any[]) => any>;
        onUpdate: PropTypes.Requireable<(...args: any[]) => any>;
        onBeforeRemove: PropTypes.Requireable<(...args: any[]) => any>;
        onRemove: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
    };
    protected createInstance(props: Props & P): any;
    render(): React.ReactNode;
}
export {};
