import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import L from 'leaflet';
interface PartialProps {
    layer: L.Marker;
    children: React.ReactNode;
}
export declare type Props = Readonly<Partial<PartialProps>>;
export default abstract class BaseIcon<T extends L.Icon | L.DivIcon, P extends L.BaseIconOptions> extends PureComponent<Props & P, {
    instance: T;
}> {
    static propTypes: {
        pane: PropTypes.Requireable<string>;
        attribution: PropTypes.Requireable<string>;
        iconUrl: PropTypes.Requireable<string>;
        iconRetinaUrl: PropTypes.Requireable<string>;
        iconSize: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        iconAnchor: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        popupAnchor: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        tooltipAnchor: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        shadowUrl: PropTypes.Requireable<string>;
        shadowRetinaUrl: PropTypes.Requireable<string>;
        shadowSize: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        shadowAnchor: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        className: PropTypes.Requireable<string>;
        layer: PropTypes.Requireable<L.Marker<unknown>>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    readonly state: {
        instance: T;
    };
    render(): React.ReactNode;
}
export {};
