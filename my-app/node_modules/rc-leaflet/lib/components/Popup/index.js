"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var prop_types_1 = __importDefault(require("prop-types"));
var leaflet_1 = __importDefault(require("leaflet"));
var PropTypes_1 = require("../../util/PropTypes");
var DivOverlay_1 = __importDefault(require("../DivOverlay"));
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Popup.prototype.createInstance = function (props) {
        return leaflet_1.default.popup(props);
    };
    Popup.prototype.bindOnLayer = function (layer) {
        if (layer) {
            layer.bindPopup(this.instance);
        }
    };
    Popup.prototype.unbindOnLayer = function (layer) {
        if (layer) {
            layer.unbindPopup();
        }
    };
    Popup.prototype.openOnMap = function () {
        if (this.context.map) {
            this.context.map.openPopup(this.instance);
        }
    };
    Popup.prototype.closeOnMap = function () {
        if (this.context.map) {
            this.context.map.closePopup(this.instance);
        }
    };
    Popup.propTypes = __assign({}, DivOverlay_1.default.propTypes, { maxWidth: prop_types_1.default.number, minWidth: prop_types_1.default.number, maxHeight: prop_types_1.default.number, keepInView: prop_types_1.default.bool, closeButton: prop_types_1.default.bool, autoPan: prop_types_1.default.bool, autoPanPaddingTopLeft: PropTypes_1.Pixel, autoPanPaddingBottomRight: PropTypes_1.Pixel, autoPanPadding: PropTypes_1.Pixel, autoClose: prop_types_1.default.bool, closeOnClick: prop_types_1.default.bool, closeOnEscapeKey: prop_types_1.default.bool });
    Popup.defaultProps = {
        pane: 'popupPane',
        closeOnClick: true,
        zoomAnimation: true
    };
    return Popup;
}(DivOverlay_1.default));
exports.default = Popup;
