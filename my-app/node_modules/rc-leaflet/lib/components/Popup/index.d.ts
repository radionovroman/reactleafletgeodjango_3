import PropTypes from 'prop-types';
import L from 'leaflet';
import DivOverlay from '../DivOverlay';
export default class Popup extends DivOverlay<L.Popup, L.PopupOptions> {
    static propTypes: {
        maxWidth: PropTypes.Requireable<number>;
        minWidth: PropTypes.Requireable<number>;
        maxHeight: PropTypes.Requireable<number>;
        keepInView: PropTypes.Requireable<boolean>;
        closeButton: PropTypes.Requireable<boolean>;
        autoPan: PropTypes.Requireable<boolean>;
        autoPanPaddingTopLeft: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        autoPanPaddingBottomRight: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        autoPanPadding: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        autoClose: PropTypes.Requireable<boolean>;
        closeOnClick: PropTypes.Requireable<boolean>;
        closeOnEscapeKey: PropTypes.Requireable<boolean>;
        offset: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        zoomAnimation: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        pane: PropTypes.Requireable<string>;
        layer: PropTypes.Requireable<L.Layer>;
        position: PropTypes.Requireable<number[] | L.LatLng | PropTypes.InferProps<{
            lat: PropTypes.Validator<number>;
            lng: PropTypes.Validator<number>;
        }>>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: L.PopupOptions;
    protected createInstance(props: L.PopupOptions): L.Popup;
    protected bindOnLayer(layer: L.Layer): void;
    protected unbindOnLayer(layer: L.Layer): void;
    protected openOnMap(): void;
    protected closeOnMap(): void;
}
