var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import PropTypes from 'prop-types';
import L from 'leaflet';
import { Pixel } from '../../util/PropTypes';
import DivOverlay from '../DivOverlay';
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Popup.prototype.createInstance = function (props) {
        return L.popup(props);
    };
    Popup.prototype.bindOnLayer = function (layer) {
        if (layer) {
            layer.bindPopup(this.instance);
        }
    };
    Popup.prototype.unbindOnLayer = function (layer) {
        if (layer) {
            layer.unbindPopup();
        }
    };
    Popup.prototype.openOnMap = function () {
        if (this.context.map) {
            this.context.map.openPopup(this.instance);
        }
    };
    Popup.prototype.closeOnMap = function () {
        if (this.context.map) {
            this.context.map.closePopup(this.instance);
        }
    };
    Popup.propTypes = __assign({}, DivOverlay.propTypes, { maxWidth: PropTypes.number, minWidth: PropTypes.number, maxHeight: PropTypes.number, keepInView: PropTypes.bool, closeButton: PropTypes.bool, autoPan: PropTypes.bool, autoPanPaddingTopLeft: Pixel, autoPanPaddingBottomRight: Pixel, autoPanPadding: Pixel, autoClose: PropTypes.bool, closeOnClick: PropTypes.bool, closeOnEscapeKey: PropTypes.bool });
    Popup.defaultProps = {
        pane: 'popupPane',
        closeOnClick: true,
        zoomAnimation: true
    };
    return Popup;
}(DivOverlay));
export default Popup;
