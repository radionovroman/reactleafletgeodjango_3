import { Component } from 'react';
import PropTypes from 'prop-types';
import L from 'leaflet';
import { ContextType } from '../RCMap/Context';
interface RequiredProps {
    url: string;
}
export declare type Props = Readonly<L.TileLayerOptions & RequiredProps>;
export default class TileLayer extends Component<Props> {
    static propTypes: {
        url: PropTypes.Validator<string>;
        tileSize: PropTypes.Requireable<number | L.Point>;
        opacity: PropTypes.Requireable<number>;
        updateWhenIdle: PropTypes.Requireable<boolean>;
        updateWhenZooming: PropTypes.Requireable<boolean>;
        updateInterval: PropTypes.Requireable<number>;
        attribution: PropTypes.Requireable<string>;
        zIndex: PropTypes.Requireable<number>;
        bounds: PropTypes.Requireable<number[][] | L.LatLngBounds>;
        minZoom: PropTypes.Requireable<number>;
        maxZoom: PropTypes.Requireable<number>;
        noWrap: PropTypes.Requireable<boolean>;
        pane: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        keepBuffer: PropTypes.Requireable<number>;
        maxNativeZoom: PropTypes.Requireable<number>;
        minNativeZoom: PropTypes.Requireable<number>;
        subdomains: PropTypes.Requireable<string | string[]>;
        errorTileUrl: PropTypes.Requireable<string>;
        zoomOffset: PropTypes.Requireable<number>;
        tms: PropTypes.Requireable<boolean>;
        zoomReverse: PropTypes.Requireable<boolean>;
        detectRetina: PropTypes.Requireable<boolean>;
        crossOrigin: PropTypes.Requireable<string | boolean>;
    };
    static contextType: import("react").Context<Readonly<{
        map: L.Map;
        theme: import("../Theme").ContextType;
    }>>;
    context: ContextType;
    private instance;
    protected constructor(props: Props, context: ContextType);
    shouldComponentUpdate(nextProps: Props): boolean;
    componentDidUpdate(prevProps: Props): void;
    componentWillUnmount(): void;
    render(): null;
}
export {};
