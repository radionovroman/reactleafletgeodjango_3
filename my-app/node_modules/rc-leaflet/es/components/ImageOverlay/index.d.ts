import PropTypes from 'prop-types';
import L from 'leaflet';
import ImageOverlayClass, { Props as ImageOverlayProps } from './Class';
interface RequiredProps {
    url: string;
}
declare type Props = Readonly<L.ImageOverlayOptions & ImageOverlayProps & RequiredProps>;
export default class ImageOverlay extends ImageOverlayClass<L.ImageOverlay, Props> {
    static propTypes: {
        url: PropTypes.Validator<string>;
        bounds: PropTypes.Validator<number[][] | L.LatLngBounds>;
        onLoad: PropTypes.Requireable<(...args: any[]) => any>;
        onError: PropTypes.Requireable<(...args: any[]) => any>;
        interactive: PropTypes.Requireable<boolean>;
        bubblingMouseEvents: PropTypes.Requireable<boolean>;
        group: PropTypes.Requireable<L.LayerGroup<unknown>>;
        pane: PropTypes.Requireable<string>;
        attribution: PropTypes.Requireable<string>;
        onCreate: PropTypes.Requireable<(...args: any[]) => any>;
        onAdd: PropTypes.Requireable<(...args: any[]) => any>;
        onUpdate: PropTypes.Requireable<(...args: any[]) => any>;
        onBeforeRemove: PropTypes.Requireable<(...args: any[]) => any>;
        onRemove: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
    };
    componentDidUpdate(prevProps: Props): void;
    protected createInstance(props: Props): L.ImageOverlay;
}
export {};
