import PropTypes from 'prop-types';
import L from 'leaflet';
import { ContextType } from '../RCMap/Context';
import InteractiveLayer from '../InteractiveLayer';
interface RequiredProps {
    bounds: L.LatLngBoundsExpression;
}
interface PartialProps {
    onLoad(e: L.LeafletEvent): void;
    onError(e: L.LeafletEvent): void;
}
export declare type Props = Readonly<Partial<PartialProps> & RequiredProps>;
export default abstract class ImageOverlayClass<T extends L.Layer, P extends L.ImageOverlayOptions = L.ImageOverlayOptions> extends InteractiveLayer<T, Props & P> {
    static propTypes: {
        bounds: PropTypes.Validator<number[][] | L.LatLngBounds>;
        onLoad: PropTypes.Requireable<(...args: any[]) => any>;
        onError: PropTypes.Requireable<(...args: any[]) => any>;
        interactive: PropTypes.Requireable<boolean>;
        bubblingMouseEvents: PropTypes.Requireable<boolean>;
        group: PropTypes.Requireable<L.LayerGroup<unknown>>;
        pane: PropTypes.Requireable<string>;
        attribution: PropTypes.Requireable<string>;
        onCreate: PropTypes.Requireable<(...args: any[]) => any>;
        onAdd: PropTypes.Requireable<(...args: any[]) => any>;
        onUpdate: PropTypes.Requireable<(...args: any[]) => any>;
        onBeforeRemove: PropTypes.Requireable<(...args: any[]) => any>;
        onRemove: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
    };
    constructor(props: Props & P, context: ContextType);
    componentDidUpdate(prevProps: Props & P): void;
    private onLoad;
    private onError;
}
export {};
