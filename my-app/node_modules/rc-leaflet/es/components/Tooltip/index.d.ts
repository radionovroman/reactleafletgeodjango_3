import PropTypes from 'prop-types';
import L from 'leaflet';
import DivOverlay from '../DivOverlay';
export default class Tooltip extends DivOverlay<L.Tooltip, L.TooltipOptions> {
    static propTypes: {
        pane: PropTypes.Requireable<string>;
        offset: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        direction: PropTypes.Requireable<L.Direction>;
        permanent: PropTypes.Requireable<boolean>;
        sticky: PropTypes.Requireable<boolean>;
        interactive: PropTypes.Requireable<boolean>;
        opacity: PropTypes.Requireable<number>;
        zoomAnimation: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        layer: PropTypes.Requireable<L.Layer>;
        position: PropTypes.Requireable<number[] | L.LatLng | PropTypes.InferProps<{
            lat: PropTypes.Validator<number>;
            lng: PropTypes.Validator<number>;
        }>>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: L.TooltipOptions;
    protected createInstance(props: L.TooltipOptions): L.Tooltip;
    protected bindOnLayer(layer: L.Layer): void;
    protected unbindOnLayer(layer: L.Layer): void;
    protected openOnMap(): void;
    protected closeOnMap(): void;
}
