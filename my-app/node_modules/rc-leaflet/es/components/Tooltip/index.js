var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import PropTypes from 'prop-types';
import L from 'leaflet';
import { Pixel } from '../../util/PropTypes';
import DivOverlay from '../DivOverlay';
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tooltip.prototype.createInstance = function (props) {
        return L.tooltip(props);
    };
    Tooltip.prototype.bindOnLayer = function (layer) {
        if (layer) {
            layer.bindTooltip(this.instance);
        }
    };
    Tooltip.prototype.unbindOnLayer = function (layer) {
        if (layer) {
            layer.unbindTooltip();
        }
    };
    Tooltip.prototype.openOnMap = function () {
        if (this.context.map) {
            this.context.map.openTooltip(this.instance);
        }
    };
    Tooltip.prototype.closeOnMap = function () {
        if (this.context.map) {
            this.context.map.closeTooltip(this.instance);
        }
    };
    Tooltip.propTypes = __assign({}, DivOverlay.propTypes, { pane: PropTypes.string, offset: Pixel, direction: PropTypes.oneOf(['right', 'left', 'top', 'bottom', 'center', 'auto']), permanent: PropTypes.bool, sticky: PropTypes.bool, interactive: PropTypes.bool, opacity: PropTypes.number });
    Tooltip.defaultProps = {
        direction: 'top'
    };
    return Tooltip;
}(DivOverlay));
export default Tooltip;
