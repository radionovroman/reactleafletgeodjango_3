import React from 'react';
import PropTypes from 'prop-types';
import L from 'leaflet';
import { ContextType } from '../RCMap/Context';
import { ContextType as State } from './Context';
import InteractiveLayer from '../InteractiveLayer';
import Content from './Content';
interface RequiredProps {
    position: L.LatLngExpression;
}
declare type Props = Readonly<L.MarkerOptions & RequiredProps>;
export default class Point extends InteractiveLayer<L.Marker, Props, State> {
    static propTypes: {
        position: PropTypes.Validator<number[] | L.LatLng | PropTypes.InferProps<{
            lat: PropTypes.Validator<number>;
            lng: PropTypes.Validator<number>;
        }>>;
        zIndexOffset: PropTypes.Requireable<number>;
        opacity: PropTypes.Requireable<number>;
        clickable: PropTypes.Requireable<boolean>;
        draggable: PropTypes.Requireable<boolean>;
        keyboard: PropTypes.Requireable<boolean>;
        title: PropTypes.Requireable<string>;
        alt: PropTypes.Requireable<string>;
        riseOnHover: PropTypes.Requireable<boolean>;
        riseOffset: PropTypes.Requireable<number>;
        autoPan: PropTypes.Requireable<boolean>;
        autoPanSpeed: PropTypes.Requireable<number>;
        autoPanPadding: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        interactive: PropTypes.Requireable<boolean>;
        bubblingMouseEvents: PropTypes.Requireable<boolean>;
        group: PropTypes.Requireable<L.LayerGroup<unknown>>;
        pane: PropTypes.Requireable<string>;
        attribution: PropTypes.Requireable<string>;
        onCreate: PropTypes.Requireable<(...args: any[]) => any>;
        onAdd: PropTypes.Requireable<(...args: any[]) => any>;
        onUpdate: PropTypes.Requireable<(...args: any[]) => any>;
        onBeforeRemove: PropTypes.Requireable<(...args: any[]) => any>;
        onRemove: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static Content: typeof Content;
    constructor(props: Props, context: ContextType);
    static getDerivedStateFromProps(nextProps: Props, prevState: State): Partial<State> | null;
    protected createInstance(props: Props): L.Marker;
    componentDidUpdate(prevProps: Props): void;
    render(): React.ReactNode;
}
export {};
