var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import PropTypes from 'prop-types';
import L from 'leaflet';
import { Point as PointType, Pixel } from '../../util/PropTypes';
import Context from './Context';
import InteractiveLayer from '../InteractiveLayer';
import Content from './Content';
import { keepPrevHTML } from '../DivIcon';
import { defaultIcon } from '../DivIcon/creator';
var Point = /** @class */ (function (_super) {
    __extends(Point, _super);
    function Point(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = {
            instance: _this.instance,
            icon: props.icon
        };
        return _this;
    }
    Point.getDerivedStateFromProps = function (nextProps, prevState) {
        var nextIcon = nextProps.icon;
        var instance = prevState.instance, icon = prevState.icon;
        if (nextIcon !== icon) {
            if (nextIcon instanceof L.DivIcon) {
                keepPrevHTML(instance, nextIcon);
            }
            return { icon: nextIcon };
        }
        return null;
    };
    Point.prototype.createInstance = function (props) {
        var position = props.position, _a = props.icon, icon = _a === void 0 ? defaultIcon : _a, options = __rest(props, ["position", "icon"]);
        return L.marker(position, __assign({}, options, { icon: icon }));
    };
    Point.prototype.componentDidUpdate = function (prevProps) {
        var prevPosition = prevProps.position, prevZIndexOffset = prevProps.zIndexOffset, prevOpacity = prevProps.opacity;
        var _a = this.props, position = _a.position, zIndexOffset = _a.zIndexOffset, opacity = _a.opacity;
        var point = this.instance;
        if (position !== prevPosition) {
            point.setLatLng(position);
        }
        if (zIndexOffset !== prevZIndexOffset) {
            point.setZIndexOffset(zIndexOffset);
        }
        if (opacity !== prevOpacity) {
            point.setOpacity(opacity);
        }
        _super.prototype.componentDidUpdate.call(this, prevProps);
    };
    Point.prototype.render = function () {
        return (React.createElement(Context.Provider, { value: this.state }, _super.prototype.render.call(this)));
    };
    Point.propTypes = __assign({}, InteractiveLayer.propTypes, { position: PointType.isRequired, zIndexOffset: PropTypes.number, opacity: PropTypes.number, clickable: PropTypes.bool, draggable: PropTypes.bool, keyboard: PropTypes.bool, title: PropTypes.string, alt: PropTypes.string, riseOnHover: PropTypes.bool, riseOffset: PropTypes.number, autoPan: PropTypes.bool, autoPanSpeed: PropTypes.number, autoPanPadding: Pixel });
    Point.Content = Content;
    return Point;
}(InteractiveLayer));
export default Point;
