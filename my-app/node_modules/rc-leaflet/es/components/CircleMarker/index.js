var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import PropTypes from 'prop-types';
import L from 'leaflet';
import { Point } from '../../util/PropTypes';
import Path from '../Path';
var CircleMarker = /** @class */ (function (_super) {
    __extends(CircleMarker, _super);
    function CircleMarker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CircleMarker.prototype.createInstance = function (props) {
        var center = props.center, options = __rest(props, ["center"]);
        return L.circleMarker(center, options);
    };
    CircleMarker.prototype.componentDidUpdate = function (prevProps) {
        var prevCenter = prevProps.center, prevRadius = prevProps.radius;
        var _a = this.props, center = _a.center, radius = _a.radius;
        var circle = this.instance;
        if (center && center !== prevCenter) {
            circle.setLatLng(center);
        }
        if (radius && radius !== prevRadius) {
            circle.setRadius(radius);
        }
        _super.prototype.componentDidUpdate.call(this, prevProps);
    };
    CircleMarker.propTypes = __assign({}, Path.propTypes, { radius: PropTypes.number.isRequired, center: Point.isRequired });
    return CircleMarker;
}(Path));
export default CircleMarker;
