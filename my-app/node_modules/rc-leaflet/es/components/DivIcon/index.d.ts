import PropTypes from 'prop-types';
import L from 'leaflet';
import BaseIcon, { Props as BaseIconProps } from '../BaseIcon';
declare type Props = Readonly<L.DivIconOptions & BaseIconProps>;
interface State {
    instance: L.DivIcon;
}
export declare const keepPrevHTML: (point: L.Marker<any>, icon: L.DivIcon) => void;
export default class DivIcon extends BaseIcon<L.DivIcon, Props> {
    static propTypes: {
        html: PropTypes.Requireable<string | false>;
        bgPos: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        iconSize: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        iconAnchor: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        popupAnchor: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        className: PropTypes.Requireable<string>;
        pane: PropTypes.Requireable<string>;
        attribution: PropTypes.Requireable<string>;
        iconUrl: PropTypes.Requireable<string>;
        iconRetinaUrl: PropTypes.Requireable<string>;
        tooltipAnchor: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        shadowUrl: PropTypes.Requireable<string>;
        shadowRetinaUrl: PropTypes.Requireable<string>;
        shadowSize: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        shadowAnchor: PropTypes.Requireable<number[] | [number, number] | L.Point>;
        layer: PropTypes.Requireable<L.Marker<unknown>>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    static getDerivedStateFromProps(nextProps: Props, prevState: State): State;
    componentWillUnmount(): void;
}
export {};
