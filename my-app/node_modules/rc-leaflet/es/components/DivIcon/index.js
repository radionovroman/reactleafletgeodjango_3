var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import PropTypes from 'prop-types';
import { Pixel } from '../../util/PropTypes';
import creator, { defaultIcon } from './creator';
import BaseIcon from '../BaseIcon';
export var keepPrevHTML = function (point, icon) {
    if (point) {
        var element = point.getElement();
        var html = element && element.lastElementChild;
        point.setIcon(icon);
        if (html) {
            element.appendChild(html);
        }
    }
};
var DivIcon = /** @class */ (function (_super) {
    __extends(DivIcon, _super);
    function DivIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DivIcon.getDerivedStateFromProps = function (nextProps, prevState) {
        var layer = nextProps.layer, children = nextProps.children, html = nextProps.html, options = __rest(nextProps, ["layer", "children", "html"]);
        var icon = prevState.instance;
        icon = creator(options);
        keepPrevHTML(layer, icon);
        return { instance: icon };
    };
    DivIcon.prototype.componentWillUnmount = function () {
        keepPrevHTML(this.props.layer, defaultIcon);
    };
    DivIcon.propTypes = __assign({}, BaseIcon.propTypes, { html: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([false])]), bgPos: Pixel, iconSize: Pixel, iconAnchor: Pixel, popupAnchor: Pixel, className: PropTypes.string });
    return DivIcon;
}(BaseIcon));
export default DivIcon;
