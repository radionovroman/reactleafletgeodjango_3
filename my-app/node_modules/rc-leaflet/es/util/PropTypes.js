var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import PropTypes from 'prop-types';
import L from 'leaflet';
var ClassValueTypes = [PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.object, PropTypes.oneOf([null]), PropTypes.oneOf([undefined])];
var ClassValue = PropTypes.oneOfType(__spread(ClassValueTypes, [PropTypes.arrayOf(PropTypes.oneOfType(ClassValueTypes))]));
var Zoom = PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['center'])]);
var PointObject = PropTypes.shape({ lat: PropTypes.number.isRequired, lng: PropTypes.number.isRequired });
var PointTuple = PropTypes.arrayOf(PropTypes.number.isRequired);
var PixelTuple = PointTuple;
var CRS = PropTypes.shape({
    latLngToPoint: PropTypes.func.isRequired,
    pointToLatLng: PropTypes.func.isRequired,
    project: PropTypes.func.isRequired,
    unproject: PropTypes.func.isRequired,
    scale: PropTypes.func.isRequired,
    zoom: PropTypes.func.isRequired,
    getProjectedBounds: PropTypes.func.isRequired,
    distance: PropTypes.func.isRequired,
    wrapLatLng: PropTypes.func.isRequired,
    code: PropTypes.string,
    wrapLng: PointTuple,
    wrapLat: PointTuple,
    infinite: PropTypes.bool.isRequired
});
var Point = PropTypes.oneOfType([
    PointTuple,
    PointObject,
    PropTypes.instanceOf(L.LatLng)
]);
var PointBounds = PropTypes.oneOfType([
    PropTypes.arrayOf(PointTuple),
    PropTypes.instanceOf(L.LatLngBounds)
]);
var Pixel = PropTypes.oneOfType([
    PixelTuple,
    PropTypes.instanceOf(L.Point)
]);
var Icon = PropTypes.oneOfType([PropTypes.instanceOf(L.Icon), PropTypes.instanceOf(L.DivIcon)]);
var Bounds = PropTypes.oneOfType([
    PropTypes.arrayOf(PointTuple),
    PropTypes.instanceOf(L.LatLngBounds)
]);
var ZoomOptionsShape = {
    animate: PropTypes.bool
};
var PanOptionsShape = {
    animate: PropTypes.bool,
    duration: PropTypes.number,
    easeLinearity: PropTypes.number,
    noMoveStart: PropTypes.bool
};
var BoundsOptionsShape = __assign({ paddingTopLeft: Pixel, paddingBottomRight: Pixel, padding: Pixel, maxZoom: PropTypes.number }, ZoomOptionsShape, PanOptionsShape);
var BoundsOptions = PropTypes.shape(BoundsOptionsShape);
var GridLayerOptionsShape = {
    tileSize: PropTypes.oneOfType([PropTypes.number, PropTypes.instanceOf(L.Point)]),
    opacity: PropTypes.number,
    updateWhenIdle: PropTypes.bool,
    updateWhenZooming: PropTypes.bool,
    updateInterval: PropTypes.number,
    attribution: PropTypes.string,
    zIndex: PropTypes.number,
    bounds: Bounds,
    minZoom: PropTypes.number,
    maxZoom: PropTypes.number,
    noWrap: PropTypes.bool,
    pane: PropTypes.string,
    className: PropTypes.string,
    keepBuffer: PropTypes.number
};
var TileLayerOptionsShape = __assign({ minZoom: PropTypes.number, maxZoom: PropTypes.number, maxNativeZoom: PropTypes.number, minNativeZoom: PropTypes.number, subdomains: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]), errorTileUrl: PropTypes.string, zoomOffset: PropTypes.number, tms: PropTypes.bool, zoomReverse: PropTypes.bool, detectRetina: PropTypes.bool, crossOrigin: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]) }, GridLayerOptionsShape);
export { ClassValue, Zoom, CRS, Point, PointBounds, Pixel, Icon, Bounds, BoundsOptions, TileLayerOptionsShape };
